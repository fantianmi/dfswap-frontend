[{"D:\\task159\\frontend\\src\\index.tsx":"1","D:\\task159\\frontend\\src\\Providers.tsx":"2","D:\\task159\\frontend\\src\\App.tsx":"3","D:\\task159\\frontend\\src\\components\\PageLoader.tsx":"4","D:\\task159\\frontend\\src\\style\\Global.tsx":"5","D:\\task159\\frontend\\src\\views\\NotFound.tsx":"6","D:\\task159\\frontend\\src\\state\\hooks.ts":"7","D:\\task159\\frontend\\src\\views\\Farms\\index.ts":"8","D:\\task159\\frontend\\src\\views\\Home\\index.ts":"9","D:\\task159\\frontend\\src\\views\\Lottery\\index.ts":"10","D:\\task159\\frontend\\src\\views\\Nft\\index.ts":"11","D:\\task159\\frontend\\src\\views\\Pools\\index.ts":"12","D:\\task159\\frontend\\src\\views\\Roadmap\\index.ts":"13","D:\\task159\\frontend\\src\\views\\Whitepaper\\index.ts":"14","D:\\task159\\frontend\\src\\views\\Gaming\\index.ts":"15","D:\\task159\\frontend\\src\\views\\Layer\\Home\\index.ts":"16","D:\\task159\\frontend\\src\\utils\\getRpcUrl.ts":"17","D:\\task159\\frontend\\src\\views\\Layer\\Farms\\index.ts":"18","D:\\task159\\frontend\\src\\views\\Ifos\\index.tsx":"19","D:\\task159\\frontend\\src\\components\\Menu\\index.tsx":"20","D:\\task159\\frontend\\src\\views\\Profile\\index.tsx":"21","D:\\task159\\frontend\\src\\contexts\\BlockContext.tsx":"22","D:\\task159\\frontend\\src\\contexts\\RefreshContext.tsx":"23","D:\\task159\\frontend\\src\\contexts\\ThemeContext.tsx":"24","D:\\task159\\frontend\\src\\contexts\\Localisation\\languageContext.tsx":"25","D:\\task159\\frontend\\src\\components\\layout\\Page.tsx":"26","D:\\task159\\frontend\\src\\state\\index.ts":"27","D:\\task159\\frontend\\src\\state\\actions.ts":"28","D:\\task159\\frontend\\src\\config\\constants\\types.ts":"29","D:\\task159\\frontend\\src\\config\\constants\\nfts.ts":"30","D:\\task159\\frontend\\src\\views\\Home\\Home.tsx":"31","D:\\task159\\frontend\\src\\views\\Farms\\Farms.tsx":"32","D:\\task159\\frontend\\src\\views\\Lottery\\Lottery.tsx":"33","D:\\task159\\frontend\\src\\components\\Menu\\config.ts":"34","D:\\task159\\frontend\\src\\views\\Pools\\Oceans.tsx":"35","D:\\task159\\frontend\\src\\views\\Nft\\Nft.tsx":"36","D:\\task159\\frontend\\src\\views\\Roadmap\\Roadmap.tsx":"37","D:\\task159\\frontend\\src\\views\\Gaming\\Gaming.tsx":"38","D:\\task159\\frontend\\src\\views\\Whitepaper\\Whitepaper.tsx":"39","D:\\task159\\frontend\\src\\views\\Layer\\Home\\Home.tsx":"40","D:\\task159\\frontend\\src\\views\\Layer\\Farms\\Farms.tsx":"41","D:\\task159\\frontend\\src\\hooks\\useI18n.ts":"42","D:\\task159\\frontend\\src\\views\\Ifos\\PastIfo.tsx":"43","D:\\task159\\frontend\\src\\views\\Ifos\\CurrentIfo.tsx":"44","D:\\task159\\frontend\\src\\views\\Profile\\TaskCenter.tsx":"45","D:\\task159\\frontend\\src\\views\\Profile\\PublicProfile.tsx":"46","D:\\task159\\frontend\\src\\views\\Ifos\\components\\Hero.tsx":"47","D:\\task159\\frontend\\src\\views\\Profile\\components\\Header.tsx":"48","D:\\task159\\frontend\\src\\components\\layout\\Container.tsx":"49","D:\\task159\\frontend\\src\\state\\achievements\\index.ts":"50","D:\\task159\\frontend\\src\\state\\collectibles\\index.ts":"51","D:\\task159\\frontend\\src\\state\\prices\\index.ts":"52","D:\\task159\\frontend\\src\\utils\\formatBalance.ts":"53","D:\\task159\\frontend\\src\\utils\\addressHelpers.ts":"54","D:\\task159\\frontend\\src\\hooks\\useRefresh.ts":"55","D:\\task159\\frontend\\src\\state\\profile\\index.tsx":"56","D:\\task159\\frontend\\src\\state\\teams\\index.tsx":"57","D:\\task159\\frontend\\src\\hooks\\useTheme.ts":"58","D:\\task159\\frontend\\src\\contexts\\Localisation\\translationsContext.ts":"59","D:\\task159\\frontend\\src\\utils\\web3.ts":"60","D:\\task159\\frontend\\src\\config\\localisation\\languageCodes.ts":"61","D:\\task159\\frontend\\src\\views\\Profile\\ProfileCreation\\index.tsx":"62","D:\\task159\\frontend\\src\\views\\Pools\\components\\Divider.tsx":"63","D:\\task159\\frontend\\src\\views\\Ifos\\components\\IfoLayout.tsx":"64","D:\\task159\\frontend\\src\\views\\Ifos\\components\\IfoCardV1Data.tsx":"65","D:\\task159\\frontend\\src\\views\\Profile\\components\\Menu.tsx":"66","D:\\task159\\frontend\\src\\views\\Profile\\components\\AchievementsList.tsx":"67","D:\\task159\\frontend\\src\\views\\Layer\\Farms\\components\\Divider.tsx":"68","D:\\task159\\frontend\\src\\views\\Layer\\Farms\\components\\FarmCard\\FarmCard.tsx":"69","D:\\task159\\frontend\\src\\views\\Profile\\components\\EditProfileAvatar.tsx":"70","D:\\task159\\frontend\\src\\views\\Profile\\components\\StatBox.tsx":"71","D:\\task159\\frontend\\src\\views\\Profile\\components\\HeaderWrapper.tsx":"72","D:\\task159\\frontend\\src\\views\\Profile\\components\\ClaimGiftModal.tsx":"73","D:\\task159\\frontend\\src\\views\\Profile\\components\\WalletNotConnected.tsx":"74","D:\\task159\\frontend\\src\\views\\Profile\\components\\CardHeader.tsx":"75","D:\\task159\\frontend\\src\\views\\Profile\\components\\Collectibles.tsx":"76","D:\\task159\\frontend\\src\\views\\Profile\\components\\ComingSoon.tsx":"77","D:\\task159\\frontend\\src\\views\\Profile\\components\\ClaimPointsCallout .tsx":"78","D:\\task159\\frontend\\src\\views\\Ifos\\components\\IfoSteps.tsx":"79","D:\\task159\\frontend\\src\\views\\Ifos\\components\\IfoCardV2Data.tsx":"80","D:\\task159\\frontend\\src\\state\\achievements\\helpers.ts":"81","D:\\task159\\frontend\\src\\state\\block\\index.ts":"82","D:\\task159\\frontend\\src\\state\\farms\\index.ts":"83","D:\\task159\\frontend\\src\\state\\profile\\getProfile.ts":"84","D:\\task159\\frontend\\src\\state\\teams\\helpers.ts":"85","D:\\task159\\frontend\\src\\views\\Ifos\\components\\IfoQuestions\\index.tsx":"86","D:\\task159\\frontend\\src\\views\\Layer\\Farms\\components\\FarmTabButtons\\index.tsx":"87","D:\\task159\\frontend\\src\\views\\Profile\\ProfileCreation\\Steps.tsx":"88","D:\\task159\\frontend\\src\\views\\Profile\\ProfileCreation\\Header.tsx":"89","D:\\task159\\frontend\\src\\views\\Profile\\ProfileCreation\\contexts\\ProfileCreationProvider.tsx":"90","D:\\task159\\frontend\\src\\views\\Profile\\components\\EditProfileModal\\index.tsx":"91","D:\\task159\\frontend\\src\\views\\Profile\\components\\AchievementCard.tsx":"92","D:\\task159\\frontend\\src\\views\\Profile\\components\\ProfileAvatar.tsx":"93","D:\\task159\\frontend\\src\\views\\Profile\\components\\SecondaryCard.tsx":"94","D:\\task159\\frontend\\src\\views\\Layer\\Farms\\components\\FarmCard\\ApyButton.tsx":"95","D:\\task159\\frontend\\src\\views\\Profile\\components\\CollectibleCard.tsx":"96","D:\\task159\\frontend\\src\\utils\\collectibles.ts":"97","D:\\task159\\frontend\\src\\state\\farms\\fetchFarmUser.ts":"98","D:\\task159\\frontend\\src\\config\\constants\\contracts.ts":"99","D:\\task159\\frontend\\src\\state\\farms\\fetchFarms.ts":"100","D:\\task159\\frontend\\src\\state\\profile\\helpers.ts":"101","D:\\task159\\frontend\\src\\config\\constants\\teams.ts":"102","D:\\task159\\frontend\\src\\views\\Ifos\\components\\IfoQuestions\\config.ts":"103","D:\\task159\\frontend\\src\\config\\constants\\index.ts":"104","D:\\task159\\frontend\\src\\utils\\contractHelpers.ts":"105","D:\\task159\\frontend\\src\\views\\Ifos\\components\\IfoFoldableCard\\index.tsx":"106","D:\\task159\\frontend\\src\\hooks\\ifo\\v1\\useGetWalletIfoData.ts":"107","D:\\task159\\frontend\\src\\views\\Profile\\ProfileCreation\\UserName.tsx":"108","D:\\task159\\frontend\\src\\views\\Profile\\ProfileCreation\\TeamSelection.tsx":"109","D:\\task159\\frontend\\src\\views\\Profile\\components\\EditProfileModal\\reducer.ts":"110","D:\\task159\\frontend\\src\\views\\Profile\\ProfileCreation\\ProfilePicture.tsx":"111","D:\\task159\\frontend\\src\\views\\Profile\\ProfileCreation\\Mint.tsx":"112","D:\\task159\\frontend\\src\\hooks\\useTokenBalance.ts":"113","D:\\task159\\frontend\\src\\views\\Profile\\ProfileCreation\\config.ts":"114","D:\\task159\\frontend\\src\\views\\Profile\\components\\EditProfileModal\\ApproveCakeView.tsx":"115","D:\\task159\\frontend\\src\\components\\UnlockButton.tsx":"116","D:\\task159\\frontend\\src\\views\\Profile\\components\\EditProfileModal\\ChangeProfilePicView.tsx":"117","D:\\task159\\frontend\\src\\views\\Profile\\components\\AchievementDescription.tsx":"118","D:\\task159\\frontend\\src\\views\\Profile\\components\\AchievementTitle.tsx":"119","D:\\task159\\frontend\\src\\views\\Profile\\components\\AchievementAvatar.tsx":"120","D:\\task159\\frontend\\src\\views\\Profile\\components\\EditProfileModal\\PauseProfileView.tsx":"121","D:\\task159\\frontend\\src\\views\\Profile\\components\\EditProfileModal\\StartView.tsx":"122","D:\\task159\\frontend\\src\\views\\Profile\\components\\AchievementRow\\index.tsx":"123","D:\\task159\\frontend\\src\\hooks\\ifo\\v2\\useGetWalletIfoData.ts":"124","D:\\task159\\frontend\\src\\views\\Layer\\Farms\\components\\FarmCard\\ApyCalculatorModal.tsx":"125","D:\\task159\\frontend\\src\\views\\Layer\\Farms\\components\\FarmCard\\CardHeading.tsx":"126","D:\\task159\\frontend\\src\\views\\Layer\\Farms\\components\\FarmCard\\DetailsSection.tsx":"127","D:\\task159\\frontend\\src\\views\\Layer\\Farms\\components\\FarmCard\\CardActionsContainer.tsx":"128","D:\\task159\\frontend\\src\\config\\constants\\farms.ts":"129","D:\\task159\\frontend\\src\\utils\\achievements.ts":"130","D:\\task159\\frontend\\src\\config\\constants\\campaigns.ts":"131","D:\\task159\\frontend\\src\\hooks\\ifo\\v2\\useGetPublicIfoData.ts":"132","D:\\task159\\frontend\\src\\utils\\makeBatchRequest.ts":"133","D:\\task159\\frontend\\src\\config\\index.ts":"134","D:\\task159\\frontend\\src\\config\\constants\\ifo.ts":"135","D:\\task159\\frontend\\src\\views\\Profile\\ProfileCreation\\contexts\\hook.ts":"136","D:\\task159\\frontend\\src\\views\\Profile\\components\\NextStepButton.tsx":"137","D:\\task159\\frontend\\src\\views\\Profile\\components\\SelectionCard.tsx":"138","D:\\task159\\frontend\\src\\hooks\\useContract.ts":"139","D:\\task159\\frontend\\src\\views\\Profile\\components\\ApproveConfirmButtons.tsx":"140","D:\\task159\\frontend\\src\\utils\\multicall.ts":"141","D:\\task159\\frontend\\src\\hooks\\ifo\\helpers.ts":"142","D:\\task159\\frontend\\src\\views\\Layer\\Farms\\components\\FarmCard\\HarvestAction.tsx":"143","D:\\task159\\frontend\\src\\views\\Layer\\Farms\\components\\FarmCard\\StakeAction.tsx":"144","D:\\task159\\frontend\\src\\config\\constants\\tokens.ts":"145","D:\\task159\\frontend\\src\\views\\Profile\\components\\AchievementRow\\PointsLabel.tsx":"146","D:\\task159\\frontend\\src\\views\\Profile\\components\\ActionColumn.tsx":"147","D:\\task159\\frontend\\src\\utils\\erc20.ts":"148","D:\\task159\\frontend\\src\\components\\FoldableText\\index.tsx":"149","D:\\task159\\frontend\\src\\hooks\\useGetProfileCosts.ts":"150","D:\\task159\\frontend\\src\\views\\Profile\\components\\ConfirmProfileCreationModal.tsx":"151","D:\\task159\\frontend\\src\\views\\Ifos\\components\\IfoFoldableCard\\Timer.tsx":"152","D:\\task159\\frontend\\src\\views\\Ifos\\components\\IfoFoldableCard\\Achievement.tsx":"153","D:\\task159\\frontend\\src\\hooks\\useApproveConfirmTransaction.ts":"154","D:\\task159\\frontend\\src\\hooks\\useHasCakeBalance.ts":"155","D:\\task159\\frontend\\src\\components\\ExpandableSectionButton\\index.ts":"156","D:\\task159\\frontend\\src\\utils\\compoundApyHelpers.ts":"157","D:\\task159\\frontend\\src\\hooks\\useAllowance.ts":"158","D:\\task159\\frontend\\src\\utils\\getLiquidityUrlPathParts.ts":"159","D:\\task159\\frontend\\src\\hooks\\useApprove.ts":"160","D:\\task159\\frontend\\src\\components\\Tags.tsx":"161","D:\\task159\\frontend\\src\\hooks\\useStake.ts":"162","D:\\task159\\frontend\\src\\views\\Layer\\Farms\\components\\DepositModal.tsx":"163","D:\\task159\\frontend\\src\\views\\Layer\\Farms\\components\\WithdrawModal.tsx":"164","D:\\task159\\frontend\\src\\hooks\\useWeb3.ts":"165","D:\\task159\\frontend\\src\\components\\ExpandableSectionButton\\ExpandableSectionButton.tsx":"166","D:\\task159\\frontend\\src\\config\\constants\\pools.ts":"167","D:\\task159\\frontend\\src\\config\\constants\\farms3.ts":"168","D:\\task159\\frontend\\src\\hooks\\useUnstake.ts":"169","D:\\task159\\frontend\\src\\hooks\\useHarvest.ts":"170","D:\\task159\\frontend\\src\\utils\\getTimePeriods.ts":"171","D:\\task159\\frontend\\src\\utils\\callHelpers.ts":"172","D:\\task159\\frontend\\src\\hooks\\ifo\\v1\\useGetPublicIfoData.ts":"173","D:\\task159\\frontend\\src\\views\\Ifos\\components\\IfoFoldableCard\\IfoPoolCard\\index.tsx":"174","D:\\task159\\frontend\\src\\components\\TokenInput\\index.ts":"175","D:\\task159\\frontend\\src\\components\\ModalActions\\index.ts":"176","D:\\task159\\frontend\\src\\views\\Ifos\\components\\IfoFoldableCard\\IfoPoolCard\\IfoCardDetails.tsx":"177","D:\\task159\\frontend\\src\\views\\Ifos\\components\\IfoFoldableCard\\IfoPoolCard\\IfoCardActions.tsx":"178","D:\\task159\\frontend\\src\\views\\Ifos\\components\\IfoFoldableCard\\IfoPoolCard\\IfoCardTokens.tsx":"179","D:\\task159\\frontend\\src\\views\\Layer\\Home\\components\\Divider.tsx":"180","D:\\task159\\frontend\\src\\state\\toasts\\index.ts":"181","D:\\task159\\frontend\\src\\views\\Layer\\Home\\components\\TotalValueLockedCard.tsx":"182","D:\\task159\\frontend\\src\\views\\Layer\\Home\\components\\CakeStats.tsx":"183","D:\\task159\\frontend\\src\\components\\TokenInput\\TokenInput.tsx":"184","D:\\task159\\frontend\\src\\views\\Layer\\Home\\components\\FarmStakingCard.tsx":"185","D:\\task159\\frontend\\src\\views\\Pools\\components\\Coming.tsx":"186","D:\\task159\\frontend\\src\\views\\Pools\\components\\PoolCard.tsx":"187","D:\\task159\\frontend\\src\\components\\ModalActions\\ModalActions.tsx":"188","D:\\task159\\frontend\\src\\views\\Farms\\components\\Divider.tsx":"189","D:\\task159\\frontend\\src\\views\\Ifos\\components\\IfoFoldableCard\\IfoPoolCard\\Skeletons.tsx":"190","D:\\task159\\frontend\\src\\views\\Farms\\components\\FarmCard\\FarmCard.tsx":"191","D:\\task159\\frontend\\src\\views\\Ifos\\components\\IfoFoldableCard\\IfoPoolCard\\ClaimButton.tsx":"192","D:\\task159\\frontend\\src\\views\\Ifos\\components\\IfoFoldableCard\\IfoPoolCard\\PercentageOfTotal.tsx":"193","D:\\task159\\frontend\\src\\views\\Ifos\\components\\IfoFoldableCard\\IfoPoolCard\\ContributeButton.tsx":"194","D:\\task159\\frontend\\src\\components\\layout\\Flex.tsx":"195","D:\\task159\\frontend\\src\\hooks\\useBlock.ts":"196","D:\\task159\\frontend\\src\\views\\Pools\\components\\PoolTabButtons\\index.tsx":"197","D:\\task159\\frontend\\src\\views\\Farms\\components\\FarmTabButtons\\index.tsx":"198","D:\\task159\\frontend\\src\\views\\Layer\\Home\\components\\CardValue.tsx":"199","D:\\task159\\frontend\\src\\views\\Pools\\components\\Card.tsx":"200","D:\\task159\\frontend\\src\\views\\Layer\\Home\\components\\CakeWalletBalance.tsx":"201","D:\\task159\\frontend\\src\\views\\Pools\\components\\CardFooter.tsx":"202","D:\\task159\\frontend\\src\\views\\Pools\\components\\HarvestButton.tsx":"203","D:\\task159\\frontend\\src\\views\\Pools\\components\\OldSyrupTitle.tsx":"204","D:\\task159\\frontend\\src\\views\\Pools\\components\\CardTitle.tsx":"205","D:\\task159\\frontend\\src\\views\\Pools\\components\\WithdrawModal.tsx":"206","D:\\task159\\frontend\\src\\views\\Pools\\components\\DepositModal.tsx":"207","D:\\task159\\frontend\\src\\views\\Farms\\components\\FarmCard\\ApyButton.tsx":"208","D:\\task159\\frontend\\src\\components\\CardNav\\index.tsx":"209","D:\\task159\\frontend\\src\\views\\Ifos\\components\\IfoFoldableCard\\IfoPoolCard\\GetLpModal.tsx":"210","D:\\task159\\frontend\\src\\views\\Ifos\\components\\IfoFoldableCard\\IfoPoolCard\\ContributeModal.tsx":"211","D:\\task159\\frontend\\src\\views\\Farms\\components\\FarmCard\\CardActionsContainer.tsx":"212","D:\\task159\\frontend\\src\\views\\Farms\\components\\FarmCard\\CardHeading.tsx":"213","D:\\task159\\frontend\\src\\views\\Farms\\components\\FarmCard\\DetailsSection.tsx":"214","D:\\task159\\frontend\\src\\components\\Input\\index.ts":"215","D:\\task159\\frontend\\src\\components\\Spacer\\index.ts":"216","D:\\task159\\frontend\\src\\components\\Balance.tsx":"217","D:\\task159\\frontend\\src\\views\\Farms\\components\\FarmCard\\ApyCalculatorModal.tsx":"218","D:\\task159\\frontend\\src\\views\\Layer\\Home\\components\\CakeHarvestBalance.tsx":"219","D:\\task159\\frontend\\src\\views\\Farms\\components\\FarmCard\\HarvestAction.tsx":"220","D:\\task159\\frontend\\src\\views\\Farms\\components\\FarmCard\\StakeAction.tsx":"221","D:\\task159\\frontend\\src\\components\\Input\\Input.tsx":"222","D:\\task159\\frontend\\src\\components\\Spacer\\Spacer.tsx":"223","D:\\task159\\frontend\\src\\components\\Label\\index.ts":"224","D:\\task159\\frontend\\src\\components\\TranslatedText\\index.ts":"225","D:\\task159\\frontend\\src\\hooks\\useFarmsWithBalance.ts":"226","D:\\task159\\frontend\\src\\views\\Home\\components\\TwitterCard.tsx":"227","D:\\task159\\frontend\\src\\views\\Home\\components\\TotalValueLockedCard.tsx":"228","D:\\task159\\frontend\\src\\views\\Home\\components\\FarmStakingCard.tsx":"229","D:\\task159\\frontend\\src\\views\\Home\\components\\CakeStats.tsx":"230","D:\\task159\\frontend\\src\\views\\Farms\\components\\WithdrawModal.tsx":"231","D:\\task159\\frontend\\src\\views\\Farms\\components\\DepositModal.tsx":"232","D:\\task159\\frontend\\src\\components\\Label\\Label.tsx":"233","D:\\task159\\frontend\\src\\state\\pools\\index.ts":"234","D:\\task159\\frontend\\src\\state\\farms3\\index.ts":"235","D:\\task159\\frontend\\src\\components\\TranslatedText\\TranslatedText.tsx":"236","D:\\task159\\frontend\\src\\views\\Home\\components\\CardValue.tsx":"237","D:\\task159\\frontend\\src\\views\\Home\\components\\CakeHarvestBalance.tsx":"238","D:\\task159\\frontend\\src\\views\\Home\\components\\CakeWalletBalance.tsx":"239","D:\\task159\\frontend\\src\\state\\pools\\fetchPoolsUser.ts":"240","D:\\task159\\frontend\\src\\state\\farms3\\fetchFarmUser3.ts":"241","D:\\task159\\frontend\\src\\state\\farms3\\fetchFarms3.ts":"242","D:\\task159\\frontend\\src\\state\\pools\\fetchPools.ts":"243"},{"size":265,"mtime":1619190262659,"results":"244","hashOfConfig":"245"},{"size":1376,"mtime":1620194922489,"results":"246","hashOfConfig":"245"},{"size":3877,"mtime":1619690727491,"results":"247","hashOfConfig":"245"},{"size":377,"mtime":1617256294000,"results":"248","hashOfConfig":"245"},{"size":571,"mtime":1617256294000,"results":"249","hashOfConfig":"245"},{"size":825,"mtime":1619156634293,"results":"250","hashOfConfig":"245"},{"size":11518,"mtime":1619647534280,"results":"251","hashOfConfig":"245"},{"size":34,"mtime":1617256294000,"results":"252","hashOfConfig":"245"},{"size":33,"mtime":1617256294000,"results":"253","hashOfConfig":"245"},{"size":36,"mtime":1617298558000,"results":"254","hashOfConfig":"245"},{"size":32,"mtime":1617277466000,"results":"255","hashOfConfig":"245"},{"size":36,"mtime":1618631743626,"results":"256","hashOfConfig":"245"},{"size":36,"mtime":1617466421000,"results":"257","hashOfConfig":"245"},{"size":39,"mtime":1617467267000,"results":"258","hashOfConfig":"245"},{"size":35,"mtime":1617299725000,"results":"259","hashOfConfig":"245"},{"size":33,"mtime":1618124627000,"results":"260","hashOfConfig":"245"},{"size":318,"mtime":1617256294000,"results":"261","hashOfConfig":"245"},{"size":34,"mtime":1618124627000,"results":"262","hashOfConfig":"245"},{"size":1109,"mtime":1619142359123,"results":"263","hashOfConfig":"245"},{"size":1343,"mtime":1619193526479,"results":"264","hashOfConfig":"245"},{"size":1057,"mtime":1619401510965,"results":"265","hashOfConfig":"245"},{"size":746,"mtime":1617256294000,"results":"266","hashOfConfig":"245"},{"size":912,"mtime":1617256294000,"results":"267","hashOfConfig":"245"},{"size":909,"mtime":1617256294000,"results":"268","hashOfConfig":"245"},{"size":3142,"mtime":1619647534280,"results":"269","hashOfConfig":"245"},{"size":406,"mtime":1617256294000,"results":"270","hashOfConfig":"245"},{"size":1105,"mtime":1619579615161,"results":"271","hashOfConfig":"245"},{"size":417,"mtime":1619253350757,"results":"272","hashOfConfig":"245"},{"size":3593,"mtime":1623045255317,"results":"273","hashOfConfig":"245"},{"size":9683,"mtime":1619690386747,"results":"274","hashOfConfig":"245"},{"size":1838,"mtime":1623017279204,"results":"275","hashOfConfig":"245"},{"size":5225,"mtime":1623741507619,"results":"276","hashOfConfig":"245"},{"size":1821,"mtime":1617618861000,"results":"277","hashOfConfig":"245"},{"size":3072,"mtime":1623016071553,"results":"278","hashOfConfig":"245"},{"size":4746,"mtime":1618926249642,"results":"279","hashOfConfig":"245"},{"size":1813,"mtime":1617618909000,"results":"280","hashOfConfig":"245"},{"size":1715,"mtime":1617466915000,"results":"281","hashOfConfig":"245"},{"size":1818,"mtime":1617618805000,"results":"282","hashOfConfig":"245"},{"size":1553,"mtime":1617467543000,"results":"283","hashOfConfig":"245"},{"size":2158,"mtime":1618247797885,"results":"284","hashOfConfig":"245"},{"size":5717,"mtime":1618863671407,"results":"285","hashOfConfig":"245"},{"size":1231,"mtime":1619401395237,"results":"286","hashOfConfig":"245"},{"size":683,"mtime":1619142368398,"results":"287","hashOfConfig":"245"},{"size":646,"mtime":1619399177457,"results":"288","hashOfConfig":"245"},{"size":1685,"mtime":1619004536000,"results":"289","hashOfConfig":"245"},{"size":3501,"mtime":1619401544891,"results":"290","hashOfConfig":"245"},{"size":1347,"mtime":1619078910000,"results":"291","hashOfConfig":"245"},{"size":1570,"mtime":1619004536000,"results":"292","hashOfConfig":"245"},{"size":304,"mtime":1617256294000,"results":"293","hashOfConfig":"245"},{"size":1472,"mtime":1619078910000,"results":"294","hashOfConfig":"245"},{"size":2762,"mtime":1619648140923,"results":"295","hashOfConfig":"245"},{"size":1265,"mtime":1619251470324,"results":"296","hashOfConfig":"245"},{"size":636,"mtime":1619143007259,"results":"297","hashOfConfig":"245"},{"size":1326,"mtime":1619578043328,"results":"298","hashOfConfig":"245"},{"size":251,"mtime":1617256294000,"results":"299","hashOfConfig":"245"},{"size":1624,"mtime":1619078910000,"results":"300","hashOfConfig":"245"},{"size":1753,"mtime":1619078910000,"results":"301","hashOfConfig":"245"},{"size":360,"mtime":1617256294000,"results":"302","hashOfConfig":"245"},{"size":391,"mtime":1617256294000,"results":"303","hashOfConfig":"245"},{"size":747,"mtime":1619146902345,"results":"304","hashOfConfig":"245"},{"size":1992,"mtime":1617256294000,"results":"305","hashOfConfig":"245"},{"size":379,"mtime":1619004536000,"results":"306","hashOfConfig":"245"},{"size":193,"mtime":1618631743595,"results":"307","hashOfConfig":"245"},{"size":219,"mtime":1619078910000,"results":"308","hashOfConfig":"245"},{"size":615,"mtime":1619078910000,"results":"309","hashOfConfig":"245"},{"size":1132,"mtime":1619004536000,"results":"310","hashOfConfig":"245"},{"size":1062,"mtime":1619004536000,"results":"311","hashOfConfig":"245"},{"size":185,"mtime":1618124627000,"results":"312","hashOfConfig":"245"},{"size":6303,"mtime":1618151952000,"results":"313","hashOfConfig":"245"},{"size":1312,"mtime":1619004536000,"results":"314","hashOfConfig":"245"},{"size":952,"mtime":1619004536000,"results":"315","hashOfConfig":"245"},{"size":223,"mtime":1619004536000,"results":"316","hashOfConfig":"245"},{"size":3444,"mtime":1619401816487,"results":"317","hashOfConfig":"245"},{"size":547,"mtime":1619004536000,"results":"318","hashOfConfig":"245"},{"size":519,"mtime":1619004536000,"results":"319","hashOfConfig":"245"},{"size":2124,"mtime":1619004536000,"results":"320","hashOfConfig":"245"},{"size":636,"mtime":1619004536000,"results":"321","hashOfConfig":"245"},{"size":2461,"mtime":1619794557102,"results":"322","hashOfConfig":"245"},{"size":4504,"mtime":1620152313201,"results":"323","hashOfConfig":"245"},{"size":706,"mtime":1619078910000,"results":"324","hashOfConfig":"245"},{"size":1787,"mtime":1619160663840,"results":"325","hashOfConfig":"245"},{"size":599,"mtime":1619660318869,"results":"326","hashOfConfig":"245"},{"size":2070,"mtime":1617256294000,"results":"327","hashOfConfig":"245"},{"size":2209,"mtime":1619078910000,"results":"328","hashOfConfig":"245"},{"size":1866,"mtime":1619078910000,"results":"329","hashOfConfig":"245"},{"size":1693,"mtime":1619681217151,"results":"330","hashOfConfig":"245"},{"size":1274,"mtime":1619156634302,"results":"331","hashOfConfig":"245"},{"size":986,"mtime":1620188130866,"results":"332","hashOfConfig":"245"},{"size":1532,"mtime":1619662068019,"results":"333","hashOfConfig":"245"},{"size":3051,"mtime":1619646884001,"results":"334","hashOfConfig":"245"},{"size":1734,"mtime":1619004536000,"results":"335","hashOfConfig":"245"},{"size":1093,"mtime":1619004536000,"results":"336","hashOfConfig":"245"},{"size":1297,"mtime":1619004536000,"results":"337","hashOfConfig":"245"},{"size":286,"mtime":1619004536000,"results":"338","hashOfConfig":"245"},{"size":1010,"mtime":1619156634332,"results":"339","hashOfConfig":"245"},{"size":642,"mtime":1619004536000,"results":"340","hashOfConfig":"245"},{"size":2175,"mtime":1619693803063,"results":"341","hashOfConfig":"245"},{"size":2456,"mtime":1617256294000,"results":"342","hashOfConfig":"245"},{"size":1999,"mtime":1623741159743,"results":"343","hashOfConfig":"245"},{"size":4513,"mtime":1618125613672,"results":"344","hashOfConfig":"245"},{"size":521,"mtime":1619078910000,"results":"345","hashOfConfig":"245"},{"size":1654,"mtime":1619078910000,"results":"346","hashOfConfig":"245"},{"size":2469,"mtime":1619681344508,"results":"347","hashOfConfig":"245"},{"size":444,"mtime":1618830103212,"results":"348","hashOfConfig":"245"},{"size":1659,"mtime":1619167823658,"results":"349","hashOfConfig":"245"},{"size":4223,"mtime":1619659472343,"results":"350","hashOfConfig":"245"},{"size":2732,"mtime":1619619884229,"results":"351","hashOfConfig":"245"},{"size":7239,"mtime":1620177172587,"results":"352","hashOfConfig":"245"},{"size":2534,"mtime":1619004536000,"results":"353","hashOfConfig":"245"},{"size":1581,"mtime":1619004536000,"results":"354","hashOfConfig":"245"},{"size":5471,"mtime":1619690519223,"results":"355","hashOfConfig":"245"},{"size":4961,"mtime":1619662131269,"results":"356","hashOfConfig":"245"},{"size":2970,"mtime":1618830103215,"results":"357","hashOfConfig":"245"},{"size":248,"mtime":1619690345321,"results":"358","hashOfConfig":"245"},{"size":2497,"mtime":1619794585526,"results":"359","hashOfConfig":"245"},{"size":527,"mtime":1617256294000,"results":"360","hashOfConfig":"245"},{"size":4290,"mtime":1619794611589,"results":"361","hashOfConfig":"245"},{"size":1069,"mtime":1619401321557,"results":"362","hashOfConfig":"245"},{"size":695,"mtime":1619004536000,"results":"363","hashOfConfig":"245"},{"size":898,"mtime":1619004536000,"results":"364","hashOfConfig":"245"},{"size":3244,"mtime":1619401855446,"results":"365","hashOfConfig":"245"},{"size":4157,"mtime":1619401670589,"results":"366","hashOfConfig":"245"},{"size":2843,"mtime":1619401786569,"results":"367","hashOfConfig":"245"},{"size":3763,"mtime":1619619912744,"results":"368","hashOfConfig":"245"},{"size":4598,"mtime":1618151892000,"results":"369","hashOfConfig":"245"},{"size":1287,"mtime":1618124627000,"results":"370","hashOfConfig":"245"},{"size":2158,"mtime":1618151946000,"results":"371","hashOfConfig":"245"},{"size":3151,"mtime":1619156441687,"results":"372","hashOfConfig":"245"},{"size":11127,"mtime":1623740587939,"results":"373","hashOfConfig":"245"},{"size":2830,"mtime":1619160618113,"results":"374","hashOfConfig":"245"},{"size":3456,"mtime":1619160571822,"results":"375","hashOfConfig":"245"},{"size":4266,"mtime":1619661452483,"results":"376","hashOfConfig":"245"},{"size":769,"mtime":1619146918578,"results":"377","hashOfConfig":"245"},{"size":422,"mtime":1619153052758,"results":"378","hashOfConfig":"245"},{"size":942,"mtime":1620242718082,"results":"379","hashOfConfig":"245"},{"size":219,"mtime":1619004536000,"results":"380","hashOfConfig":"245"},{"size":282,"mtime":1619004536000,"results":"381","hashOfConfig":"245"},{"size":1921,"mtime":1619004536000,"results":"382","hashOfConfig":"245"},{"size":4385,"mtime":1619168169766,"results":"383","hashOfConfig":"245"},{"size":2322,"mtime":1619004536000,"results":"384","hashOfConfig":"245"},{"size":939,"mtime":1617256294000,"results":"385","hashOfConfig":"245"},{"size":605,"mtime":1619078910000,"results":"386","hashOfConfig":"245"},{"size":1987,"mtime":1618864035847,"results":"387","hashOfConfig":"245"},{"size":2093,"mtime":1618863671404,"results":"388","hashOfConfig":"245"},{"size":25470,"mtime":1620242751465,"results":"389","hashOfConfig":"245"},{"size":622,"mtime":1619004536000,"results":"390","hashOfConfig":"245"},{"size":247,"mtime":1619004536000,"results":"391","hashOfConfig":"245"},{"size":1067,"mtime":1619073507773,"results":"392","hashOfConfig":"245"},{"size":1622,"mtime":1619078910000,"results":"393","hashOfConfig":"245"},{"size":1391,"mtime":1619078910000,"results":"394","hashOfConfig":"245"},{"size":2872,"mtime":1620177697578,"results":"395","hashOfConfig":"245"},{"size":1376,"mtime":1619147530448,"results":"396","hashOfConfig":"245"},{"size":2024,"mtime":1619681746459,"results":"397","hashOfConfig":"245"},{"size":4507,"mtime":1619619468419,"results":"398","hashOfConfig":"245"},{"size":419,"mtime":1619078910000,"results":"399","hashOfConfig":"245"},{"size":52,"mtime":1617256294000,"results":"400","hashOfConfig":"245"},{"size":1293,"mtime":1617256294000,"results":"401","hashOfConfig":"245"},{"size":1578,"mtime":1618919779651,"results":"402","hashOfConfig":"245"},{"size":573,"mtime":1617256294000,"results":"403","hashOfConfig":"245"},{"size":3068,"mtime":1618919869427,"results":"404","hashOfConfig":"245"},{"size":785,"mtime":1617256294000,"results":"405","hashOfConfig":"245"},{"size":1983,"mtime":1618919546943,"results":"406","hashOfConfig":"245"},{"size":1957,"mtime":1618124627000,"results":"407","hashOfConfig":"245"},{"size":1850,"mtime":1618830832116,"results":"408","hashOfConfig":"245"},{"size":992,"mtime":1617256294000,"results":"409","hashOfConfig":"245"},{"size":902,"mtime":1617256294000,"results":"410","hashOfConfig":"245"},{"size":18686,"mtime":1618920861395,"results":"411","hashOfConfig":"245"},{"size":3632,"mtime":1618833859848,"results":"412","hashOfConfig":"245"},{"size":2022,"mtime":1618919779652,"results":"413","hashOfConfig":"245"},{"size":2775,"mtime":1618919546963,"results":"414","hashOfConfig":"245"},{"size":1237,"mtime":1617256294000,"results":"415","hashOfConfig":"245"},{"size":3667,"mtime":1618919438522,"results":"416","hashOfConfig":"245"},{"size":2960,"mtime":1619078910000,"results":"417","hashOfConfig":"245"},{"size":2477,"mtime":1619399395622,"results":"418","hashOfConfig":"245"},{"size":39,"mtime":1617256294000,"results":"419","hashOfConfig":"245"},{"size":41,"mtime":1617256294000,"results":"420","hashOfConfig":"245"},{"size":3790,"mtime":1619711441711,"results":"421","hashOfConfig":"245"},{"size":1758,"mtime":1619794499522,"results":"422","hashOfConfig":"245"},{"size":5491,"mtime":1619680987612,"results":"423","hashOfConfig":"245"},{"size":185,"mtime":1618124627000,"results":"424","hashOfConfig":"245"},{"size":1142,"mtime":1619078910000,"results":"425","hashOfConfig":"245"},{"size":1164,"mtime":1618830807799,"results":"426","hashOfConfig":"245"},{"size":2347,"mtime":1618830807799,"results":"427","hashOfConfig":"245"},{"size":2555,"mtime":1619156634352,"results":"428","hashOfConfig":"245"},{"size":3627,"mtime":1619156441702,"results":"429","hashOfConfig":"245"},{"size":2198,"mtime":1619156197363,"results":"430","hashOfConfig":"245"},{"size":9031,"mtime":1619156456352,"results":"431","hashOfConfig":"245"},{"size":764,"mtime":1617256294000,"results":"432","hashOfConfig":"245"},{"size":185,"mtime":1617256294000,"results":"433","hashOfConfig":"245"},{"size":778,"mtime":1619147530377,"results":"434","hashOfConfig":"245"},{"size":6990,"mtime":1623022312075,"results":"435","hashOfConfig":"245"},{"size":1645,"mtime":1619645325211,"results":"436","hashOfConfig":"245"},{"size":848,"mtime":1619147694545,"results":"437","hashOfConfig":"245"},{"size":2264,"mtime":1619661819400,"results":"438","hashOfConfig":"245"},{"size":282,"mtime":1617256294000,"results":"439","hashOfConfig":"245"},{"size":205,"mtime":1617256294000,"results":"440","hashOfConfig":"245"},{"size":911,"mtime":1619156634310,"results":"441","hashOfConfig":"245"},{"size":1274,"mtime":1619156176398,"results":"442","hashOfConfig":"245"},{"size":835,"mtime":1618124627000,"results":"443","hashOfConfig":"245"},{"size":694,"mtime":1618631743579,"results":"444","hashOfConfig":"245"},{"size":741,"mtime":1618830807799,"results":"445","hashOfConfig":"245"},{"size":3790,"mtime":1618927092718,"results":"446","hashOfConfig":"245"},{"size":3213,"mtime":1618631743595,"results":"447","hashOfConfig":"245"},{"size":885,"mtime":1618631743595,"results":"448","hashOfConfig":"245"},{"size":359,"mtime":1618631743595,"results":"449","hashOfConfig":"245"},{"size":1922,"mtime":1618921205830,"results":"450","hashOfConfig":"245"},{"size":2063,"mtime":1619156441564,"results":"451","hashOfConfig":"245"},{"size":1010,"mtime":1619156634345,"results":"452","hashOfConfig":"245"},{"size":919,"mtime":1619156176406,"results":"453","hashOfConfig":"245"},{"size":1494,"mtime":1619681186891,"results":"454","hashOfConfig":"245"},{"size":5672,"mtime":1619688721695,"results":"455","hashOfConfig":"245"},{"size":3243,"mtime":1623022383177,"results":"456","hashOfConfig":"245"},{"size":1342,"mtime":1618845896658,"results":"457","hashOfConfig":"245"},{"size":2158,"mtime":1617279740000,"results":"458","hashOfConfig":"245"},{"size":76,"mtime":1617256294000,"results":"459","hashOfConfig":"245"},{"size":35,"mtime":1617256294000,"results":"460","hashOfConfig":"245"},{"size":1097,"mtime":1617256294000,"results":"461","hashOfConfig":"245"},{"size":4594,"mtime":1623022251712,"results":"462","hashOfConfig":"245"},{"size":652,"mtime":1618124627000,"results":"463","hashOfConfig":"245"},{"size":1976,"mtime":1617256294000,"results":"464","hashOfConfig":"245"},{"size":2182,"mtime":1618845896675,"results":"465","hashOfConfig":"245"},{"size":1120,"mtime":1617256294000,"results":"466","hashOfConfig":"245"},{"size":686,"mtime":1617256294000,"results":"467","hashOfConfig":"245"},{"size":34,"mtime":1617256294000,"results":"468","hashOfConfig":"245"},{"size":43,"mtime":1617256294000,"results":"469","hashOfConfig":"245"},{"size":2243,"mtime":1618835806503,"results":"470","hashOfConfig":"245"},{"size":1337,"mtime":1617299886000,"results":"471","hashOfConfig":"245"},{"size":1197,"mtime":1617256294000,"results":"472","hashOfConfig":"245"},{"size":3545,"mtime":1623021373616,"results":"473","hashOfConfig":"245"},{"size":2234,"mtime":1623021278198,"results":"474","hashOfConfig":"245"},{"size":1947,"mtime":1618134238216,"results":"475","hashOfConfig":"245"},{"size":1957,"mtime":1617256294000,"results":"476","hashOfConfig":"245"},{"size":460,"mtime":1617256294000,"results":"477","hashOfConfig":"245"},{"size":3822,"mtime":1618631743126,"results":"478","hashOfConfig":"245"},{"size":2112,"mtime":1618856359600,"results":"479","hashOfConfig":"245"},{"size":353,"mtime":1617256294000,"results":"480","hashOfConfig":"245"},{"size":835,"mtime":1618120287921,"results":"481","hashOfConfig":"245"},{"size":652,"mtime":1617256294000,"results":"482","hashOfConfig":"245"},{"size":740,"mtime":1617256294000,"results":"483","hashOfConfig":"245"},{"size":2819,"mtime":1618923328287,"results":"484","hashOfConfig":"245"},{"size":2480,"mtime":1618856359600,"results":"485","hashOfConfig":"245"},{"size":4662,"mtime":1618856359600,"results":"486","hashOfConfig":"245"},{"size":1577,"mtime":1618631743110,"results":"487","hashOfConfig":"245"},{"filePath":"488","messages":"489","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},"1bz5k8",{"filePath":"491","messages":"492","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"493","usedDeprecatedRules":"490"},{"filePath":"494","messages":"495","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"496","usedDeprecatedRules":"490"},{"filePath":"497","messages":"498","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"499","messages":"500","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"501","messages":"502","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"503","messages":"504","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"505","usedDeprecatedRules":"490"},{"filePath":"506","messages":"507","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"508","messages":"509","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"510","messages":"511","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"512","messages":"513","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"514","messages":"515","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"516","messages":"517","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"518","messages":"519","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"520","messages":"521","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"522","messages":"523","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"524","messages":"525","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"526","messages":"527","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"528","messages":"529","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"530","messages":"531","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"532","usedDeprecatedRules":"490"},{"filePath":"533","messages":"534","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"535","usedDeprecatedRules":"490"},{"filePath":"536","messages":"537","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"538","messages":"539","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"540","messages":"541","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"542","messages":"543","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"544","usedDeprecatedRules":"490"},{"filePath":"545","messages":"546","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"547","messages":"548","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"549","messages":"550","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"551","messages":"552","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"553","messages":"554","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"555","messages":"556","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"557","usedDeprecatedRules":"490"},{"filePath":"558","messages":"559","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"560","usedDeprecatedRules":"490"},{"filePath":"561","messages":"562","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"563","usedDeprecatedRules":"490"},{"filePath":"564","messages":"565","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"566","messages":"567","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"568","messages":"569","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"570","usedDeprecatedRules":"490"},{"filePath":"571","messages":"572","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"573","usedDeprecatedRules":"490"},{"filePath":"574","messages":"575","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"576","usedDeprecatedRules":"490"},{"filePath":"577","messages":"578","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"579","usedDeprecatedRules":"490"},{"filePath":"580","messages":"581","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"582","messages":"583","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"584","usedDeprecatedRules":"490"},{"filePath":"585","messages":"586","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"587","messages":"588","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"589","messages":"590","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"591","messages":"592","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"593","messages":"594","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"595","usedDeprecatedRules":"490"},{"filePath":"596","messages":"597","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"598","messages":"599","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"600","messages":"601","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"602","messages":"603","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"604","messages":"605","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"606","messages":"607","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"608","messages":"609","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"610","messages":"611","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"612","messages":"613","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"614","messages":"615","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"616","messages":"617","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"618","messages":"619","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"620","messages":"621","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"622","messages":"623","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"624","messages":"625","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"626","messages":"627","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"628","messages":"629","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"630","messages":"631","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"632","messages":"633","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"634","messages":"635","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"636","messages":"637","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"638","messages":"639","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"640","messages":"641","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"642","usedDeprecatedRules":"490"},{"filePath":"643","messages":"644","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"645","messages":"646","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"647","messages":"648","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"649","messages":"650","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"651","usedDeprecatedRules":"490"},{"filePath":"652","messages":"653","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"654","messages":"655","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"656","messages":"657","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"658","messages":"659","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"660","messages":"661","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"662","usedDeprecatedRules":"490"},{"filePath":"663","messages":"664","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"665","messages":"666","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"667","messages":"668","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"669","messages":"670","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"671","messages":"672","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"673","messages":"674","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"675","messages":"676","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"677","messages":"678","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"679","usedDeprecatedRules":"490"},{"filePath":"680","messages":"681","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"682","messages":"683","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"684","usedDeprecatedRules":"490"},{"filePath":"685","messages":"686","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"687","messages":"688","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"689","usedDeprecatedRules":"490"},{"filePath":"690","messages":"691","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"692","messages":"693","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"694","messages":"695","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"696","messages":"697","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"698","messages":"699","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"700","messages":"701","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"702","messages":"703","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"704","usedDeprecatedRules":"490"},{"filePath":"705","messages":"706","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"707","messages":"708","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"709","messages":"710","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"711","messages":"712","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"713","messages":"714","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"715","messages":"716","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"717","messages":"718","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"719","messages":"720","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"721","messages":"722","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"723","messages":"724","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"725","usedDeprecatedRules":"490"},{"filePath":"726","messages":"727","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"728","usedDeprecatedRules":"490"},{"filePath":"729","messages":"730","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"731","messages":"732","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"733","messages":"734","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"735","usedDeprecatedRules":"490"},{"filePath":"736","messages":"737","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"738","usedDeprecatedRules":"490"},{"filePath":"739","messages":"740","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"741","messages":"742","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"743","messages":"744","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"745","usedDeprecatedRules":"490"},{"filePath":"746","messages":"747","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"748","messages":"749","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"750","usedDeprecatedRules":"490"},{"filePath":"751","messages":"752","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"753","messages":"754","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"755","messages":"756","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"757","messages":"758","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"759","usedDeprecatedRules":"490"},{"filePath":"760","messages":"761","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"762","usedDeprecatedRules":"490"},{"filePath":"763","messages":"764","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"765","usedDeprecatedRules":"490"},{"filePath":"766","messages":"767","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"768","usedDeprecatedRules":"490"},{"filePath":"769","messages":"770","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"771","messages":"772","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"773","usedDeprecatedRules":"490"},{"filePath":"774","messages":"775","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"776","messages":"777","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"778","usedDeprecatedRules":"490"},{"filePath":"779","messages":"780","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"781","messages":"782","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"783","messages":"784","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"785","messages":"786","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"787","usedDeprecatedRules":"490"},{"filePath":"788","messages":"789","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"790","messages":"791","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"792","messages":"793","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"794","messages":"795","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"796","messages":"797","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"798","messages":"799","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"800","messages":"801","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"802","messages":"803","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"804","messages":"805","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"806","messages":"807","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"808","messages":"809","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"810","messages":"811","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"812","messages":"813","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"814","messages":"815","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"816","messages":"817","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"818","messages":"819","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"820","messages":"821","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"822"},{"filePath":"823","messages":"824","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"825","messages":"826","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"827","messages":"828","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"829","messages":"830","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"831","messages":"832","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"833","usedDeprecatedRules":"490"},{"filePath":"834","messages":"835","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"836","messages":"837","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"838","messages":"839","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"840","messages":"841","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"842","messages":"843","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"844","messages":"845","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"846","messages":"847","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"848","messages":"849","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"850","messages":"851","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"852","messages":"853","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"854","messages":"855","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"856","messages":"857","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"858","messages":"859","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"860","messages":"861","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"862","messages":"863","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"864","messages":"865","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"866","messages":"867","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"868","messages":"869","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"870","messages":"871","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"872","messages":"873","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"874","messages":"875","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"876","messages":"877","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"878","messages":"879","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"880","messages":"881","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"882","usedDeprecatedRules":"490"},{"filePath":"883","messages":"884","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"885","usedDeprecatedRules":"490"},{"filePath":"886","messages":"887","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"888","messages":"889","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"890","messages":"891","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"892","usedDeprecatedRules":"490"},{"filePath":"893","messages":"894","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"895","messages":"896","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"897","messages":"898","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"899","usedDeprecatedRules":"490"},{"filePath":"900","messages":"901","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"902","messages":"903","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"904","usedDeprecatedRules":"490"},{"filePath":"905","messages":"906","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"907","messages":"908","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"909","messages":"910","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"911","messages":"912","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"913","usedDeprecatedRules":"490"},{"filePath":"914","messages":"915","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"916","usedDeprecatedRules":"490"},{"filePath":"917","messages":"918","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"919","messages":"920","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"921","messages":"922","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"923","messages":"924","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"925","messages":"926","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"927","messages":"928","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"822"},{"filePath":"929","messages":"930","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"931","messages":"932","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"933","messages":"934","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"935","usedDeprecatedRules":"490"},{"filePath":"936","messages":"937","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"938","messages":"939","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"940","messages":"941","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"942","messages":"943","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"944","messages":"945","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"946","messages":"947","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"948","messages":"949","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"950","messages":"951","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"952","messages":"953","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"954","messages":"955","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"956","usedDeprecatedRules":"490"},{"filePath":"957","messages":"958","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"959","usedDeprecatedRules":"490"},{"filePath":"960","messages":"961","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"962","usedDeprecatedRules":"490"},{"filePath":"963","messages":"964","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"965","messages":"966","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"967","messages":"968","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"969","messages":"970","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"971","messages":"972","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"973","usedDeprecatedRules":"490"},{"filePath":"974","messages":"975","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"976","usedDeprecatedRules":"490"},{"filePath":"977","messages":"978","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"979","messages":"980","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"981","messages":"982","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"983","messages":"984","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"985","messages":"986","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"987","messages":"988","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"989","messages":"990","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"991","messages":"992","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"993","usedDeprecatedRules":"490"},{"filePath":"994","messages":"995","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"996","usedDeprecatedRules":"490"},{"filePath":"997","messages":"998","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"999","usedDeprecatedRules":"490"},{"filePath":"1000","messages":"1001","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"1002","messages":"1003","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"1004","messages":"1005","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"1006","messages":"1007","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"1008","messages":"1009","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"1010","messages":"1011","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"1012","messages":"1013","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"1014","messages":"1015","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"1016","messages":"1017","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"976","usedDeprecatedRules":"490"},{"filePath":"1018","messages":"1019","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1020","usedDeprecatedRules":"490"},{"filePath":"1021","messages":"1022","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"1023","messages":"1024","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},{"filePath":"1025","messages":"1026","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1027","usedDeprecatedRules":"490"},{"filePath":"1028","messages":"1029","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"490"},"D:\\task159\\frontend\\src\\index.tsx",[],["1030","1031","1032","1033","1034"],"D:\\task159\\frontend\\src\\Providers.tsx",["1035"],"import React from 'react'\nimport { ModalProvider } from 'dfswap-ui'\n// import bsc, { UseWalletProvider } from '@binance-chain/bsc-use-wallet'\nimport * as bsc from '@binance-chain/bsc-use-wallet'\nimport { Provider } from 'react-redux'\nimport getRpcUrl from 'utils/getRpcUrl'\nimport { LanguageContextProvider } from 'contexts/Localisation/languageContext'\nimport { ThemeContextProvider } from 'contexts/ThemeContext'\nimport { BlockContextProvider } from 'contexts/BlockContext'\nimport { RefreshContextProvider } from 'contexts/RefreshContext'\nimport store from 'state'\n\nconst Providers: React.FC = ({ children }) => {\n   console.log(store)\n  const rpcUrl = getRpcUrl()\n  const chainId = parseInt(process.env.REACT_APP_CHAIN_ID);\n  return (\n    <Provider store={store}>\n      <ThemeContextProvider>\n        <LanguageContextProvider>\n          <bsc.UseWalletProvider\n            chainId={chainId}\n            connectors={{\n              walletconnect: { rpcUrl },\n              bsc,\n            }}\n          >\n            <BlockContextProvider>\n              <RefreshContextProvider>\n                <ModalProvider>{children}</ModalProvider>\n              </RefreshContextProvider>\n            </BlockContextProvider>\n          </bsc.UseWalletProvider>\n        </LanguageContextProvider>\n      </ThemeContextProvider>\n    </Provider>\n  )\n}\n\nexport default Providers\n","D:\\task159\\frontend\\src\\App.tsx",["1036"],"import React, { useEffect, Suspense, lazy } from 'react'\nimport styled from 'styled-components'\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { ResetCSS } from 'dfswap-ui'\nimport BigNumber from 'bignumber.js'\nimport { useFetchPriceList, useFetchProfile, useFetchPublicData } from 'state/hooks'\nimport GlobalStyle from './style/Global'\nimport Menu from './components/Menu'\nimport PageLoader from './components/PageLoader'\n// eslint-disable-next-line import/no-duplicates\n// Route-based code splitting\n// Only pool is included in the main bundle because of it's the most visited page'\nconst Home = lazy(() => import('./views/Home'))\nconst Farms = lazy(() => import('./views/Farms'))\n\nconst Home3 = lazy(() => import('./views/Layer/Home'))\nconst Farms3 = lazy(() => import('./views/Layer/Farms'))\n\nconst Lottery = lazy(() => import('./views/Lottery'))\nconst Pools = lazy(() => import('./views/Pools'))\nconst Ifos = lazy(() => import('./views/Ifos'))\nconst NotFound = lazy(() => import('./views/NotFound'))\nconst Nft = lazy(() => import('./views/Nft'))\nconst Gaming = lazy(() => import('./views/Gaming'))\n// const Layered = lazy(() => import('./views/Layered'))\nconst Roadmap = lazy(() => import('./views/Roadmap'))\nconst Whitepaper = lazy(() => import('./views/Whitepaper'))\nconst Profile = lazy(() => import('./views/Profile'))\n\n// This config is required for number formating\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nconst App: React.FC = () => {\n  const { account, connect } = useWallet()\n  useEffect(() => {\n    if (!account && window.localStorage.getItem('accountStatus')) {\n      connect('injected')\n    }\n  }, [account, connect])\n\n  useFetchPublicData()\n  useFetchPublicData()\n  useFetchProfile()\n  useFetchPriceList()\n\n  return (\n    <Router>\n      <ResetCSS />\n      <GlobalStyle />\n      <Menu>\n        <Suspense fallback={<PageLoader />}>\n          <Switch>\n            <Route path=\"/\" exact>\n              <Home />\n            </Route>\n            <Route path=\"/farms\">\n              <Farms />\n            </Route>\n            <Route path=\"/pools\">\n              <Farms tokenMode />\n            </Route>\n            <Route path=\"/layer/info\" exact>\n              <Home3 />\n            </Route>\n            <Route path=\"/layer/farms\">\n              <Farms3 />\n            </Route>\n            <Route path=\"/layer/pools\">\n              <Farms3 tokenMode />\n            </Route>\n            <Route path=\"/bnbpool\">\n             <Pools />\n            </Route>\n            <Route path=\"/Gaming\">\n              <Gaming />\n            </Route>\n            <Route path=\"/Whitepaper\">\n              <Whitepaper />\n            </Route>\n            <Route path=\"/lottery\">\n              <Lottery />\n            </Route>\n            <Route path=\"/profile\">\n              <Profile />\n            </Route>\n            {/* <Route path=\"/Layered\">\n              <Layered />\n            </Route> */}\n            <Route path=\"/ifo\">\n             <Ifos />\n            </Route>\n            {/* <Route path=\"/nft\"> */}\n            {/*  <Nft /> */}\n            {/* </Route> */}\n            {/* Redirect */}\n            {/* <Route path=\"/staking\"> */}\n            {/*  <Redirect to=\"/pools\" /> */}\n            {/* </Route> */}\n            <Route path=\"/Nft\">\n              <Nft />\n            </Route>\n            <Route path=\"/Roadmap\">\n              <Roadmap />\n            </Route>\n            <Route path=\"/syrup\">\n              <Redirect to=\"/pools\" />\n            </Route>\n            <Route path=\"/nests\">\n              <Redirect to=\"/pools\" />\n            </Route>\n            {/* 404 */}\n            <Route component={NotFound} />\n          </Switch>\n        </Suspense>\n      </Menu>\n    </Router>\n  )\n}\n\nexport default React.memo(App)\n","D:\\task159\\frontend\\src\\components\\PageLoader.tsx",[],"D:\\task159\\frontend\\src\\style\\Global.tsx",[],"D:\\task159\\frontend\\src\\views\\NotFound.tsx",[],"D:\\task159\\frontend\\src\\state\\hooks.ts",["1037","1038"],"import { kebabCase } from 'lodash'\nimport BigNumber from 'bignumber.js'\nimport { getAddress } from 'utils/addressHelpers'\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useRef, useMemo } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport useRefresh from 'hooks/useRefresh'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useAppDispatch } from 'state'\nimport { Toast, toastTypes } from 'dfswap-ui'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport {\n  fetchFarmsPublicDataAsync, fetchPoolsPublicDataAsync, fetchPoolsUserDataAsync, fetchFarms3PublicDataAsync,\n  push as pushToast,\n  remove as removeToast,\n  clear as clearToast\n} from './actions'\nimport { State, PriceState, ProfileState, Farm, Pool, Farm3, AchievementState, TeamsState } from './types'\nimport { QuoteToken } from '../config/constants/types'\nimport { fetchAchievements } from './achievements'\nimport Nfts from '../config/constants/nfts'\nimport { fetchWalletNfts } from './collectibles'\nimport { fetchTeams } from './teams'\nimport { fetchProfile } from './profile'\nimport { fetchPrices } from './prices'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nconst ZERO = new BigNumber(0)\n\nexport const useFetchPublicData = () => {\n  const dispatch = useDispatch()\n  const { slowRefresh } = useRefresh()\n  useEffect(() => {\n    dispatch(fetchFarmsPublicDataAsync())\n    dispatch(fetchPoolsPublicDataAsync())\n    dispatch(fetchFarms3PublicDataAsync())\n  }, [dispatch, slowRefresh])\n}\n\n// Farms\n\nexport const useFarms = (): Farm[] => {\n  const farms = useSelector((state: State) => state.farms.data)\n  return farms\n}\n\nexport const useFarmFromPid = (pid): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\n  return farm\n}\n\nexport const useFarmFromSymbol = (lpSymbol: string): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\n  return farm\n}\n\nexport const useFarmUser = (pid) => {\n  const farm = useFarmFromPid(pid)\n\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0),\n  }\n}\n\n// Farms3\n\nexport const useFarms3 = (): Farm3[] => {\n  const farms3 = useSelector((state: State) => state.farms3.data)\n  return farms3\n}\n\nexport const useFarm3FromPid = (pid): Farm3 => {\n  const farm3 = useSelector((state: State) => state.farms3.data.find((f) => f.pid === pid))\n  return farm3\n}\n\nexport const useFarm3FromSymbol = (lpSymbol: string): Farm3 => {\n  const farm3 = useSelector((state: State) => state.farms3.data.find((f) => f.lpSymbol === lpSymbol))\n  return farm3\n}\n\nexport const useFarm3User = (pid) => {\n  const farm3 = useFarm3FromPid(pid)\n\n  return {\n    allowance: farm3.userData ? new BigNumber(farm3.userData.allowance) : new BigNumber(0),\n    tokenBalance: farm3.userData ? new BigNumber(farm3.userData.tokenBalance) : new BigNumber(0),\n    stakedBalance: farm3.userData ? new BigNumber(farm3.userData.stakedBalance) : new BigNumber(0),\n    earnings: farm3.userData ? new BigNumber(farm3.userData.earnings) : new BigNumber(0),\n  }\n}\n// Pools\n\nexport const usePools = (account: string): Pool[] => {\n  const { fastRefresh } = useRefresh()\n  const dispatch = useDispatch()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchPoolsUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  return useSelector((state: State) => state.pools.data)\n}\n\nexport const usePoolFromPid = (sousId: number): Pool =>\n  useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\n\n// Prices\n\nexport const usePriceBnbBusd = (): BigNumber => {\n  const pid = 3 // BUSD-BNB LP\n  const farm = useFarmFromPid(pid)\n  return farm?.tokenPriceVsQuote ? new BigNumber(farm?.tokenPriceVsQuote) : ZERO\n}\n\nexport const usePriceCakeBusd = (): BigNumber => {\n  // const pid = 1 // CAKE-BNB LP\n  // const bnbPriceUSD = usePriceBnbBusd()\n  // const farm = useFarmFromPid(pid)\n  // return farm.tokenPriceVsQuote ? bnbPriceUSD.times(farm.tokenPriceVsQuote) : ZERO\n  const pid = 0; // EGG-BUSD LP\n  const farm = useFarmFromPid(pid);\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO;\n}\n\nexport const useTotalValue = (): BigNumber => {\n  const farms = useFarms();\n  const bnbPrice = usePriceBnbBusd();\n  const senzuPrice = usePrice3CakeBusd();\n  const cake2Price: BigNumber = useMemo(() => {\n    return new BigNumber(22)\n  }, [])\n  const cakePrice = usePriceCakeBusd();\n\n  const { account } = useWallet()\n  const pools = usePools(account)\n  const totalValue = useRef(new BigNumber(0))\n\n  useEffect(() => {\n    let farmsTotalValue = new BigNumber(0)\n    for (let i = 0; i < farms.length; i++) {\n      const farm = farms[i]\n      if (farm.lpTotalInQuoteToken) {\n        let val\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n          val = bnbPrice.times(farm.lpTotalInQuoteToken)\n        } else if (farm.quoteTokenSymbol === QuoteToken.SENZU) {\n          val = senzuPrice.times(farm.lpTotalInQuoteToken)\n        } else if (farm.quoteTokenSymbol === QuoteToken.CAKE2) {\n          val = cake2Price.times(farm.lpTotalInQuoteToken)\n        } else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n          val = cakePrice.times(farm.lpTotalInQuoteToken)\n        } else {\n          val = farm.lpTotalInQuoteToken\n        }\n        farmsTotalValue = farmsTotalValue.plus(val)\n      }\n    }\n\n    let poolsTotalValue = new BigNumber(0)\n    for (let i = 0; i < pools.length; i++) {\n      const pool = pools[i]\n      let poolValue: BigNumber\n      if (pool.stakingTokenName === QuoteToken.CAKE) {\n        const totalSaltStaked = new BigNumber(pool.totalStaked).div(new BigNumber(10).pow(18))\n        poolValue = cakePrice.times(totalSaltStaked)\n      }\n\n      poolsTotalValue = poolsTotalValue.plus(poolValue ?? ZERO)\n    }\n\n    totalValue.current = farmsTotalValue.plus(poolsTotalValue)\n  }, [bnbPrice, senzuPrice, farms, pools, cakePrice, cake2Price])\n\n  if (!totalValue) {\n    return new BigNumber(0)\n  }\n  return totalValue.current\n}\n\n\n// Prices3\n\nexport const usePrice3BnbBusd = (): BigNumber => {\n  const pid = 7 // BUSD-BNB LP\n  const farm = useFarm3FromPid(pid)\n  return farm?.tokenPriceVsQuote ? new BigNumber(farm?.tokenPriceVsQuote) : ZERO\n}\n\nexport const usePrice3CakeBusd = (): BigNumber => {\n  // const pid = 1 // CAKE-BNB LP\n  // const bnbPriceUSD = usePriceBnbBusd()\n  // const farm = useFarmFromPid(pid)\n  // return farm.tokenPriceVsQuote ? bnbPriceUSD.times(farm.tokenPriceVsQuote) : ZERO\n  const pid = 0; // EGG-BUSD LP\n  const farm = useFarm3FromPid(pid);\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO;\n}\n\nexport const useTotalValue3 = (): BigNumber => {\n  const farms = useFarms3();\n  const bnbPrice = usePrice3BnbBusd();\n  const cakePrice = usePrice3CakeBusd();\n\n  // console.log(\"bnbPrice\",bnbPrice)\n  // console.log(\"cakePrice\",cakePrice)\n\n  let value = new BigNumber(0);\n  for (let i = 0; i < farms.length; i++) {\n    const farm = farms[i]\n    if (farm.lpTotalInQuoteToken) {\n      let val;\n      if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n        val = (bnbPrice.times(farm.lpTotalInQuoteToken));\n      }else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n        val = (cakePrice.times(farm.lpTotalInQuoteToken));\n      }else{\n        val = (farm.lpTotalInQuoteToken);\n      }\n      value = value.plus(val);\n\n    }\n  }\n  return value;\n}\n\nexport const useProfile = () => {\n  const { isInitialized, isLoading, data, hasRegistered }: ProfileState = useSelector((state: State) => state.profile)\n  return { profile: data, hasProfile: isInitialized && hasRegistered, isInitialized, isLoading }\n}\n\n// Toasts\nexport const useToast = () => {\n  const dispatch = useAppDispatch()\n  const helpers = useMemo(() => {\n    const push = (toast: Toast) => dispatch(pushToast(toast))\n\n    return {\n      toastError: (title: string, description?: string) => {\n        return push({ id: kebabCase(title), type: toastTypes.DANGER, title, description })\n      },\n      toastInfo: (title: string, description?: string) => {\n        return push({ id: kebabCase(title), type: toastTypes.INFO, title, description })\n      },\n      toastSuccess: (title: string, description?: string) => {\n        return push({ id: kebabCase(title), type: toastTypes.SUCCESS, title, description })\n      },\n      toastWarning: (title: string, description?: string) => {\n        return push({ id: kebabCase(title), type: toastTypes.WARNING, title, description })\n      },\n      push,\n      remove: (id: string) => dispatch(removeToast(id)),\n      clear: () => dispatch(clearToast()),\n    }\n  }, [dispatch])\n\n  return helpers\n}\n\n// Block\nexport const useBlock = () => {\n  return useSelector((state: State) => state.block)\n}\n\nexport const useLpTokenPrice = (symbol: string) => {\n  const farm = useFarmFromSymbol(symbol)\n  const tokenPriceInUsd = useGetApiPrice(getAddress(farm.tokenAddresses))\n\n  return farm.lpTotalSupply && farm.lpTotalInQuoteToken\n    ? new BigNumber(getBalanceNumber(farm.lpTotalSupply)).div(farm.lpTotalInQuoteToken).times(tokenPriceInUsd).times(2)\n    : new BigNumber(0)\n}\nexport const useGetApiPrices = () => {\n  const prices: PriceState['data'] = useSelector((state: State) => state.prices)\n  return prices\n}\n\nexport const useGetApiPrice = (address: string) => {\n  const prices = useGetApiPrices()\n\n  if (!prices) {\n    return null\n  }\n\n  return prices[address.toLowerCase()]\n}\n\nexport const useAchievements = () => {\n  const achievements: AchievementState['data'] = useSelector((state: State) => state.achievements.data)\n  return achievements\n}\n// Achievements\n\nexport const useFetchAchievements = () => {\n  // const { account } = useWeb3React()\n  const { account } = useWallet()\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchAchievements(account))\n    }\n  }, [account, dispatch])\n}\n\n// Collectibles\nexport const useGetCollectibles = () => {\n  \n  const { account } = useWallet()\n  const dispatch = useAppDispatch()\n  const { isInitialized, isLoading, data } = useSelector((state: State) => state.collectibles)\n  const identifiers = Object.keys(data)\n  useEffect(() => {\n    // Fetch nfts only if we have not done so already\n    if (!isInitialized) {\n      dispatch(fetchWalletNfts(account))\n    }\n  }, [isInitialized, account, dispatch])\n\n  return {\n    isInitialized,\n    isLoading,\n    tokenIds: data,\n    nftsInWallet: Nfts.filter((nft) => identifiers.includes(nft.identifier)),\n  }\n}\n\nexport const useTeams = () => {\n  const { isInitialized, isLoading, data }: TeamsState = useSelector((state: State) => state.teams)\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    dispatch(fetchTeams())\n  }, [dispatch])\n\n  return { teams: data, isInitialized, isLoading }\n}\n\nexport const useFetchProfile = () => {\n  // const { account } = useWeb3React()\n  const { account } = useWallet()\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    dispatch(fetchProfile(account))\n  }, [account, dispatch])\n}\n\nexport const useFetchPriceList = () => {\n  const { slowRefresh } = useRefresh()\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    dispatch(fetchPrices())\n  }, [dispatch, slowRefresh])\n}","D:\\task159\\frontend\\src\\views\\Farms\\index.ts",[],"D:\\task159\\frontend\\src\\views\\Home\\index.ts",[],"D:\\task159\\frontend\\src\\views\\Lottery\\index.ts",[],"D:\\task159\\frontend\\src\\views\\Nft\\index.ts",[],"D:\\task159\\frontend\\src\\views\\Pools\\index.ts",[],"D:\\task159\\frontend\\src\\views\\Roadmap\\index.ts",[],"D:\\task159\\frontend\\src\\views\\Whitepaper\\index.ts",[],"D:\\task159\\frontend\\src\\views\\Gaming\\index.ts",[],"D:\\task159\\frontend\\src\\views\\Layer\\Home\\index.ts",[],"D:\\task159\\frontend\\src\\utils\\getRpcUrl.ts",[],"D:\\task159\\frontend\\src\\views\\Layer\\Farms\\index.ts",[],"D:\\task159\\frontend\\src\\views\\Ifos\\index.tsx",[],"D:\\task159\\frontend\\src\\components\\Menu\\index.tsx",["1039"],"import React, { useContext } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { allLanguages } from 'config/localisation/languageCodes'\nimport { LanguageContext } from 'contexts/Localisation/languageContext'\nimport useTheme from 'hooks/useTheme'\nimport { usePriceCakeBusd, usePrice3CakeBusd, useProfile } from 'state/hooks'\nimport { Menu as UikitMenu } from 'dfswap-ui'\nimport config from './config'\n\nconst Menu = (props) => {\n  const { account, connect, reset } = useWallet()\n  const { selectedLanguage, setSelectedLanguage } = useContext(LanguageContext)\n  const { isDark, toggleTheme } = useTheme()\n  const cakePriceUsd = usePriceCakeBusd()\n  const cakePrice2Usd = usePrice3CakeBusd()\n\n  return (\n    <UikitMenu\n      account={account}\n      login={connect}\n      logout={reset}\n      isDark={isDark}\n      toggleTheme={toggleTheme}\n      currentLang={selectedLanguage && selectedLanguage.code}\n      langs={allLanguages}\n      setLang={setSelectedLanguage}\n      cakePriceUsd={cakePriceUsd.toNumber()}\n      cakePrice2Usd={cakePrice2Usd.toNumber()}\n      links={config}\n      priceLink=\"https://bscscan.com/token/0x618fe88e887f9fe3d7ca10e68db079e2024bd9bc\"\n      priceLink2=\"https://bscscan.com/token/0xcBA1813Ede683333020cedea7C3b63FbaC28e78e\"\n      {...props}\n    />\n  )\n}\n\nexport default Menu\n","D:\\task159\\frontend\\src\\views\\Profile\\index.tsx",["1040"],"import React from 'react'\nimport { Route } from 'react-router-dom'\nimport { useWeb3React } from '@web3-react/core'\nimport Page from 'components/layout/Page'\nimport PageLoader from 'components/PageLoader'\nimport { useFetchAchievements, useProfile } from 'state/hooks'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport ProfileCreation from './ProfileCreation'\nimport Header from './components/Header'\nimport TaskCenter from './TaskCenter'\nimport PublicProfile from './PublicProfile'\n\nconst Profile = () => {\n  const { isInitialized, isLoading, hasProfile } = useProfile()\n  const { account } = useWallet()\n\n  useFetchAchievements()\n\n  if (!isInitialized || isLoading) {\n    return <PageLoader />\n  }\n\n  if (account && !hasProfile) {\n    return (\n      <Page>\n        <ProfileCreation />\n      </Page>\n    )\n  }\n\n  return (\n    <Page>\n      <Header />\n      <Route exact path=\"/profile\">\n        <PublicProfile />\n      </Route>\n      <Route path=\"/profile/tasks\">\n        <TaskCenter />\n      </Route>\n    </Page>\n  )\n}\n\nexport default Profile\n","D:\\task159\\frontend\\src\\contexts\\BlockContext.tsx",[],"D:\\task159\\frontend\\src\\contexts\\RefreshContext.tsx",[],"D:\\task159\\frontend\\src\\contexts\\ThemeContext.tsx",[],"D:\\task159\\frontend\\src\\contexts\\Localisation\\languageContext.tsx",["1041"],"import React, { useState, useEffect } from 'react'\nimport { StringTranslations } from '@crowdin/crowdin-api-client'\nimport { TranslationsContext } from 'contexts/Localisation/translationsContext'\nimport { allLanguages, EN } from 'config/localisation/languageCodes'\n\nconst CACHE_KEY = 'pancakeSwapLanguage'\n\nexport interface LangType {\n  code: string\n  language: string\n}\n\nexport interface LanguageState {\n  selectedLanguage: LangType\n  setSelectedLanguage: (langObject: LangType) => void\n  translatedLanguage: LangType\n  setTranslatedLanguage: React.Dispatch<React.SetStateAction<LangType>>\n}\n\nconst LanguageContext = React.createContext({\n  selectedLanguage: EN,\n  setSelectedLanguage: () => undefined,\n  translatedLanguage: EN,\n  setTranslatedLanguage: () => undefined,\n} as LanguageState)\n\nconst fileId = 8\nconst projectId = parseInt(process.env.REACT_APP_CROWDIN_PROJECTID)\nconst stringTranslationsApi = new StringTranslations({\n  token: process.env.REACT_APP_CROWDIN_APIKEY,\n})\n\nconst fetchTranslationsForSelectedLanguage = (selectedLanguage) => {\n  return stringTranslationsApi.listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200)\n}\n\nconst LanguageContextProvider = ({ children }) => {\n  const [selectedLanguage, setSelectedLanguage] = useState<any>(EN)\n  const [translatedLanguage, setTranslatedLanguage] = useState<any>(EN)\n  const [translations, setTranslations] = useState<Array<any>>([])\n\n  const getStoredLang = (storedLangCode: string) => {\n    return allLanguages.filter((language) => {\n      return language.code === storedLangCode\n    })[0]\n  }\n\n  useEffect(() => {\n    const storedLangCode = localStorage.getItem(CACHE_KEY)\n    if (storedLangCode) {\n      const storedLang = getStoredLang(storedLangCode)\n      setSelectedLanguage(storedLang)\n    } else {\n      setSelectedLanguage(EN)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (selectedLanguage) {\n      // console.log(`import(\\`../../../public/i18n/${selectedLanguage.code}.json\\`)`);\n      fetch(`./i18n/${selectedLanguage.code}.json`)\n        .then(r=>r.json())\n      // fetchTranslationsForSelectedLanguage(selectedLanguage)\n        .then((translationApiResponse) => {\n          if (translationApiResponse.data.length < 1) {\n            setTranslations(['error'])\n          } else {\n            setTranslations(translationApiResponse.data)\n          }\n        })\n        .then(() => setTranslatedLanguage(selectedLanguage))\n        .catch((e) => {\n          console.error(\"ERROR\");\n          console.error(e);\n          setTranslations(['error'])\n        })\n    }\n  }, [selectedLanguage, setTranslations])\n\n  const handleLanguageSelect = (langObject: LangType) => {\n    setSelectedLanguage(langObject)\n    localStorage.setItem(CACHE_KEY, langObject.code)\n  }\n\n  return (\n    <LanguageContext.Provider\n      value={{ selectedLanguage, setSelectedLanguage: handleLanguageSelect, translatedLanguage, setTranslatedLanguage }}\n    >\n      <TranslationsContext.Provider value={{ translations, setTranslations }}>{children}</TranslationsContext.Provider>\n    </LanguageContext.Provider>\n  )\n}\n\nexport { LanguageContext, LanguageContextProvider }\n","D:\\task159\\frontend\\src\\components\\layout\\Page.tsx",[],"D:\\task159\\frontend\\src\\state\\index.ts",[],"D:\\task159\\frontend\\src\\state\\actions.ts",[],"D:\\task159\\frontend\\src\\config\\constants\\types.ts",[],"D:\\task159\\frontend\\src\\config\\constants\\nfts.ts",[],"D:\\task159\\frontend\\src\\views\\Home\\Home.tsx",["1042"],"import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout } from 'dfswap-ui'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport FarmStakingCard from './components/FarmStakingCard'\nimport CakeStats from './components/CakeStats'\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\nimport TwitterCard from './components/TwitterCard'\n\nconst Hero = styled.div`\n  align-items: center;\n  background-image: url('/images/egg/3.png');\n  background-repeat: no-repeat;\n  background-position: top center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 116px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-image: url('/images/egg/3.png'), url('/images/egg/3b.png');\n    background-position: left center, right center;\n    height: 165px;\n    padding-top: 0;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 48px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst Home: React.FC = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Page>\n      <Hero>\n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"secondary\">\n          DFSWAP Finance\n        </Heading>\n        <Text>The smart defi farm on Binance Smart Chain</Text>\n      </Hero>\n      <div>\n        <Cards>\n          <FarmStakingCard />\n          <TwitterCard/>\n          <CakeStats />\n          <TotalValueLockedCard />\n        </Cards>\n      </div>\n    </Page>\n  )\n}\n\nexport default Home\n","D:\\task159\\frontend\\src\\views\\Farms\\Farms.tsx",["1043","1044","1045","1046","1047","1048","1049"],"import React, { useEffect, useCallback, useState, useMemo } from 'react'\nimport { Route, useRouteMatch } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport { Image, Heading } from 'dfswap-ui'\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd, usePrice3CakeBusd } from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { QuoteToken } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport Divider from './components/Divider'\n\nexport interface FarmsProps{\n  tokenMode?: boolean\n}\n\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\n  const { path } = useRouteMatch()\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const senzuPrice = usePrice3CakeBusd()\n  const bnbPrice = usePriceBnbBusd()\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const {tokenMode} = farmsProps;\n\n  const dispatch = useDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const [stakedOnly, setStakedOnly] = useState(false)\n\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X')\n  // const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X')\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X')\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  // /!\\ This function will be removed soon\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\n  // to retrieve assets prices against USD\n  const farmsList = useCallback(\n    (farmsToDisplay, removed: boolean) => {\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n        //   return farm\n        // }\n        const cakeRewardPerBlock = new BigNumber(farm.dballPerBlock || 1).times(new BigNumber(farm.poolWeight)) .div(new BigNumber(10).pow(18))\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n\n        let apy = cakePrice.times(cakeRewardPerYear)\n\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0)\n    \n        const cake2Price = new BigNumber(22)\n        \n\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n          totalValue = totalValue.times(bnbPrice);\n        }\n        if (farm.quoteTokenSymbol === QuoteToken.SENZU) {\n          totalValue = totalValue.times(senzuPrice);\n        }\n        if (farm.quoteTokenSymbol === QuoteToken.CAKE2) {\n          totalValue = totalValue.times(cake2Price);\n        }\n\n        if(totalValue.comparedTo(0) > 0){\n          apy = apy.div(totalValue);\n        }\n\n        return { ...farm, apy }\n      })\n      return farmsToDisplayWithAPY.map((farm) => (\n        <FarmCard\n          key={farm.pid}\n          farm={farm}\n          removed={removed}\n          bnbPrice={bnbPrice}\n          cakePrice={cakePrice}\n          senzuPrice={senzuPrice}\n          ethereum={ethereum}\n          account={account}\n        />\n      ))\n    },\n    [cakePrice, bnbPrice, senzuPrice, ethereum, account],\n  )\n\n  return (\n    <Page>\n      <Heading as=\"h1\" size=\"lg\" color=\"primary\" mb=\"50px\" style={{ textAlign: 'center' }}>\n        {\n          tokenMode ?\n            'Stake tokens to earn DF'\n            :\n          'Stake LP tokens to earn DF'\n        }\n      </Heading>\n      <Heading as=\"h2\" color=\"secondary\" mb=\"50px\" style={{ textAlign: 'center' }}>\n       Deposit Fee will be used to buyback DF\n      </Heading>\n      <Heading as=\"h2\" color=\"secondary\" mb=\"50px\" style={{ textAlign: 'center' }}>\n        All Non Native Farms and Pools have 2% Unstaking Fee\n      </Heading>\n      {/* <FarmTabButtons stakedOnly={stakedOnly} setStakedOnly={setStakedOnly}/> */}\n      <div>\n        <Divider />\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {stakedOnly ? farmsList(stakedOnlyFarms, false) : farmsList(activeFarms, false)}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsList(inactiveFarms, true)}\n          </Route>\n        </FlexLayout>\n      </div>\n      {/* <Image src=\"/images/egg/8.png\" alt=\"illustration\" width={1352} height={587} responsive /> */}\n    </Page>\n  )\n}\n\nexport default Farms\n","D:\\task159\\frontend\\src\\views\\Lottery\\Lottery.tsx",["1050","1051","1052","1053","1054","1055","1056"],"import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout, Image } from 'dfswap-ui'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport FarmStakingCard from './components/FarmStakingCard'\nimport CakeStats from './components/CakeStats'\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\nimport TwitterCard from './components/TwitterCard'\n\nconst Hero = styled.div`\n  align-items: center;\n  background-image: ;\n  background-repeat: no-repeat;\n  background-position: top center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 116px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-image: ;\n    background-position: left center, right center;\n    height: 165px;\n    padding-top: 0;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 48px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst Home: React.FC = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Page>\n      <Hero>\n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"secondary\">\n          Coming Soon\n        </Heading>\n        <hr/>\n        <hr/>\n        <hr/>\n        <hr/>\n        <hr/>\n        <hr/>\n        <hr/>\n        <hr/>\n        <hr/>\n        <hr/>\n        <hr/>\n        <hr/>\n        <hr/>\n        <hr/>\n        <Image src=\"/images/egg/lottery.png\" alt=\"Lottery\" width={1352} height={600} responsive />\n      </Hero>\n    </Page>\n  )\n}\n\nexport default Home\n","D:\\task159\\frontend\\src\\components\\Menu\\config.ts",[],"D:\\task159\\frontend\\src\\views\\Pools\\Oceans.tsx",[],"D:\\task159\\frontend\\src\\views\\Nft\\Nft.tsx",["1057","1058","1059","1060","1061","1062","1063"],"import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout, Image } from 'dfswap-ui'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport FarmStakingCard from './components/FarmStakingCard'\nimport CakeStats from './components/CakeStats'\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\nimport TwitterCard from './components/TwitterCard'\n\nconst Hero = styled.div`\n  align-items: center;\n  background-image: ;\n  background-repeat: no-repeat;\n  background-position: top center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 116px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-image: ;\n    background-position: left center, right center;\n    height: 165px;\n    padding-top: 0;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 48px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst Home: React.FC = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Page>\n      <Hero>\n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"secondary\">\n          Coming Soon\n        </Heading>\n        <hr/>\n        <hr/>\n        <hr/>\n        <hr/>\n        <hr/>\n        <hr/>\n        <hr/>\n        <hr/>\n        <hr/>\n        <hr/>\n        <hr/>\n        <hr/>\n        <hr/>\n        <hr/>\n        <Image src=\"/images/egg/Nft.png\" alt=\"NFT\" width={1352} height={600} responsive />\n      </Hero>\n    </Page>\n  )\n}\n\nexport default Home\n","D:\\task159\\frontend\\src\\views\\Roadmap\\Roadmap.tsx",["1064","1065","1066","1067","1068","1069","1070","1071"],"import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout, Image} from 'dfswap-ui'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport FarmStakingCard from './components/FarmStakingCard'\nimport CakeStats from './components/CakeStats'\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\nimport TwitterCard from './components/TwitterCard'\n\nconst Hero = styled.div`\n  align-items: center;\n  background-image: ;\n  background-repeat: no-repeat;\n  background-position: top center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 116px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-image: ;\n    background-position: left center, right center;\n    height: 165px;\n    padding-top: 0;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 48px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst Home: React.FC = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Page>\n      <Hero>\n        <hr/>\n        <hr/>\n        <hr/>\n        <hr/>\n        <hr/>\n        <hr/>\n        <hr/>\n        <hr/>\n        <hr/>\n        <hr/>\n        <hr/>\n        <hr/>\n        <hr/>\n        <hr/>\n        <Image src=\"/images/egg/roadmap.png\" alt=\"Roadmap\" width={1352} height={600} responsive />\n      </Hero>\n    </Page>\n  )\n}\n\nexport default Home\n","D:\\task159\\frontend\\src\\views\\Gaming\\Gaming.tsx",["1072","1073","1074","1075","1076","1077","1078"],"import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout, Image} from 'dfswap-ui'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport FarmStakingCard from './components/FarmStakingCard'\nimport CakeStats from './components/CakeStats'\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\nimport TwitterCard from './components/TwitterCard'\n\nconst Hero = styled.div`\n  align-items: center;\n  background-image: ;\n  background-repeat: no-repeat;\n  background-position: top center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 116px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-image: ;\n    background-position: left center, right center;\n    height: 165px;\n    padding-top: 0;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 48px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst Home: React.FC = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Page>\n      <Hero>\n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"secondary\">\n          Coming Soon\n        </Heading>\n        <hr/>\n        <hr/>\n        <hr/>\n        <hr/>\n        <hr/>\n        <hr/>\n        <hr/>\n        <hr/>\n        <hr/>\n        <hr/>\n        <hr/>\n        <hr/>\n        <hr/>\n        <hr/>\n        <Image src=\"/images/egg/gaming.png\" alt=\"Gaming\" width={1352} height={600} responsive />\n      </Hero>\n    </Page>\n  )\n}\n\nexport default Home\n","D:\\task159\\frontend\\src\\views\\Whitepaper\\Whitepaper.tsx",["1079","1080","1081","1082","1083","1084","1085","1086"],"import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout } from 'dfswap-ui'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport FarmStakingCard from './components/FarmStakingCard'\nimport CakeStats from './components/CakeStats'\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\nimport TwitterCard from './components/TwitterCard'\n\nconst Hero = styled.div`\n  align-items: center;\n  background-image: ;\n  background-repeat: no-repeat;\n  background-position: top center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 116px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-image: ;\n    background-position: left center, right center;\n    height: ;\n    padding-top: 0;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 48px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst Home: React.FC = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Page>\n      <Hero>\n        <iframe title=\"Whitepaper\" src=\"https://drive.google.com/file/d/19gngLMvFfpxdfk6MB0scorASWpNz7VNa/preview\" width=\"1000\" height=\"550\" />\n      </Hero>\n    </Page>\n  )\n}\n\nexport default Home\n","D:\\task159\\frontend\\src\\views\\Layer\\Home\\Home.tsx",[],"D:\\task159\\frontend\\src\\views\\Layer\\Farms\\Farms.tsx",["1087"],"import React, { useEffect, useCallback, useState } from 'react'\nimport { Route, useRouteMatch } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport CardNav from 'components/CardNav'\nimport { Image, Heading, Text } from 'dfswap-ui'\nimport { BLOCKS_PER_YEAR } from 'config'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useFarms3, usePrice3BnbBusd, usePrice3CakeBusd } from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarm3UserDataAsync } from 'state/actions'\nimport { QuoteToken } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport Divider from './components/Divider'\n\nexport interface FarmsProps{\n  tokenMode?: boolean\n}\n\nconst Details = styled.div`\n  display: flex;\n  align-items: center; \n  justify-content: center;\n  \n`\n\nconst Hero = styled.div`\n  align-items: center;\n  color: ${({ theme }) => theme.colors.primary};\n  display: grid;\n  grid-gap: 32px;\n  grid-template-columns: 1fr;\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 250px;\n  padding: 48px 0;\n  ul {\n    margin: 0;\n    padding: 0;\n    list-style-type: none;\n    font-size: 16px;\n    li {\n      margin-bottom: 4px;\n    }\n  }\n  img {\n    height: auto;\n    max-width: 100%;\n  }\n  @media (min-width: 576px) {\n    grid-template-columns: 1fr 1fr;\n    margin: 0;\n    max-width: none;\n  }\n`\n\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\n  const { path } = useRouteMatch()\n  const TranslateString = useI18n()\n  const farmsLP = useFarms3()\n  const cakePrice = usePrice3CakeBusd()\n  const bnbPrice = usePrice3BnbBusd()\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const {tokenMode} = farmsProps;\n\n  const dispatch = useDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarm3UserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const [stakedOnly, setStakedOnly] = useState(false)\n\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X')\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X')\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  // /!\\ This function will be removed soon\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\n  // to retrieve assets prices against USD\n  const farmsList = useCallback(\n    (farmsToDisplay, removed: boolean) => {\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n        //   return farm\n        // }\n        const cakeRewardPerBlock = new BigNumber(farm.senzuPerBlock || 1).times(new BigNumber(farm.poolWeight)) .div(new BigNumber(10).pow(18))\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n\n        let apy = cakePrice.times(cakeRewardPerYear);\n\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0);\n\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n          totalValue = totalValue.times(bnbPrice);\n        }\n\n        if(totalValue.comparedTo(0) > 0){\n          apy = apy.div(totalValue);\n        }\n\n        return { ...farm, apy }\n      })\n      return farmsToDisplayWithAPY.map((farm) => (\n        <FarmCard\n          key={farm.pid}\n          farm={farm}\n          removed={removed}\n          bnbPrice={bnbPrice}\n          cakePrice={cakePrice}\n          ethereum={ethereum}\n          account={account}\n        />\n      ))\n    },\n    [bnbPrice, account, cakePrice, ethereum],\n  )\n\n  return (\n    <Page>\n      <Hero>\n        <div>\n        <Heading as=\"h1\" size=\"xxl\" mb=\"16px\">\n          Layer 1\n        </Heading>\n        <ul>\n          <li>{TranslateString(5800, 'Layered Farming is highly volatile')}</li>\n          <li>{TranslateString(4040, 'please do your own research before investing')}</li>\n        </ul>\n        </div>\n      </Hero>\n      <Details>{tokenMode ? <CardNav activeIndex={2} /> : <CardNav activeIndex={1} />}</Details>\n      <Divider />\n      <Heading as=\"h2\" size=\"lg\" color=\"primary\" mb=\"50px\" style={{ textAlign: 'center' }}>\n        {tokenMode\n          ? TranslateString(100020, 'Stake tokens to earn SENZU')\n          : TranslateString(3200, 'Stake LP tokens to earn SENZU')}\n      </Heading>\n      <Heading as=\"h3\" color=\"secondary\" mb=\"50px\" style={{ textAlign: 'center' }}>\n        {TranslateString(100000, 'Deposit Fee will be used to buyback DBALL')}\n      </Heading>\n      <FarmTabButtons stakedOnly={stakedOnly} setStakedOnly={setStakedOnly} />\n      <div>\n        <Divider />\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {stakedOnly ? farmsList(stakedOnlyFarms, false) : farmsList(activeFarms, false)}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsList(inactiveFarms, true)}\n          </Route>\n        </FlexLayout>\n      </div>\n      <Image src=\"/images/egg/12.png\" alt=\"illustration\" width={1352} height={587} responsive />\n    </Page>\n  )\n}\n\nexport default Farms\n","D:\\task159\\frontend\\src\\hooks\\useI18n.ts",[],"D:\\task159\\frontend\\src\\views\\Ifos\\PastIfo.tsx",[],"D:\\task159\\frontend\\src\\views\\Ifos\\CurrentIfo.tsx",[],"D:\\task159\\frontend\\src\\views\\Profile\\TaskCenter.tsx",[],"D:\\task159\\frontend\\src\\views\\Profile\\PublicProfile.tsx",["1088"],"import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport {\n  Card,\n  CardBody,\n  CheckmarkCircleIcon,\n  Flex,\n  Heading,\n  Link,\n  Tag,\n  Text,\n  PrizeIcon,\n  OpenNewIcon,\n  BlockIcon,\n} from 'dfswap-ui'\nimport useI18n from 'hooks/useI18n'\nimport { useProfile } from 'state/hooks'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport Menu from './components/Menu'\nimport CardHeader from './components/CardHeader'\nimport Collectibles from './components/Collectibles'\nimport WalletNotConnected from './components/WalletNotConnected'\nimport StatBox from './components/StatBox'\nimport EditProfileAvatar from './components/EditProfileAvatar'\nimport AchievementsList from './components/AchievementsList'\n\nconst Content = styled.div`\n  flex: 1;\n  padding: 16px 0;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding: 0 16px;\n  }\n`\n\nconst Username = styled(Heading)`\n  font-size: 16px;\n  line-height: 24px;\n  margin-bottom: 8px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    font-size: 40px;\n    line-height: 44px;\n  }\n`\n\nconst Status = styled.div`\n  position: absolute;\n  right: 24px;\n  top: 24px;\n`\n\nconst ResponsiveText = styled(Text)`\n  font-size: 12px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    font-size: 16px;\n  }\n`\n\nconst AddressLink = styled(Link)`\n  display: inline-block;\n  font-weight: 400;\n  font-size: 12px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  width: 80px;\n  white-space: nowrap;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    font-size: 16px;\n    width: auto;\n  }\n`\n\nconst Section = styled.div`\n  margin-bottom: 40px;\n`\n\nconst PublicProfile = () => {\n  const { account } = useWallet()\n  const { profile } = useProfile()\n  const TranslateString = useI18n()\n\n  if (!account) {\n    return <WalletNotConnected />\n  }\n\n  return (\n    <>\n      <Menu activeIndex={1} />\n      <div>\n        <Card>\n          <CardHeader>\n            <Flex alignItems={['start', null, 'center']} flexDirection={['column', null, 'row']}>\n              <EditProfileAvatar profile={profile} />\n              <Content>\n                <Username>{`@${profile.username}`}</Username>\n                <Flex alignItems=\"center\">\n                  <AddressLink href={`https://bscscan.com/address/${account}`} color=\"text\" external>\n                    {account}\n                    <OpenNewIcon ml=\"4px\" />\n                  </AddressLink>\n                </Flex>\n                <ResponsiveText bold>{profile.team.name}</ResponsiveText>\n              </Content>\n            </Flex>\n            <Status>\n              {profile.isActive ? (\n                <Tag startIcon={<CheckmarkCircleIcon width=\"18px\" />} outline>\n                  {TranslateString(698, 'Active')}\n                </Tag>\n              ) : (\n                <Tag variant=\"failure\" startIcon={<BlockIcon width=\"18px\" />} outline>\n                  {TranslateString(999, 'Paused')}\n                </Tag>\n              )}\n            </Status>\n          </CardHeader>\n          <CardBody>\n            <StatBox icon={PrizeIcon} title={profile.points} subtitle={TranslateString(999, 'Points')} mb=\"24px\" />\n            <Section>\n              <Heading as=\"h4\" size=\"md\" mb=\"16px\">\n                {TranslateString(1092, 'Achievements')}\n              </Heading>\n              <AchievementsList />\n            </Section>\n            <Collectibles />\n          </CardBody>\n        </Card>\n      </div>\n    </>\n  )\n}\n\nexport default PublicProfile\n","D:\\task159\\frontend\\src\\views\\Ifos\\components\\Hero.tsx",[],"D:\\task159\\frontend\\src\\views\\Profile\\components\\Header.tsx",[],"D:\\task159\\frontend\\src\\components\\layout\\Container.tsx",[],"D:\\task159\\frontend\\src\\state\\achievements\\index.ts",[],"D:\\task159\\frontend\\src\\state\\collectibles\\index.ts",[],"D:\\task159\\frontend\\src\\state\\prices\\index.ts",[],"D:\\task159\\frontend\\src\\utils\\formatBalance.ts",[],"D:\\task159\\frontend\\src\\utils\\addressHelpers.ts",[],"D:\\task159\\frontend\\src\\hooks\\useRefresh.ts",[],"D:\\task159\\frontend\\src\\state\\profile\\index.tsx",[],"D:\\task159\\frontend\\src\\state\\teams\\index.tsx",[],"D:\\task159\\frontend\\src\\hooks\\useTheme.ts",[],"D:\\task159\\frontend\\src\\contexts\\Localisation\\translationsContext.ts",[],"D:\\task159\\frontend\\src\\utils\\web3.ts",[],"D:\\task159\\frontend\\src\\config\\localisation\\languageCodes.ts",[],"D:\\task159\\frontend\\src\\views\\Profile\\ProfileCreation\\index.tsx",[],"D:\\task159\\frontend\\src\\views\\Pools\\components\\Divider.tsx",[],"D:\\task159\\frontend\\src\\views\\Ifos\\components\\IfoLayout.tsx",[],"D:\\task159\\frontend\\src\\views\\Ifos\\components\\IfoCardV1Data.tsx",[],"D:\\task159\\frontend\\src\\views\\Profile\\components\\Menu.tsx",[],"D:\\task159\\frontend\\src\\views\\Profile\\components\\AchievementsList.tsx",[],"D:\\task159\\frontend\\src\\views\\Layer\\Farms\\components\\Divider.tsx",[],"D:\\task159\\frontend\\src\\views\\Layer\\Farms\\components\\FarmCard\\FarmCard.tsx",["1089"],"import React, { useMemo, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes } from 'styled-components'\nimport { Flex, Text, Skeleton } from 'dfswap-ui'\nimport { communityFarms } from 'config/constants'\nimport { Farm } from 'state/types'\nimport { provider } from 'web3-core'\nimport useI18n from 'hooks/useI18n'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { QuoteToken } from 'config/constants/types'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\nconst RainbowLight = keyframes`\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n`\n\nconst StyledCardAccent = styled.div`\n  background: linear-gradient(45deg,\n  rgba(255, 0, 0, 1) 0%,\n  rgba(255, 154, 0, 1) 10%,\n  rgba(208, 222, 33, 1) 20%,\n  rgba(79, 220, 74, 1) 30%,\n  rgba(63, 218, 216, 1) 40%,\n  rgba(47, 201, 226, 1) 50%,\n  rgba(28, 127, 238, 1) 60%,\n  rgba(95, 21, 242, 1) 70%,\n  rgba(186, 12, 248, 1) 80%,\n  rgba(251, 7, 217, 1) 90%,\n  rgba(255, 0, 0, 1) 100%);\n  background-size: 300% 300%;\n  animation: ${RainbowLight} 2s linear infinite;\n  border-radius: 16px;\n  filter: blur(6px);\n  position: absolute;\n  top: -2px;\n  right: -2px;\n  bottom: -2px;\n  left: -2px;\n  z-index: -1;\n`\n\nconst FCard = styled.div`\n  align-self: baseline;\n  background: ${(props) => props.theme.card.background};\n  border-radius: 32px;\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n  position: relative;\n  text-align: center;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  bnbPrice?: BigNumber\n  ethereum?: provider\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, ethereum, account }) => {\n  const TranslateString = useI18n()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  // const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\n  // const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\n  const farmImage = farm.isTokenOnly ? farm.tokenSymbol.toLowerCase() : `${farm.tokenSymbol.toLowerCase()}-${farm.quoteTokenSymbol.toLowerCase()}`\n\n  const totalValue: BigNumber = useMemo(() => {\n    if (!farm.lpTotalInQuoteToken) {\n      return null\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n      return cakePrice.times(farm.lpTotalInQuoteToken)\n    }\n    return farm.lpTotalInQuoteToken\n  }, [bnbPrice, cakePrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\n\n  const totalValueFormated = totalValue\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n\n  const lpLabel = farm.lpSymbol\n  const earnLabel = 'SENZU'\n  const farmAPY = farm.apy && farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  })\n\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, risk } = farm\n\n  return (\n    <FCard>\n      {farm.tokenSymbol === 'SENZU' && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        risk={risk}\n        depositFee={farm.depositFeeBP}\n        farmImage={farmImage}\n        tokenSymbol={farm.tokenSymbol}\n      />\n      {!removed && (\n        <Flex justifyContent='space-between' alignItems='center'>\n          <Text>{TranslateString(352, 'APR')}:</Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {farm.apy ? (\n              <>\n                <ApyButton\n                  lpLabel={lpLabel}\n                  quoteTokenAdresses={quoteTokenAdresses}\n                  quoteTokenSymbol={quoteTokenSymbol}\n                  tokenAddresses={tokenAddresses}\n                  cakePrice={cakePrice}\n                  apy={farm.apy}\n                />\n                {farmAPY}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )}\n      <Flex justifyContent='space-between'>\n        <Text>{TranslateString(318, 'Earn')}:</Text>\n        <Text bold>{earnLabel}</Text>\n      </Flex>\n      <Flex justifyContent='space-between'>\n        <Text style={{ fontSize: '24px' }}>{TranslateString(10001, 'Deposit Fee')}:</Text>\n        <Text bold style={{ fontSize: '24px' }}>{(farm.depositFeeBP / 100)}%</Text>\n      </Flex>\n      <CardActionsContainer farm={farm} ethereum={ethereum} account={account} />\n      <Divider />\n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          isTokenOnly={farm.isTokenOnly}\n          bscScanAddress={\n            farm.isTokenOnly ?\n              `https://bscscan.com/token/${farm.tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n              :\n              `https://bscscan.com/token/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`\n          }\n          totalValueFormated={totalValueFormated}\n          lpLabel={lpLabel}\n          quoteTokenAdresses={quoteTokenAdresses}\n          quoteTokenSymbol={quoteTokenSymbol}\n          tokenAddresses={tokenAddresses}\n        />\n      </ExpandingWrapper>\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","D:\\task159\\frontend\\src\\views\\Profile\\components\\EditProfileAvatar.tsx",[],"D:\\task159\\frontend\\src\\views\\Profile\\components\\StatBox.tsx",[],"D:\\task159\\frontend\\src\\views\\Profile\\components\\HeaderWrapper.tsx",[],"D:\\task159\\frontend\\src\\views\\Profile\\components\\ClaimGiftModal.tsx",["1090"],"import React, { useCallback, useEffect, useState } from 'react'\nimport { Modal, Text, InjectedModalProps, Button, AutoRenewIcon } from 'dfswap-ui'\nimport { useWeb3React } from '@web3-react/core'\nimport { useToast } from 'state/hooks'\nimport { useClaimRefundContract } from 'hooks/useContract'\nimport useI18n from 'hooks/useI18n'\nimport { getClaimRefundContract } from 'utils/contractHelpers'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\n\ninterface ClaimGiftProps extends InjectedModalProps {\n  onSuccess: () => void\n}\n\nexport const useCanClaim = () => {\n  const [canClaim, setCanClaim] = useState(false)\n  const [refresh, setRefresh] = useState(1)\n  const { account } = useWallet()\n\n  const checkClaimStatus = useCallback(() => {\n    setRefresh((prevRefresh) => prevRefresh + 1)\n  }, [setRefresh])\n\n  useEffect(() => {\n    const fetchClaimStatus = async () => {\n      const claimRefundContract = getClaimRefundContract()\n      const walletCanClaim = await claimRefundContract.methods.canClaim(account).call()\n      setCanClaim(walletCanClaim)\n    }\n\n    if (account) {\n      fetchClaimStatus()\n    }\n  }, [account, refresh, setCanClaim])\n\n  return { canClaim, checkClaimStatus }\n}\n\nconst ClaimGift: React.FC<ClaimGiftProps> = ({ onSuccess, onDismiss }) => {\n  const [isConfirming, setIsConfirming] = useState(false)\n  const { account } = useWallet()\n  const TranslateString = useI18n()\n  const { canClaim } = useCanClaim()\n  const claimRefundContract = useClaimRefundContract()\n  const { toastSuccess, toastError } = useToast()\n\n  const handleClick = () => {\n    claimRefundContract.methods\n      .getCakeBack()\n      .send({ from: account })\n      .on('sending', () => {\n        setIsConfirming(true)\n      })\n      .on('receipt', () => {\n        toastSuccess('Success!')\n        onSuccess()\n        onDismiss()\n      })\n      .on('error', (error) => {\n        setIsConfirming(false)\n        toastError('Error', error?.message)\n      })\n  }\n\n  return (\n    <Modal title={TranslateString(999, 'Claim your Gift!')} onDismiss={onDismiss}>\n      <div style={{ maxWidth: '640px' }}>\n        <Text as=\"p\">{TranslateString(999, 'Thank you for being a day-one user of Pancake Profiles!')}</Text>\n        <Text as=\"p\" mb=\"8px\">\n          {TranslateString(\n            999,\n            \"If you haven't already noticed, we made a mistake and the starter bunny you chose got mixed up and changed into another bunny. Oops!\",\n          )}\n        </Text>\n        <Text as=\"p\">\n          {TranslateString(999, \"To make it up to you, we'll refund you the full 4 CAKE it cost to make your bunny.\")}\n        </Text>\n        <Text as=\"p\" mb=\"8px\">\n          {TranslateString(\n            999,\n            \"We're also preparing an all-new collectible for you to claim (for free!) in the near future.\",\n          )}\n        </Text>\n        <Text as=\"p\" mb=\"24px\">\n          {TranslateString(\n            999,\n            'Once you claim the refund, you can make another account with another wallet, mint a new bunny, and send it to your main account via the NFT page.',\n          )}\n        </Text>\n        <Button\n          endIcon={isConfirming ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n          isLoading={isConfirming}\n          onClick={handleClick}\n          disabled={!canClaim}\n        >\n          {TranslateString(999, 'Claim Your CAKE')}\n        </Button>\n      </div>\n    </Modal>\n  )\n}\n\nexport default ClaimGift\n","D:\\task159\\frontend\\src\\views\\Profile\\components\\WalletNotConnected.tsx",[],"D:\\task159\\frontend\\src\\views\\Profile\\components\\CardHeader.tsx",[],"D:\\task159\\frontend\\src\\views\\Profile\\components\\Collectibles.tsx",[],"D:\\task159\\frontend\\src\\views\\Profile\\components\\ComingSoon.tsx",[],"D:\\task159\\frontend\\src\\views\\Profile\\components\\ClaimPointsCallout .tsx",["1091"],"import React, { useEffect, useState } from 'react'\nimport { sumBy } from 'lodash'\nimport { useAppDispatch } from 'state'\nimport { useWeb3React } from '@web3-react/core'\nimport { Card, CardBody, CardHeader, Flex, Heading, PrizeIcon } from 'dfswap-ui'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useProfile } from 'state/hooks'\nimport { Achievement } from 'state/types'\nimport { addPoints } from 'state/profile'\nimport { addAchievement } from 'state/achievements'\nimport useI18n from 'hooks/useI18n'\nimport { getClaimableIfoData } from 'utils/achievements'\nimport AchievementRow from './AchievementRow'\n\n\nconst ClaimPointsCallout = () => {\n  const [claimableAchievements, setClaimableAchievement] = useState<Achievement[]>([])\n  const TranslateString = useI18n()\n  const dispatch = useAppDispatch()\n  const { profile } = useProfile()\n  const { account } = useWallet()\n\n  useEffect(() => {\n    const fetchIfoClaims = async () => {\n      const ifoData = await getClaimableIfoData(account)\n      setClaimableAchievement(ifoData)\n    }\n\n    if (account) {\n      fetchIfoClaims()\n    }\n  }, [account, dispatch, setClaimableAchievement])\n\n  const handleCollectSuccess = (achievement: Achievement) => {\n    dispatch(addAchievement(achievement))\n    dispatch(addPoints(achievement.points))\n\n    setClaimableAchievement((prevClaimableAchievements) =>\n      prevClaimableAchievements.filter((prevClaimableAchievement) => prevClaimableAchievement.id !== achievement.id),\n    )\n  }\n\n  if (!profile?.isActive) {\n    return null\n  }\n\n  if (claimableAchievements.length === 0) {\n    return null\n  }\n\n  const totalPointsToCollect = sumBy(claimableAchievements, 'points')\n\n  return (\n    <Card isActive mb=\"32px\">\n      <CardHeader>\n        <Flex flexDirection={['column', null, 'row']} justifyContent={['start', null, 'space-between']}>\n          <Flex alignItems=\"center\" mb={['16px', null, 0]}>\n            <PrizeIcon width=\"32px\" mr=\"8px\" />\n            <Heading size=\"lg\">\n              {TranslateString(999, `${totalPointsToCollect} Points to Collect`, { num: totalPointsToCollect })}\n            </Heading>\n          </Flex>\n        </Flex>\n      </CardHeader>\n      <CardBody>\n        {claimableAchievements.map((achievement) => (\n          <AchievementRow key={achievement.address} achievement={achievement} onCollectSuccess={handleCollectSuccess} />\n        ))}\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default ClaimPointsCallout\n","D:\\task159\\frontend\\src\\views\\Ifos\\components\\IfoSteps.tsx",[],"D:\\task159\\frontend\\src\\views\\Ifos\\components\\IfoCardV2Data.tsx",[],"D:\\task159\\frontend\\src\\state\\achievements\\helpers.ts",[],"D:\\task159\\frontend\\src\\state\\block\\index.ts",[],"D:\\task159\\frontend\\src\\state\\farms\\index.ts",[],"D:\\task159\\frontend\\src\\state\\profile\\getProfile.ts",[],"D:\\task159\\frontend\\src\\state\\teams\\helpers.ts",[],"D:\\task159\\frontend\\src\\views\\Ifos\\components\\IfoQuestions\\index.tsx",["1092"],"import React from 'react'\nimport { Text, Heading, Card, CardHeader, CardBody, Flex } from 'dfswap-ui'\nimport styled from 'styled-components'\nimport useI18n from 'hooks/useI18n'\nimport FoldableText from 'components/FoldableText'\nimport config from './config'\n\nconst ImageWrapper = styled.div`\n  flex: none;\n  order: 2;\n  width: 224px;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    order: 1;\n  }\n`\n\nconst DetailsWrapper = styled.div`\n  order: 1;\n  margin-bottom: 40px;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    order: 2;\n    margin-bottom: 0;\n    margin-left: 40px;\n  }\n`\n\nconst IfoQuestions = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Flex alignItems={['center', null, null, 'start']} flexDirection={['column', null, null, 'row']}>\n      <DetailsWrapper>\n        <Card>\n          <CardHeader>\n            <Heading size=\"lg\" color=\"secondary\">\n              {TranslateString(999, 'Details')}\n            </Heading>\n          </CardHeader>\n          <CardBody>\n            {config.map(({ title, description }) => (\n              <FoldableText\n                key={title.fallback}\n                id={title.fallback}\n                mb=\"24px\"\n                title={TranslateString(title.id, title.fallback)}\n              >\n                {description.map(({ id, fallback }) => {\n                  return (\n                    <Text key={fallback} color=\"textSubtle\" as=\"p\">\n                      {TranslateString(id, fallback)}\n                    </Text>\n                  )\n                })}\n              </FoldableText>\n            ))}\n          </CardBody>\n        </Card>\n      </DetailsWrapper>\n    </Flex>\n  )\n}\n\nexport default IfoQuestions\n","D:\\task159\\frontend\\src\\views\\Layer\\Farms\\components\\FarmTabButtons\\index.tsx",[],"D:\\task159\\frontend\\src\\views\\Profile\\ProfileCreation\\Steps.tsx",["1093","1094"],"import React, { useContext } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport NoWalletConnected from '../components/WalletNotConnected'\nimport { ProfileCreationContext } from './contexts/ProfileCreationProvider'\nimport Mint from './Mint'\nimport ProfilePicture from './ProfilePicture'\nimport TeamSelection from './TeamSelection'\nimport UserName from './UserName'\n\nconst Steps = () => {\n  const { isInitialized, currentStep } = useContext(ProfileCreationContext)\n  const { account } = useWallet()\n\n  if (!account) {\n    return <NoWalletConnected />\n  }\n\n  if (!isInitialized) {\n    return <div>Loading...</div>\n  }\n\n  if (currentStep === 0) {\n    return <Mint />\n  }\n\n  if (currentStep === 1) {\n    return <ProfilePicture />\n  }\n\n  if (currentStep === 2) {\n    return <TeamSelection />\n  }\n  console.log(currentStep)\n  if (currentStep === 3) {\n    return <UserName />\n  }\n\n  return null\n}\n\nexport default Steps\n","D:\\task159\\frontend\\src\\views\\Profile\\ProfileCreation\\Header.tsx",[],"D:\\task159\\frontend\\src\\views\\Profile\\ProfileCreation\\contexts\\ProfileCreationProvider.tsx",["1095"],"import React, { createContext, useEffect, useMemo, useReducer } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBunnyFactoryContract } from 'utils/contractHelpers'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { MINT_COST, REGISTER_COST, ALLOWANCE_MULTIPLIER } from '../config'\nimport { Actions, State, ContextType } from './types'\n\nconst totalCost = MINT_COST + REGISTER_COST\nconst allowance = totalCost * ALLOWANCE_MULTIPLIER\n\nconst initialState: State = {\n  isInitialized: false,\n  currentStep: 0,\n  teamId: null,\n  selectedNft: {\n    nftAddress: null,\n    tokenId: null,\n  },\n  userName: '',\n  minimumCakeRequired: new BigNumber(totalCost).multipliedBy(new BigNumber(10).pow(18)),\n  allowance: new BigNumber(allowance).multipliedBy(new BigNumber(10).pow(18)),\n}\n\nconst reducer = (state: State, action: Actions): State => {\n  switch (action.type) {\n    case 'initialize':\n      return {\n        ...state,\n        isInitialized: true,\n        currentStep: action.step,\n      }\n    case 'next_step':\n      return {\n        ...state,\n        currentStep: state.currentStep + 1,\n      }\n    case 'set_team':\n      return {\n        ...state,\n        teamId: action.teamId,\n      }\n    case 'set_selected_nft':\n      return {\n        ...state,\n        selectedNft: {\n          tokenId: action.tokenId,\n          nftAddress: action.nftAddress,\n        },\n      }\n    case 'set_username':\n      return {\n        ...state,\n        userName: action.userName,\n      }\n    default:\n      return state\n  }\n}\n\nexport const ProfileCreationContext = createContext<ContextType>(null)\n\nconst ProfileCreationProvider: React.FC = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n  const { account } = useWallet()\n  // Initial checks\n  useEffect(() => {\n    let isSubscribed = true\n\n    const fetchData = async () => {\n      const bunnyFactoryContract = getBunnyFactoryContract()\n      const canMint = await bunnyFactoryContract.methods.canMint(account).call()\n      dispatch({ type: 'initialize', step: canMint ? 0 : 1 })\n\n      // When changing wallets quickly unmounting before the hasClaim finished causes a React error\n      if (isSubscribed) {\n        dispatch({ type: 'initialize', step: canMint ? 0 : 1 })\n      }\n    }\n\n    if (account) {\n      fetchData()\n    }\n\n    return () => {\n      isSubscribed = false\n    }\n  }, [account, dispatch])\n\n  const actions: ContextType['actions'] = useMemo(\n    () => ({\n      nextStep: () => dispatch({ type: 'next_step' }),\n      setTeamId: (teamId: number) => dispatch({ type: 'set_team', teamId }),\n      setSelectedNft: (tokenId: number, nftAddress: string) =>\n        dispatch({ type: 'set_selected_nft', tokenId, nftAddress }),\n      setUserName: (userName: string) => dispatch({ type: 'set_username', userName }),\n    }),\n    [dispatch],\n  )\n\n  return <ProfileCreationContext.Provider value={{ ...state, actions }}>{children}</ProfileCreationContext.Provider>\n}\n\nexport default ProfileCreationProvider\n","D:\\task159\\frontend\\src\\views\\Profile\\components\\EditProfileModal\\index.tsx",[],"D:\\task159\\frontend\\src\\views\\Profile\\components\\AchievementCard.tsx",[],"D:\\task159\\frontend\\src\\views\\Profile\\components\\ProfileAvatar.tsx",[],"D:\\task159\\frontend\\src\\views\\Profile\\components\\SecondaryCard.tsx",[],"D:\\task159\\frontend\\src\\views\\Layer\\Farms\\components\\FarmCard\\ApyButton.tsx",[],"D:\\task159\\frontend\\src\\views\\Profile\\components\\CollectibleCard.tsx",[],"D:\\task159\\frontend\\src\\utils\\collectibles.ts",["1096","1097","1098"],"import Nfts, { IPFS_GATEWAY, nftSources } from 'config/constants/nfts'\nimport { Nft, NftType } from 'config/constants/types'\nimport { getAddress } from './addressHelpers'\nimport { getErc721Contract } from './contractHelpers'\n\n/**\n * Gets the identifier key based on the nft address\n * Helpful for looking up the key when all you have is the address\n */\nexport const getIdentifierKeyFromAddress = (nftAddress: string) => {\n  const nftSource = Object.values(nftSources).find((nftSourceEntry) => {\n    const address = getAddress(nftSourceEntry.address)\n    return address === nftAddress\n  })\n\n  return nftSource ? nftSource.identifierKey : null\n}\n\n/**\n * Some sources like Pancake do not return HTTP tokenURI's\n */\nexport const getTokenUrl = (tokenUri: string) => {\n  // if (tokenUri.startsWith('ipfs://')) {\n  //   return `${IPFS_GATEWAY}/ipfs/${tokenUri.slice(6)}`\n  // }\n  \n  return tokenUri\n}\n\nexport const getAddressByType = (type: NftType) => {\n  return getAddress(nftSources[type].address)\n}\n\nexport const getTokenUriData = async (nftAddress: string, tokenId: number) => {\n  try {\n    const contract = getErc721Contract(nftAddress)\n    const tokenUri = await contract.methods.tokenURI(tokenId).call()\n    const uriDataResponse = await fetch(getTokenUrl(tokenUri))\n\n    // if (!uriDataResponse.ok) {\n    //   return null\n    // }\n    \n    const uriData = await uriDataResponse.json()\n    return uriData\n  } catch (error) {\n    console.error('getTokenUriData', error)\n    return null\n  }\n}\n\nexport const getNftByTokenId = async (nftAddress: string, tokenId: number): Promise<Nft | null> => {\n  const uriData = await getTokenUriData(nftAddress, tokenId)\n  const identifierKey = getIdentifierKeyFromAddress(nftAddress)\n  \n  // Bail out early if we have no uriData, identifierKey, or the value does not\n  // exist in the object\n  // if (!uriData) {\n  //   return null\n  // }\n\n  // if (!identifierKey) {\n  //   return null\n  // }\n\n  // if (!uriData[identifierKey]) {\n  //   return null\n  // }\n\n  \n  // return Nfts.find((nft) => {\n  //   return uriData[identifierKey].includes(nft.identifier)\n  // })\n\n  return Nfts.find((nft) => {\n    return nft.identifier === 'Dragon'\n  })\n}\n","D:\\task159\\frontend\\src\\state\\farms\\fetchFarmUser.ts",[],"D:\\task159\\frontend\\src\\config\\constants\\contracts.ts",[],"D:\\task159\\frontend\\src\\state\\farms\\fetchFarms.ts",[],"D:\\task159\\frontend\\src\\state\\profile\\helpers.ts",[],"D:\\task159\\frontend\\src\\config\\constants\\teams.ts",[],"D:\\task159\\frontend\\src\\views\\Ifos\\components\\IfoQuestions\\config.ts",[],"D:\\task159\\frontend\\src\\config\\constants\\index.ts",[],"D:\\task159\\frontend\\src\\utils\\contractHelpers.ts",[],"D:\\task159\\frontend\\src\\views\\Ifos\\components\\IfoFoldableCard\\index.tsx",[],"D:\\task159\\frontend\\src\\hooks\\ifo\\v1\\useGetWalletIfoData.ts",["1099"],"import { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { Ifo, PoolIds } from 'config/constants/types'\nimport { useERC20, useIfoV1Contract } from 'hooks/useContract'\nimport { useIfoAllowance } from 'hooks/useAllowance'\nimport makeBatchRequest from 'utils/makeBatchRequest'\nimport { getAddress } from 'utils/addressHelpers'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { WalletIfoState, WalletIfoData } from '../types'\n\n\ninterface UserInfo {\n  amount: BigNumber\n  claimed: boolean\n}\n\n/**\n * Gets all data from an IFO related to a wallet\n */\nconst useGetWalletIfoData = (ifo: Ifo): WalletIfoData => {\n  const [state, setState] = useState<WalletIfoState>({\n    [PoolIds.poolUnlimited]: {\n      amountTokenCommittedInLP: new BigNumber(0),\n      hasClaimed: false,\n      isPendingTx: false,\n      offeringAmountInToken: new BigNumber(0),\n      refundingAmountInLP: new BigNumber(0),\n      taxAmountInLP: new BigNumber(0), // Not used\n    },\n  })\n\n  const { address, currency } = ifo\n  const { poolUnlimited } = state\n\n  // const { account } = useWeb3React()\n  const { account } = useWallet()\n  const contract = useIfoV1Contract(address)\n  const currencyContract = useERC20(getAddress(currency.address))\n  const allowance = useIfoAllowance(currencyContract, address, poolUnlimited.isPendingTx)\n\n  const setPendingTx = (status: boolean) =>\n    setState((prevState) => ({\n      [PoolIds.poolUnlimited]: {\n        ...prevState.poolUnlimited,\n        isPendingTx: status,\n      },\n    }))\n\n  const setIsClaimed = () => {\n    setState((prevState) => ({\n      [PoolIds.poolUnlimited]: {\n        ...prevState.poolUnlimited,\n        hasClaimed: true,\n      },\n    }))\n  }\n\n  useEffect(() => {\n    const fetchIfoData = async () => {\n      const [offeringAmount, userInfoResponse, refundingAmount] = (await makeBatchRequest([\n        contract.methods.getOfferingAmount(account).call,\n        contract.methods.userInfo(account).call,\n        contract.methods.getRefundingAmount(account).call,\n      ])) as [string, UserInfo, string]\n\n      setState((prevState) => ({\n        [PoolIds.poolUnlimited]: {\n          ...prevState.poolUnlimited,\n          amountTokenCommittedInLP: new BigNumber(userInfoResponse.amount),\n          hasClaimed: userInfoResponse.claimed,\n          offeringAmountInToken: new BigNumber(offeringAmount),\n          refundingAmountInLP: new BigNumber(refundingAmount),\n        },\n      }))\n    }\n\n    if (account) {\n      fetchIfoData()\n    }\n  }, [account, contract, setState])\n\n  return { ...state, allowance, contract, setPendingTx, addUserContributedAmount: () => null, setIsClaimed }\n}\n\nexport default useGetWalletIfoData\n","D:\\task159\\frontend\\src\\views\\Profile\\ProfileCreation\\UserName.tsx",["1100","1101","1102","1103","1104","1105","1106"],"import React, { ChangeEvent, useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport {\n  Card,\n  CardBody,\n  Heading,\n  Text,\n  Input as UIKitInput,\n  Button,\n  AutoRenewIcon,\n  CheckmarkIcon,\n  Flex,\n  WarningIcon,\n  useModal,\n  Skeleton,\n  Checkbox,\n} from 'dfswap-ui'\nimport { parseISO, formatDistance } from 'date-fns'\nimport { useWeb3React } from '@web3-react/core'\nimport { useToast } from 'state/hooks'\nimport useWeb3 from 'hooks/useWeb3'\nimport useI18n from 'hooks/useI18n'\nimport useHasCakeBalance from 'hooks/useHasCakeBalance'\nimport debounce from 'lodash/debounce'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport ConfirmProfileCreationModal from '../components/ConfirmProfileCreationModal'\nimport useProfileCreation from './contexts/hook'\nimport { USERNAME_MIN_LENGTH, USERNAME_MAX_LENGTH, REGISTER_COST } from './config'\n\nenum ExistingUserState {\n  IDLE = 'idle', // initial state\n  CREATED = 'created', // username has already been created\n  NEW = 'new', // username has not been created\n}\n\nconst profileApiUrl = process.env.REACT_APP_API_PROFILE\nconst minimumCakeToRegister = new BigNumber(REGISTER_COST).multipliedBy(new BigNumber(10).pow(18))\n\nconst InputWrap = styled.div`\n  position: relative;\n  max-width: 240px;\n`\n\nconst Input = styled(UIKitInput)`\n  padding-right: 40px;\n`\n\nconst Indicator = styled(Flex)`\n  align-items: center;\n  height: 24px;\n  justify-content: center;\n  margin-top: -12px;\n  position: absolute;\n  right: 16px;\n  top: 50%;\n  width: 24px;\n`\n\nconst UserName: React.FC = () => {\n  const [isAcknowledged, setIsAcknowledged] = useState(false)\n  const { teamId, selectedNft, userName, actions, minimumCakeRequired, allowance } = useProfileCreation()\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  // const { library } = useWeb3React()\n  const { toastError } = useToast()\n  const web3 = useWeb3()\n  const [existingUserState, setExistingUserState] = useState<ExistingUserState>(ExistingUserState.NEW)\n  const [isValid, setIsValid] = useState(false)\n  const [isLoading, setIsLoading] = useState(false)\n  const [message, setMessage] = useState('')\n  const hasMinimumCakeRequired = useHasCakeBalance(minimumCakeToRegister)\n  const [onPresentConfirmProfileCreation] = useModal(\n    <ConfirmProfileCreationModal\n      userName={userName}\n      selectedNft={selectedNft}\n      account={account}\n      teamId={teamId}\n      minimumCakeRequired={minimumCakeRequired}\n      allowance={allowance}\n    />,\n    false,\n  )\n  const isUserCreated = existingUserState === ExistingUserState.CREATED\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target\n    actions.setUserName(value)\n\n    if(value.length >= 3 && value.length <= 15)\n    {\n      setIsValid(true)\n    }\n    else\n    {\n      setIsValid(false)\n    }\n  }\n\n  const handleConfirm = async () => {\n    try {\n      setIsLoading(true)\n      const signature = await web3.eth.personal.sign(userName, account, null) // Last param is the password, and is null to request a signature in the wallet\n\n      const response = await fetch(`${profileApiUrl}/api/users/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          address: account,\n          username: userName,\n          signature,\n        }),\n      })\n\n      console.log(response.ok)\n\n      if (!response.ok) {\n        setExistingUserState(ExistingUserState.CREATED)\n      } else {\n        const data = await response.json()\n        toastError(data?.error?.message)\n      }\n    } catch (error) {\n      toastError(error?.message ? error.message : JSON.stringify(error))\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleAcknowledge = () => setIsAcknowledged(!isAcknowledged)\n\n  return (\n    <>\n      <Text fontSize=\"20px\" color=\"textSubtle\" bold>\n        {TranslateString(999, `Step ${4}`)}\n      </Text>\n      <Heading as=\"h3\" size=\"xl\" mb=\"24px\">\n        {TranslateString(1110, 'Set Your Name')}\n      </Heading>\n      <Text as=\"p\" mb=\"24px\">\n        {TranslateString(\n          999,\n          'This name will be shown in team leaderboards and search results as long as your profile is active.',\n        )}\n      </Text>\n      <Card mb=\"24px\">\n        <CardBody>\n          <Heading as=\"h4\" size=\"lg\" mb=\"8px\">\n            {TranslateString(1110, 'Set Your Name')}\n          </Heading>\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n            {TranslateString(\n              840,\n              'Your name must be at least 3 and at most 15 standard letters and numbers long. You can’t change this once you click Confirm.',\n            )}\n          </Text>\n          {existingUserState === ExistingUserState.IDLE ? (\n            <Skeleton height=\"40px\" width=\"240px\" />\n          ) : (\n            <InputWrap>\n              <Input\n                onChange={handleChange}\n                isWarning={userName && !isValid}\n                isSuccess={userName && isValid}\n                minLength={USERNAME_MIN_LENGTH}\n                maxLength={USERNAME_MAX_LENGTH}\n                disabled={isUserCreated}\n                placeholder={TranslateString(1094, 'Enter your name...')}\n                value={userName}\n              />\n              <Indicator>\n                {isLoading && <AutoRenewIcon spin />}\n                {!isLoading && isValid && userName && <CheckmarkIcon color=\"success\" />}\n                {!isLoading && !isValid && userName && <WarningIcon color=\"failure\" />}\n              </Indicator>\n            </InputWrap>\n          )}\n          <Text color=\"textSubtle\" fontSize=\"14px\" py=\"4px\" mb=\"16px\" style={{ minHeight: '30px' }}>\n            {message}\n          </Text>\n          <Text as=\"p\" color=\"failure\" mb=\"8px\">\n            {TranslateString(\n              1100,\n              \"Only reuse a name from other social media if you're OK with people viewing your wallet. You can't change your name once you click Confirm.\",\n            )}\n          </Text>\n          <label htmlFor=\"checkbox\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\n            <Flex alignItems=\"center\">\n              <div style={{ flex: 'none' }}>\n                <Checkbox id=\"checkbox\" scale=\"sm\" checked={isAcknowledged} onChange={handleAcknowledge} />\n              </div>\n              <Text ml=\"8px\">\n                {TranslateString(1096, 'I understand that people can view my wallet if they know my username')}\n              </Text>\n            </Flex>\n          </label>\n          <Button onClick={handleConfirm} disabled={!isValid || isUserCreated || isLoading || !isAcknowledged}>\n            {TranslateString(464, 'Confirm')}\n          </Button>\n        </CardBody>\n      </Card>\n      <Button onClick={onPresentConfirmProfileCreation} disabled={!isValid || !isUserCreated}>\n        {TranslateString(842, 'Complete Profile')}\n      </Button>\n      {!hasMinimumCakeRequired && (\n        <Text color=\"failure\" mt=\"16px\">\n          {TranslateString(1098, `A minimum of ${REGISTER_COST} DBALL is required`, { num: REGISTER_COST })}\n        </Text>\n      )}\n    </>\n  )\n}\n\nexport default UserName\n","D:\\task159\\frontend\\src\\views\\Profile\\ProfileCreation\\TeamSelection.tsx",[],"D:\\task159\\frontend\\src\\views\\Profile\\components\\EditProfileModal\\reducer.ts",[],"D:\\task159\\frontend\\src\\views\\Profile\\ProfileCreation\\ProfilePicture.tsx",["1107"],"import React, { useContext, useState } from 'react'\nimport styled from 'styled-components'\nimport { AutoRenewIcon, Button, Card, CardBody, Heading, Skeleton, Text } from 'dfswap-ui'\nimport { Link as RouterLink } from 'react-router-dom'\nimport { useWeb3React } from '@web3-react/core'\nimport { getAddressByType } from 'utils/collectibles'\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\nimport useI18n from 'hooks/useI18n'\nimport { useGetCollectibles, useToast } from 'state/hooks'\nimport { useERC721 } from 'hooks/useContract'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport SelectionCard from '../components/SelectionCard'\nimport NextStepButton from '../components/NextStepButton'\nimport { ProfileCreationContext } from './contexts/ProfileCreationProvider'\n\nconst Link = styled(RouterLink)`\n  color: ${({ theme }) => theme.colors.primary};\n`\n\nconst NftWrapper = styled.div`\n  margin-bottom: 24px;\n`\n\nconst ProfilePicture: React.FC = () => {\n  const [isApproved, setIsApproved] = useState(false)\n  const [isApproving, setIsApproving] = useState(false)\n  const { selectedNft, actions } = useContext(ProfileCreationContext)\n  const TranslateString = useI18n()\n  const { isLoading, nftsInWallet, tokenIds } = useGetCollectibles()\n  const contract = useERC721(selectedNft.nftAddress)\n  const { account } = useWallet()\n  const { toastError } = useToast()\n\n  const handleApprove = () => {\n    contract.methods\n      .approve(getPancakeProfileAddress(), selectedNft.tokenId)\n      .send({ from: account })\n      .once('sending', () => {\n        setIsApproving(true)\n      })\n      .once('receipt', () => {\n        setIsApproving(false)\n        setIsApproved(true)\n      })\n      .once('error', (error) => {\n        toastError('Error', error?.message)\n        setIsApproving(false)\n      })\n  }\n\n  if (!isLoading && nftsInWallet.length === 0) {\n    return (\n      <>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(852, 'Oops!')}\n        </Heading>\n        <Text bold fontSize=\"20px\" mb=\"24px\">\n          {TranslateString(854, 'We couldn’t find any Pancake Collectibles in your wallet.')}\n        </Text>\n        <Text as=\"p\">\n          {TranslateString(\n            856,\n            'You need a DBALL Collectible to finish setting up your profile. If you sold or transferred your starter collectible to another wallet, you’ll need to get it back or acquire a new one somehow. You can’t make a new starter with this wallet address.',\n          )}\n        </Text>\n      </>\n    )\n  }\n\n  return (\n    <>\n      <Text fontSize=\"20px\" color=\"textSubtle\" bold>\n        {TranslateString(999, `Step ${2}`)}\n      </Text>\n      <Heading as=\"h3\" size=\"xl\" mb=\"24px\">\n        {TranslateString(778, 'Set Profile Picture')}\n      </Heading>\n      <Card mb=\"24px\">\n        <CardBody>\n          <Heading as=\"h4\" size=\"lg\" mb=\"8px\">\n            {TranslateString(812, 'Choose collectible')}\n          </Heading>\n          <Text as=\"p\" color=\"textSubtle\">\n            {TranslateString(\n              814,\n              'Choose a profile picture from the eligible collectibles (NFT) in your wallet, shown below.',\n            )}\n          </Text>\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n            {TranslateString(816, 'Only approved Pancake Collectibles can be used.')}\n            <Link to=\"/collectibles\" style={{ marginLeft: '4px' }}>\n              {TranslateString(999, 'See the list >')}\n            </Link>\n          </Text>\n          <NftWrapper>\n            {isLoading ? (\n              <Skeleton height=\"80px\" mb=\"16px\" />\n            ) : (\n              nftsInWallet.map((walletNft) => {\n                const [firstTokenId] = tokenIds[walletNft.identifier]\n                const address = getAddressByType(walletNft.type)\n\n                return (\n                  <SelectionCard\n                    name=\"profilePicture\"\n                    key={walletNft.identifier}\n                    value={firstTokenId}\n                    image={`/images/nfts/${walletNft.images.md}`}\n                    isChecked={firstTokenId === selectedNft.tokenId}\n                    onChange={(value: string) => actions.setSelectedNft(parseInt(value, 10), address)}\n                  >\n                    <Text bold>{walletNft.name}</Text>\n                  </SelectionCard>\n                )\n              })\n            )}\n          </NftWrapper>\n          <Heading as=\"h4\" size=\"lg\" mb=\"8px\">\n            {TranslateString(818, 'Allow collectible to be locked')}\n          </Heading>\n          <Text as=\"p\" color=\"textSubtle\" mb=\"16px\">\n            {TranslateString(\n              820,\n              \"The collectible you've chosen will be locked in a smart contract while it’s being used as your profile picture. Don't worry - you'll be able to get it back at any time.\",\n            )}\n          </Text>\n          <Button\n            isLoading={isApproving}\n            disabled={isApproved || isApproving || selectedNft.tokenId === null}\n            onClick={handleApprove}\n            endIcon={isApproving ? <AutoRenewIcon spin color=\"currentColor\" /> : undefined}\n          >\n            {TranslateString(564, 'Approve')}\n          </Button>\n        </CardBody>\n      </Card>\n      <NextStepButton onClick={actions.nextStep} disabled={selectedNft.tokenId === null || !isApproved || isApproving}>\n        {TranslateString(798, 'Next Step')}\n      </NextStepButton>\n    </>\n  )\n}\n\nexport default ProfilePicture\n","D:\\task159\\frontend\\src\\views\\Profile\\ProfileCreation\\Mint.tsx",["1108"],"import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Card, CardBody, Heading, Text } from 'dfswap-ui'\nimport { useWeb3React } from '@web3-react/core'\nimport useI18n from 'hooks/useI18n'\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\nimport { useCake, useBunnyFactory } from 'hooks/useContract'\nimport { Nft } from 'config/constants/types'\nimport useHasCakeBalance from 'hooks/useHasCakeBalance'\nimport nftList from 'config/constants/nfts'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport SelectionCard from '../components/SelectionCard'\nimport NextStepButton from '../components/NextStepButton'\nimport ApproveConfirmButtons from '../components/ApproveConfirmButtons'\nimport useProfileCreation from './contexts/hook'\nimport { MINT_COST, STARTER_BUNNY_IDENTIFIERS } from './config'\n\nconst nfts = nftList.filter((nft) => STARTER_BUNNY_IDENTIFIERS.includes(nft.identifier))\nconst minimumCakeBalanceToMint = new BigNumber(MINT_COST).multipliedBy(new BigNumber(10).pow(18))\n\nconst Mint: React.FC = () => {\n  const [variationId, setVariationId] = useState<Nft['variationId']>(null)\n  const { actions, minimumCakeRequired, allowance } = useProfileCreation()\n\n  const { account } = useWallet()\n  const cakeContract = useCake()\n  const bunnyFactoryContract = useBunnyFactory()\n  const TranslateString = useI18n()\n  const hasMinimumCakeRequired = useHasCakeBalance(minimumCakeBalanceToMint)\n  const {\n    isApproving,\n    isApproved,\n    isConfirmed,\n    isConfirming,\n    handleApprove,\n    handleConfirm,\n  } = useApproveConfirmTransaction({\n    onRequiresApproval: async () => {\n      // TODO: Move this to a helper, this check will be probably be used many times\n      try {\n        const response = await cakeContract.methods.allowance(account, bunnyFactoryContract.options.address).call()\n        const currentAllowance = new BigNumber(response)\n        return currentAllowance.gte(minimumCakeRequired)\n      } catch (error) {\n        return false\n      }\n    },\n    onApprove: () => {\n      return cakeContract.methods\n        .approve(bunnyFactoryContract.options.address, allowance.toJSON())\n        .send({ from: account })\n    },\n    onConfirm: () => {\n      return bunnyFactoryContract.methods.mintNFT(variationId).send({ from: account })\n    },\n    onSuccess: () => actions.nextStep(),\n  })\n\n  return (\n    <>\n      <Text fontSize=\"20px\" color=\"textSubtle\" bold>\n        {TranslateString(999, `Step ${1}`)}\n      </Text>\n      <Heading as=\"h3\" size=\"xl\" mb=\"24px\">\n        {TranslateString(776, 'Get Starter Collectible')}\n      </Heading>\n      <Text as=\"p\">{TranslateString(786, 'Every profile starts by making a “starter” collectible (NFT).')}</Text>\n      <Text as=\"p\">{TranslateString(788, 'This starter will also become your first profile picture.')}</Text>\n      <Text as=\"p\" mb=\"24px\">\n        {TranslateString(790, 'You can change your profile pic later if you get another approved Pancake Collectible.')}\n      </Text>\n      <Card mb=\"24px\">\n        <CardBody>\n          <Heading as=\"h4\" size=\"lg\" mb=\"8px\">\n            {TranslateString(792, 'Choose your Starter!')}\n          </Heading>\n          <Text as=\"p\" color=\"textSubtle\">\n            {TranslateString(794, 'Choose wisely: you can only ever make one starter collectible!')}\n          </Text>\n          <Text as=\"p\" mb=\"24px\" color=\"textSubtle\">\n            {TranslateString(999, `Cost: ${MINT_COST} DBALL`, { num: MINT_COST })}\n          </Text>\n          {nfts.map((nft) => {\n            const handleChange = (value: string) => setVariationId(Number(value))\n\n            return (\n              <SelectionCard\n                key={nft.identifier}\n                name=\"mintStarter\"\n                value={nft.variationId}\n                image={`/images/nfts/${nft.images.md}`}\n                isChecked={variationId === nft.variationId}\n                onChange={handleChange}\n                disabled={isApproving || isConfirming || isConfirmed || !hasMinimumCakeRequired}\n              >\n                <Text bold>{nft.name}</Text>\n              </SelectionCard>\n            )\n          })}\n          {!hasMinimumCakeRequired && (\n            <Text color=\"failure\" mb=\"16px\">\n              {TranslateString(1098, `A minimum of ${MINT_COST} DBALL is required`)}\n            </Text>\n          )}\n          <ApproveConfirmButtons\n            isApproveDisabled={variationId === null || isConfirmed || isConfirming || isApproved}\n            isApproving={isApproving}\n            isConfirmDisabled={!isApproved || isConfirmed || !hasMinimumCakeRequired}\n            isConfirming={isConfirming}\n            onApprove={handleApprove}\n            onConfirm={handleConfirm}\n          />\n        </CardBody>\n      </Card>\n      <NextStepButton onClick={actions.nextStep} disabled={!isConfirmed}>\n        {TranslateString(798, 'Next Step')}\n      </NextStepButton>\n    </>\n  )\n}\n\nexport default Mint\n","D:\\task159\\frontend\\src\\hooks\\useTokenBalance.ts",[],"D:\\task159\\frontend\\src\\views\\Profile\\ProfileCreation\\config.ts",[],"D:\\task159\\frontend\\src\\views\\Profile\\components\\EditProfileModal\\ApproveCakeView.tsx",["1109"],"import React, { useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { AutoRenewIcon, Button, Flex, InjectedModalProps, Text } from 'dfswap-ui'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\nimport { useCake } from 'hooks/useContract'\nimport { useProfile, useToast } from 'state/hooks'\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport useGetProfileCosts from 'hooks/useGetProfileCosts'\nimport { UseEditProfileResponse } from './reducer'\n\n\ninterface ApproveCakePageProps extends InjectedModalProps {\n  goToChange: UseEditProfileResponse['goToChange']\n}\n\nconst ApproveCakePage: React.FC<ApproveCakePageProps> = ({ goToChange, onDismiss }) => {\n  const [isApproving, setIsApproving] = useState(false)\n  const { profile } = useProfile()\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const { numberCakeToUpdate, numberCakeToReactivate } = useGetProfileCosts()\n  const cakeContract = useCake()\n  const { toastError } = useToast()\n  const cost = profile.isActive ? numberCakeToUpdate : numberCakeToReactivate\n\n  const handleApprove = () => {\n    cakeContract.methods\n      .approve(getPancakeProfileAddress(), cost.times(2).toJSON())\n      .send({ from: account })\n      .on('sending', () => {\n        setIsApproving(true)\n      })\n      .on('receipt', () => {\n        goToChange()\n      })\n      .on('error', (error) => {\n        toastError('Error', error?.message)\n        setIsApproving(false)\n      })\n  }\n\n  if (!profile) {\n    return null\n  }\n\n  return (\n    <Flex flexDirection=\"column\">\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"24px\">\n        <Text>\n          {profile.isActive ? TranslateString(999, 'Cost to update:') : TranslateString(999, 'Cost to reactivate:')}\n        </Text>\n        <Text>{TranslateString(999, `${getFullDisplayBalance(cost)} CAKE`)}</Text>\n      </Flex>\n      <Button\n        disabled={isApproving}\n        isLoading={isApproving}\n        endIcon={isApproving ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        width=\"100%\"\n        mb=\"8px\"\n        onClick={handleApprove}\n      >\n        {TranslateString(999, 'Approve')}\n      </Button>\n      <Button variant=\"text\" width=\"100%\" onClick={onDismiss} disabled={isApproving}>\n        {TranslateString(999, 'Close Window')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default ApproveCakePage\n","D:\\task159\\frontend\\src\\components\\UnlockButton.tsx",[],"D:\\task159\\frontend\\src\\views\\Profile\\components\\EditProfileModal\\ChangeProfilePicView.tsx",["1110"],"import React, { useState } from 'react'\nimport { Button, InjectedModalProps, Skeleton, Text } from 'dfswap-ui'\nimport { useWeb3React } from '@web3-react/core'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useAppDispatch } from 'state'\nimport { useGetCollectibles, useProfile, useToast } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport { fetchProfile } from 'state/profile'\nimport { getAddressByType } from 'utils/collectibles'\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\nimport { useERC721, useProfile as useProfileContract } from 'hooks/useContract'\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\nimport SelectionCard from '../SelectionCard'\nimport ApproveConfirmButtons from '../ApproveConfirmButtons'\n\n\ntype ChangeProfilePicPageProps = InjectedModalProps\n\nconst ChangeProfilePicPage: React.FC<ChangeProfilePicPageProps> = ({ onDismiss }) => {\n  const [selectedNft, setSelectedNft] = useState({\n    tokenId: null,\n    nftAddress: null,\n  })\n  const TranslateString = useI18n()\n  const { isLoading, tokenIds, nftsInWallet } = useGetCollectibles()\n  const dispatch = useAppDispatch()\n  const { profile } = useProfile()\n  const contract = useERC721(selectedNft.nftAddress)\n  const profileContract = useProfileContract()\n  const { account } = useWallet()\n  const { toastSuccess } = useToast()\n  const {\n    isApproving,\n    isApproved,\n    isConfirmed,\n    isConfirming,\n    handleApprove,\n    handleConfirm,\n  } = useApproveConfirmTransaction({\n    onApprove: () => {\n      return contract.methods.approve(getPancakeProfileAddress(), selectedNft.tokenId).send({ from: account })\n    },\n    onConfirm: () => {\n      if (!profile.isActive) {\n        return profileContract.methods\n          .reactivateProfile(selectedNft.nftAddress, selectedNft.tokenId)\n          .send({ from: account })\n      }\n\n      return profileContract.methods.updateProfile(selectedNft.nftAddress, selectedNft.tokenId).send({ from: account })\n    },\n    onSuccess: async () => {\n      // Re-fetch profile\n      await dispatch(fetchProfile(account))\n      toastSuccess('Profile Updated!')\n\n      onDismiss()\n    },\n  })\n\n  return (\n    <>\n      <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n        {TranslateString(999, 'Choose a new Collectible to use as your profile pic.')}\n      </Text>\n      {isLoading ? (\n        <Skeleton height=\"80px\" mb=\"16px\" />\n      ) : (\n        nftsInWallet.map((walletNft) => {\n          const [firstTokenId] = tokenIds[walletNft.identifier]\n          const handleChange = (value: string) => {\n            setSelectedNft({\n              tokenId: Number(value),\n              nftAddress: getAddressByType(walletNft.type),\n            })\n          }\n\n          return (\n            <SelectionCard\n              name=\"profilePicture\"\n              key={walletNft.identifier}\n              value={firstTokenId}\n              image={`/images/nfts/${walletNft.images.md}`}\n              isChecked={firstTokenId === selectedNft.tokenId}\n              onChange={handleChange}\n              disabled={isApproving || isConfirming || isConfirmed}\n            >\n              <Text bold>{walletNft.name}</Text>\n            </SelectionCard>\n          )\n        })\n      )}\n      {!isLoading && nftsInWallet.length === 0 && (\n        <>\n          <Text as=\"p\" color=\"textSubtle\" mb=\"16px\">\n            {TranslateString(999, 'Sorry! You don’t have any eligible Collectibles in your wallet to use!')}\n          </Text>\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n            {TranslateString(999, 'Make sure you have a Pancake Collectible in your wallet and try again!')}\n          </Text>\n        </>\n      )}\n      <ApproveConfirmButtons\n        isApproveDisabled={isConfirmed || isConfirming || isApproved || selectedNft.tokenId === null}\n        isApproving={isApproving}\n        isConfirmDisabled={!isApproved || isConfirmed || selectedNft.tokenId === null}\n        isConfirming={isConfirming}\n        onApprove={handleApprove}\n        onConfirm={handleConfirm}\n      />\n      <Button variant=\"text\" width=\"100%\" onClick={onDismiss} disabled={isApproving || isConfirming}>\n        {TranslateString(999, 'Close Window')}\n      </Button>\n    </>\n  )\n}\n\nexport default ChangeProfilePicPage\n","D:\\task159\\frontend\\src\\views\\Profile\\components\\AchievementDescription.tsx",[],"D:\\task159\\frontend\\src\\views\\Profile\\components\\AchievementTitle.tsx",[],"D:\\task159\\frontend\\src\\views\\Profile\\components\\AchievementAvatar.tsx",[],"D:\\task159\\frontend\\src\\views\\Profile\\components\\EditProfileModal\\PauseProfileView.tsx",["1111"],"import React, { useState } from 'react'\nimport { AutoRenewIcon, Button, Checkbox, Flex, InjectedModalProps, Text } from 'dfswap-ui'\nimport useI18n from 'hooks/useI18n'\nimport useGetProfileCosts from 'hooks/useGetProfileCosts'\nimport { useAppDispatch } from 'state'\nimport { useProfile, useToast } from 'state/hooks'\nimport { fetchProfile } from 'state/profile'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useProfile as useProfileContract } from 'hooks/useContract'\nimport { useWeb3React } from '@web3-react/core'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\n\ntype PauseProfilePageProps = InjectedModalProps\n\nconst PauseProfilePage: React.FC<PauseProfilePageProps> = ({ onDismiss }) => {\n  const [isAcknowledged, setIsAcknowledged] = useState(false)\n  const [isConfirming, setIsConfirming] = useState(false)\n  const { profile } = useProfile()\n  const { numberCakeToReactivate } = useGetProfileCosts()\n  const TranslateString = useI18n()\n  const pancakeProfileContract = useProfileContract()\n  const { account } = useWallet()\n  const { toastSuccess, toastError } = useToast()\n  const dispatch = useAppDispatch()\n\n  const handleChange = () => setIsAcknowledged(!isAcknowledged)\n\n  const handleDeactivateProfile = () => {\n    pancakeProfileContract.methods\n      .pauseProfile()\n      .send({ from: account })\n      .on('sending', () => {\n        setIsConfirming(true)\n      })\n      .on('receipt', async () => {\n        // Re-fetch profile\n        await dispatch(fetchProfile(account))\n        toastSuccess('Profile Paused!')\n\n        onDismiss()\n      })\n      .on('error', (error) => {\n        toastError('Error', error?.message)\n        setIsConfirming(false)\n      })\n  }\n\n  if (!profile) {\n    return null\n  }\n\n  return (\n    <>\n      <Text as=\"p\" color=\"failure\" mb=\"24px\">\n        {TranslateString(999, 'This will suspend your profile and send your Collectible back to your wallet')}\n      </Text>\n      <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n        {TranslateString(\n          999,\n          \"While your profile is suspended, you won't be able to earn points, but your achievements and points will stay associated with your profile\",\n        )}\n      </Text>\n      <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n        {TranslateString(999, `Cost to reactivate in future: ${getBalanceNumber(numberCakeToReactivate)} CAKE`)}\n      </Text>\n      <label htmlFor=\"acknowledgement\" style={{ cursor: 'pointer', display: 'block', marginBottom: '24px' }}>\n        <Flex alignItems=\"center\">\n          <Checkbox id=\"acknowledgement\" checked={isAcknowledged} onChange={handleChange} scale=\"sm\" />\n          <Text ml=\"8px\">{TranslateString(476, 'I understand')}</Text>\n        </Flex>\n      </label>\n      <Button\n        width=\"100%\"\n        isLoading={isConfirming}\n        endIcon={isConfirming ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        disabled={!isAcknowledged || isConfirming}\n        onClick={handleDeactivateProfile}\n        mb=\"8px\"\n      >\n        {TranslateString(464, 'Confirm')}\n      </Button>\n      <Button variant=\"text\" width=\"100%\" onClick={onDismiss}>\n        {TranslateString(999, 'Close Window')}\n      </Button>\n    </>\n  )\n}\n\nexport default PauseProfilePage\n","D:\\task159\\frontend\\src\\views\\Profile\\components\\EditProfileModal\\StartView.tsx",["1112"],"import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Button, Flex, Text, InjectedModalProps } from 'dfswap-ui'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\nimport { useCake } from 'hooks/useContract'\nimport useI18n from 'hooks/useI18n'\nimport useGetProfileCosts from 'hooks/useGetProfileCosts'\nimport useHasCakeBalance from 'hooks/useHasCakeBalance'\nimport { useProfile } from 'state/hooks'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { UseEditProfileResponse } from './reducer'\nimport ProfileAvatar from '../ProfileAvatar'\n\ninterface StartPageProps extends InjectedModalProps {\n  goToChange: UseEditProfileResponse['goToChange']\n  goToRemove: UseEditProfileResponse['goToRemove']\n  goToApprove: UseEditProfileResponse['goToApprove']\n}\n\nconst DangerOutline = styled(Button).attrs({ variant: 'secondary' })`\n  border-color: ${({ theme }) => theme.colors.failure};\n  color: ${({ theme }) => theme.colors.failure};\n  margin-bottom: 24px;\n\n  &:hover:not(:disabled):not(.button--disabled):not(:active) {\n    border-color: ${({ theme }) => theme.colors.failure};\n    opacity: 0.8;\n  }\n`\n\nconst AvatarWrapper = styled.div`\n  height: 64px;\n  width: 64px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    height: 128px;\n    width: 128px;\n  }\n`\n\nconst StartPage: React.FC<StartPageProps> = ({ goToApprove, goToChange, goToRemove, onDismiss }) => {\n  const [needsApproval, setNeedsApproval] = useState(null)\n  const { profile } = useProfile()\n  const { numberCakeToUpdate, numberCakeToReactivate } = useGetProfileCosts()\n  const minimumCakeRequired = profile.isActive ? numberCakeToUpdate : numberCakeToReactivate\n  const hasMinimumCakeRequired = useHasCakeBalance(minimumCakeRequired)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const cakeContract = useCake()\n  const cost = profile.isActive ? numberCakeToUpdate : numberCakeToReactivate\n\n  /**\n   * Check if the wallet has the required CAKE allowance to change their profile pic or reactivate\n   * If they don't, we send them to the approval screen first\n   */\n  useEffect(() => {\n    const checkApprovalStatus = async () => {\n      const response = await cakeContract.methods.allowance(account, getPancakeProfileAddress()).call()\n      const currentAllowance = new BigNumber(response)\n      setNeedsApproval(currentAllowance.lt(cost))\n    }\n\n    if (account) {\n      checkApprovalStatus()\n    }\n  }, [account, cost, setNeedsApproval, cakeContract])\n\n  if (!profile) {\n    return null\n  }\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\n      <AvatarWrapper>\n        <ProfileAvatar profile={profile} />\n      </AvatarWrapper>\n      <Flex alignItems=\"center\" style={{ height: '48px' }} justifyContent=\"center\">\n        <Text as=\"p\" color=\"failure\">\n          {!hasMinimumCakeRequired &&\n            TranslateString(999, `${getFullDisplayBalance(minimumCakeRequired)} CAKE required to change profile pic`)}\n        </Text>\n      </Flex>\n      {profile.isActive ? (\n        <>\n          <Button\n            width=\"100%\"\n            mb=\"8px\"\n            onClick={needsApproval === true ? goToApprove : goToChange}\n            disabled={!hasMinimumCakeRequired || needsApproval === null}\n          >\n            {TranslateString(999, 'Change Profile Pic')}\n          </Button>\n          <DangerOutline width=\"100%\" onClick={goToRemove}>\n            {TranslateString(999, 'Remove Profile Pic')}\n          </DangerOutline>\n        </>\n      ) : (\n        <Button\n          width=\"100%\"\n          mb=\"8px\"\n          onClick={needsApproval === true ? goToApprove : goToChange}\n          disabled={!hasMinimumCakeRequired || needsApproval === null}\n        >\n          {TranslateString(999, 'Reactivate Profile')}\n        </Button>\n      )}\n      <Button variant=\"text\" width=\"100%\" onClick={onDismiss}>\n        {TranslateString(999, 'Close Window')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default StartPage\n","D:\\task159\\frontend\\src\\views\\Profile\\components\\AchievementRow\\index.tsx",["1113"],"import React, { useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport { AutoRenewIcon, Button, Flex } from 'dfswap-ui'\nimport { Achievement } from 'state/types'\nimport { useToast } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport { usePointCenterIfoContract } from 'hooks/useContract'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport ActionColumn from '../ActionColumn'\nimport PointsLabel from './PointsLabel'\nimport AchievementTitle from '../AchievementTitle'\nimport AchievementAvatar from '../AchievementAvatar'\nimport AchievementDescription from '../AchievementDescription'\n\ninterface AchievementRowProps {\n  achievement: Achievement\n  onCollectSuccess?: (achievement: Achievement) => void\n}\n\nconst StyledAchievementRow = styled(Flex)`\n  border-bottom: 1px solid ${({ theme }) => theme.colors.borderColor};\n  padding-bottom: 16px;\n  padding-top: 16px;\n`\n\nconst Details = styled.div`\n  flex: 1;\n`\n\nconst Body = styled(Flex)`\n  flex-direction: column;\n  flex: 1;\n  margin-left: 8px;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    align-items: center;\n    flex-direction: row;\n  }\n`\n\nconst AchievementRow: React.FC<AchievementRowProps> = ({ achievement, onCollectSuccess }) => {\n  const [isCollecting, setIsCollecting] = useState(false)\n  const TranslateString = useI18n()\n  const pointCenterContract = usePointCenterIfoContract()\n  const { account } = useWallet()\n  const { toastError, toastSuccess } = useToast()\n\n  const handleCollectPoints = () => {\n    pointCenterContract.methods\n      .getPoints(achievement.address)\n      .send({ from: account })\n      .on('sending', () => {\n        setIsCollecting(true)\n      })\n      .on('receipt', () => {\n        setIsCollecting(false)\n        onCollectSuccess(achievement)\n        toastSuccess('Points Collected!')\n      })\n      .on('error', (error) => {\n        toastError('Error', error?.message)\n        setIsCollecting(false)\n      })\n  }\n\n  return (\n    <StyledAchievementRow>\n      <AchievementAvatar badge={achievement.badge} />\n      <Body>\n        <Details>\n          <AchievementTitle title={achievement.title} />\n          <AchievementDescription description={achievement.description} />\n        </Details>\n        <PointsLabel points={achievement.points} px={[0, null, null, '32px']} mb={['16px', null, null, 0]} />\n        <ActionColumn>\n          <Button\n            onClick={handleCollectPoints}\n            isLoading={isCollecting}\n            endIcon={isCollecting ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n            disabled={isCollecting}\n            variant=\"secondary\"\n          >\n            {TranslateString(999, 'Collect')}\n          </Button>\n        </ActionColumn>\n      </Body>\n    </StyledAchievementRow>\n  )\n}\n\nexport default AchievementRow\n","D:\\task159\\frontend\\src\\hooks\\ifo\\v2\\useGetWalletIfoData.ts",["1114"],"import { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { Ifo, PoolIds } from 'config/constants/types'\nimport { useERC20, useIfoV2Contract } from 'hooks/useContract'\nimport { useIfoAllowance } from 'hooks/useAllowance'\nimport useRefresh from 'hooks/useRefresh'\nimport makeBatchRequest from 'utils/makeBatchRequest'\nimport { getAddress } from 'utils/addressHelpers'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { WalletIfoState, WalletIfoData } from '../types'\n\n\n/**\n * Gets all data from an IFO related to a wallet\n */\nconst useGetWalletIfoData = (ifo: Ifo): WalletIfoData => {\n  const { fastRefresh } = useRefresh()\n  const [state, setState] = useState<WalletIfoState>({\n    poolBasic: {\n      amountTokenCommittedInLP: new BigNumber(0),\n      offeringAmountInToken: new BigNumber(0),\n      refundingAmountInLP: new BigNumber(0),\n      taxAmountInLP: new BigNumber(0),\n      hasClaimed: false,\n      isPendingTx: false,\n    },\n    poolUnlimited: {\n      amountTokenCommittedInLP: new BigNumber(0),\n      offeringAmountInToken: new BigNumber(0),\n      refundingAmountInLP: new BigNumber(0),\n      taxAmountInLP: new BigNumber(0),\n      hasClaimed: false,\n      isPendingTx: false,\n    },\n  })\n\n  const { address, currency } = ifo\n\n  // const { account } = useWeb3React()\n  const { account } = useWallet()\n  const contract = useIfoV2Contract(address)\n  const currencyContract = useERC20(getAddress(currency.address))\n  const allowance = useIfoAllowance(currencyContract, address)\n\n  const setPendingTx = (status: boolean, poolId: PoolIds) =>\n    setState((prevState) => ({\n      ...prevState,\n      [poolId]: {\n        ...prevState[poolId],\n        isPendingTx: status,\n      },\n    }))\n\n  const addUserContributedAmount = async (amount: BigNumber, poolId: PoolIds) => {\n    const [[offeringAmountInToken]] = await contract.methods\n      .viewUserOfferingAndRefundingAmountsForPools(account, [poolId === PoolIds.poolBasic ? 0 : 1])\n      .call()\n    setState((prevState) => ({\n      ...prevState,\n      [poolId]: {\n        ...prevState[poolId],\n        amountTokenCommittedInLP: prevState[poolId].amountTokenCommittedInLP.plus(amount),\n        offeringAmountInToken,\n      },\n    }))\n  }\n\n  const setIsClaimed = (poolId: PoolIds) => {\n    setState((prevState) => ({\n      ...prevState,\n      [poolId]: {\n        ...prevState[poolId],\n        hasClaimed: true,\n      },\n    }))\n  }\n\n  useEffect(() => {\n    const fetchIfoData = async () => {\n      const [userInfo, amounts] = await makeBatchRequest([\n        contract.methods.viewUserInfo(account, [0, 1]).call,\n        contract.methods.viewUserOfferingAndRefundingAmountsForPools(account, [0, 1]).call,\n      ])\n\n      setState((prevState) => ({\n        ...prevState,\n        poolBasic: {\n          ...prevState.poolBasic,\n          amountTokenCommittedInLP: new BigNumber(userInfo[0][0]),\n          offeringAmountInToken: new BigNumber(amounts[0][0]),\n          refundingAmountInLP: new BigNumber(amounts[0][1]),\n          taxAmountInLP: new BigNumber(amounts[0][2]),\n          hasClaimed: userInfo[1][0],\n        },\n        poolUnlimited: {\n          ...prevState.poolUnlimited,\n          amountTokenCommittedInLP: new BigNumber(userInfo[0][1]),\n          offeringAmountInToken: new BigNumber(amounts[1][0]),\n          refundingAmountInLP: new BigNumber(amounts[1][1]),\n          taxAmountInLP: new BigNumber(amounts[1][2]),\n          hasClaimed: userInfo[1][1],\n        },\n      }))\n    }\n\n    if (account) {\n      fetchIfoData()\n    }\n  }, [account, contract, fastRefresh])\n\n  return { ...state, allowance, contract, setPendingTx, addUserContributedAmount, setIsClaimed }\n}\n\nexport default useGetWalletIfoData\n","D:\\task159\\frontend\\src\\views\\Layer\\Farms\\components\\FarmCard\\ApyCalculatorModal.tsx",[],"D:\\task159\\frontend\\src\\views\\Layer\\Farms\\components\\FarmCard\\CardHeading.tsx",["1115","1116","1117","1118"],"import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from 'dfswap-ui'\nimport { CommunityTag, CoreTag, RiskTag, NoFeeTag } from 'components/Tags'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  risk?: number\n  depositFee?: number\n  farmImage?: string\n  tokenSymbol?: string\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 0.25rem;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  risk,\n  farmImage,\n  tokenSymbol,\n  depositFee,\n}) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol} width={64} height={64} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel}</Heading>\n        <Flex justifyContent=\"center\">\n          {depositFee === 0 ? <NoFeeTag /> : null}\n          {/* {isCommunityFarm ? <CommunityTag /> : <CoreTag />} */}\n          {/* <RiskTag risk={risk} /> */}\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","D:\\task159\\frontend\\src\\views\\Layer\\Farms\\components\\FarmCard\\DetailsSection.tsx",[],"D:\\task159\\frontend\\src\\views\\Layer\\Farms\\components\\FarmCard\\CardActionsContainer.tsx",["1119"],"import React, { useMemo, useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { provider } from 'web3-core'\nimport { getContract } from 'utils/erc20'\nimport { Button, Flex, Text } from 'dfswap-ui'\nimport { Farm3 } from 'state/types'\nimport { useFarm3FromPid, useFarm3FromSymbol, useFarm3User } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport UnlockButton from 'components/UnlockButton'\nimport { useApprove3 } from 'hooks/useApprove'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm3 {\n  apy?: BigNumber\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  ethereum?: provider\n  account?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account }) => {\n  const TranslateString = useI18n()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses, tokenAddresses, isTokenOnly, depositFeeBP } = useFarm3FromPid(farm.pid)\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarm3User(pid)\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const tokenAddress = tokenAddresses[process.env.REACT_APP_CHAIN_ID];\n  const lpName = farm.lpSymbol.toUpperCase()\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpContract = useMemo(() => {\n    if(isTokenOnly){\n      return getContract(ethereum as provider, tokenAddress);\n    }\n    return getContract(ethereum as provider, lpAddress);\n  }, [ethereum, lpAddress, tokenAddress, isTokenOnly])\n\n  const { onApprove } = useApprove3(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction stakedBalance={stakedBalance} tokenBalance={tokenBalance} tokenName={lpName} pid={pid} depositFeeBP={depositFeeBP} />\n    ) : (\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\n        {TranslateString(999, 'Approve Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          SENZU\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {lpName}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Staked')}\n        </Text>\n      </Flex>\n      {!account ? <UnlockButton mt=\"8px\" fullWidth /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","D:\\task159\\frontend\\src\\config\\constants\\farms.ts",[],"D:\\task159\\frontend\\src\\utils\\achievements.ts",[],"D:\\task159\\frontend\\src\\config\\constants\\campaigns.ts",[],"D:\\task159\\frontend\\src\\hooks\\ifo\\v2\\useGetPublicIfoData.ts",["1120","1121","1122"],"import BigNumber from 'bignumber.js'\nimport { BSC_BLOCK_TIME } from 'config'\nimport { Ifo, IfoStatus } from 'config/constants/types'\nimport { useBlock, useLpTokenPrice } from 'state/hooks'\nimport { useIfoV2Contract } from 'hooks/useContract'\nimport useRefresh from 'hooks/useRefresh'\nimport { useEffect, useState } from 'react'\nimport makeBatchRequest from 'utils/makeBatchRequest'\nimport Web3 from 'web3'\nimport { PublicIfoData, PoolCharacteristics } from '../types'\nimport { getStatus } from '../helpers'\n\n\n// https://github.com/pancakeswap/pancake-contracts/blob/master/projects/ifo/contracts/IFOV2.sol#L431\n// 1,000,000,000 / 100\nconst TAX_PRECISION = 10000000000\n\nconst formatPool = (pool) => ({\n  raisingAmountPool: new BigNumber(pool[0]),\n  offeringAmountPool: new BigNumber(pool[1]),\n  limitPerUserInLP: new BigNumber(pool[2]),\n  hasTax: pool[3],\n  totalAmountPool: new BigNumber(pool[4]),\n  sumTaxesOverflow: new BigNumber(pool[5]),\n})\n\n/**\n * Gets all public data of an IFO\n */\nconst useGetPublicIfoData = (ifo: Ifo): PublicIfoData => {\n  const { address, releaseBlockNumber } = ifo\n  const lpTokenPriceInUsd = useLpTokenPrice(ifo.currency.symbol)\n  const { fastRefresh } = useRefresh()\n\n  const [state, setState] = useState({\n    status: 'idle' as IfoStatus,\n    blocksRemaining: 0,\n    secondsUntilStart: 0,\n    progress: 5,\n    secondsUntilEnd: 0,\n    poolBasic: {\n      raisingAmountPool: new BigNumber(0),\n      offeringAmountPool: new BigNumber(0),\n      limitPerUserInLP: new BigNumber(0),\n      taxRate: 0,\n      totalAmountPool: new BigNumber(0),\n      sumTaxesOverflow: new BigNumber(0),\n    },\n    poolUnlimited: {\n      raisingAmountPool: new BigNumber(0),\n      offeringAmountPool: new BigNumber(0),\n      limitPerUserInLP: new BigNumber(0),\n      taxRate: 0,\n      totalAmountPool: new BigNumber(0),\n      sumTaxesOverflow: new BigNumber(0),\n    },\n    startBlockNum: 0,\n    endBlockNum: 0,\n    numberPoints: 0,\n  })\n  const { currentBlock } = useBlock()\n  \n  const contract = useIfoV2Contract(address)\n  const [ currentBlock1, setCurrentBlock1 ] = useState<number>(69999);\n\n  useEffect(() => {\n    const fetchProgress = async () => {\n      const [startBlock, endBlock, poolBasic, poolUnlimited, taxRate, numberPoints] = (await makeBatchRequest([\n        contract.methods.startBlock().call,\n        contract.methods.endBlock().call,\n        contract.methods.viewPoolInformation(0).call,\n        contract.methods.viewPoolInformation(1).call,\n        contract.methods.viewPoolTaxRateOverflow(1).call,\n        contract.methods.numberPoints().call,\n      ])) as [string, string, PoolCharacteristics, PoolCharacteristics, number, number]\n\n      const poolBasicFormatted = formatPool(poolBasic)\n      const poolUnlimitedFormatted = formatPool(poolUnlimited)\n\n      const web3 = new Web3('https://bsc-dataseed.binance.org')\n      await web3.eth.getBlockNumber().then(function (result){\n        setCurrentBlock1(result)\n        const startBlockNum = parseInt(startBlock, 10)\n        const endBlockNum = parseInt(endBlock, 10)\n        console.log(currentBlock1)\n        const status = getStatus(currentBlock1, startBlockNum, endBlockNum)\n        const totalBlocks = endBlockNum - startBlockNum\n        const blocksRemaining = endBlockNum - currentBlock1\n\n        // Calculate the total progress until finished or until start\n        const progress =\n        currentBlock1 > startBlockNum\n            ? ((currentBlock1 - startBlockNum) / totalBlocks) * 100\n            : ((currentBlock1 - releaseBlockNumber) / (startBlockNum - releaseBlockNumber)) * 100\n\n        setState((prev) => ({\n          ...prev,\n          secondsUntilEnd: blocksRemaining * BSC_BLOCK_TIME,\n          secondsUntilStart: (startBlockNum - currentBlock1) * BSC_BLOCK_TIME,\n          poolBasic: { ...poolBasicFormatted, taxRate: 0 },\n          poolUnlimited: { ...poolUnlimitedFormatted, taxRate: taxRate / TAX_PRECISION },\n          status,\n          progress,\n          blocksRemaining,\n          startBlockNum,\n          endBlockNum,\n          numberPoints,\n        }))\n      })\n      \n    }\n\n    fetchProgress()\n  }, [contract, currentBlock1, releaseBlockNumber, fastRefresh])\n\n  return { ...state, currencyPriceInUSD: lpTokenPriceInUsd }\n}\n\nexport default useGetPublicIfoData\n","D:\\task159\\frontend\\src\\utils\\makeBatchRequest.ts",[],"D:\\task159\\frontend\\src\\config\\index.ts",[],"D:\\task159\\frontend\\src\\config\\constants\\ifo.ts",[],"D:\\task159\\frontend\\src\\views\\Profile\\ProfileCreation\\contexts\\hook.ts",[],"D:\\task159\\frontend\\src\\views\\Profile\\components\\NextStepButton.tsx",[],"D:\\task159\\frontend\\src\\views\\Profile\\components\\SelectionCard.tsx",[],"D:\\task159\\frontend\\src\\hooks\\useContract.ts",[],"D:\\task159\\frontend\\src\\views\\Profile\\components\\ApproveConfirmButtons.tsx",[],"D:\\task159\\frontend\\src\\utils\\multicall.ts",[],"D:\\task159\\frontend\\src\\hooks\\ifo\\helpers.ts",[],"D:\\task159\\frontend\\src\\views\\Layer\\Farms\\components\\FarmCard\\HarvestAction.tsx",[],"D:\\task159\\frontend\\src\\views\\Layer\\Farms\\components\\FarmCard\\StakeAction.tsx",[],"D:\\task159\\frontend\\src\\config\\constants\\tokens.ts",[],"D:\\task159\\frontend\\src\\views\\Profile\\components\\AchievementRow\\PointsLabel.tsx",[],"D:\\task159\\frontend\\src\\views\\Profile\\components\\ActionColumn.tsx",[],"D:\\task159\\frontend\\src\\utils\\erc20.ts",[],"D:\\task159\\frontend\\src\\components\\FoldableText\\index.tsx",[],["1123","1124","1125","1126","1127"],"D:\\task159\\frontend\\src\\hooks\\useGetProfileCosts.ts",[],"D:\\task159\\frontend\\src\\views\\Profile\\components\\ConfirmProfileCreationModal.tsx",[],"D:\\task159\\frontend\\src\\views\\Ifos\\components\\IfoFoldableCard\\Timer.tsx",[],"D:\\task159\\frontend\\src\\views\\Ifos\\components\\IfoFoldableCard\\Achievement.tsx",[],"D:\\task159\\frontend\\src\\hooks\\useApproveConfirmTransaction.ts",["1128","1129"],"import { useEffect, useReducer, useRef } from 'react'\nimport { noop } from 'lodash'\nimport { useWeb3React } from '@web3-react/core'\nimport { useToast } from 'state/hooks'\nimport { useWalletModal } from 'dfswap-ui'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\n\ntype Web3Payload = Record<string, unknown> | null\n\ntype LoadingState = 'idle' | 'loading' | 'success' | 'fail'\n\ntype Action =\n  | { type: 'requires_approval' }\n  | { type: 'approve_sending' }\n  | { type: 'approve_receipt'; payload: Web3Payload }\n  | { type: 'approve_error'; payload: Web3Payload }\n  | { type: 'confirm_sending' }\n  | { type: 'confirm_receipt'; payload: Web3Payload }\n  | { type: 'confirm_error'; payload: Web3Payload }\n\ninterface State {\n  approvalState: LoadingState\n  approvalReceipt: Web3Payload\n  approvalError: Web3Payload\n  confirmState: LoadingState\n  confirmReceipt: Web3Payload\n  confirmError: Web3Payload\n}\n\nconst initialState: State = {\n  approvalState: 'idle',\n  approvalReceipt: null,\n  approvalError: null,\n  confirmState: 'idle',\n  confirmReceipt: null,\n  confirmError: null,\n}\n\nconst reducer = (state: State, actions: Action): State => {\n  switch (actions.type) {\n    case 'requires_approval':\n      return {\n        ...state,\n        approvalState: 'success',\n      }\n    case 'approve_sending':\n      return {\n        ...state,\n        approvalState: 'loading',\n      }\n    case 'approve_receipt':\n      return {\n        ...state,\n        approvalState: 'success',\n        approvalReceipt: actions.payload,\n      }\n    case 'approve_error':\n      return {\n        ...state,\n        approvalState: 'fail',\n        approvalError: actions.payload,\n      }\n    case 'confirm_sending':\n      return {\n        ...state,\n        confirmState: 'loading',\n      }\n    case 'confirm_receipt':\n      return {\n        ...state,\n        confirmState: 'success',\n        confirmReceipt: actions.payload,\n      }\n    case 'confirm_error':\n      return {\n        ...state,\n        confirmState: 'fail',\n        confirmError: actions.payload,\n      }\n    default:\n      return state\n  }\n}\n\ntype ContractHandler = () => any\n\ninterface ApproveConfirmTransaction {\n  onApprove: ContractHandler\n  onConfirm: ContractHandler\n  onRequiresApproval?: () => Promise<boolean>\n  onSuccess: (state: State) => void\n}\n\nconst useApproveConfirmTransaction = ({\n  onApprove,\n  onConfirm,\n  onRequiresApproval,\n  onSuccess = noop,\n}: ApproveConfirmTransaction) => {\n  // const { account } = useWeb3React()\n  const { account } = useWallet()\n  const [state, dispatch] = useReducer(reducer, initialState)\n  const handlePreApprove = useRef(onRequiresApproval)\n  const { toastError } = useToast()\n\n  // Check if approval is necessary, re-check if account changes\n  useEffect(() => {\n    if (account && handlePreApprove.current) {\n      handlePreApprove.current().then((result) => {\n        if (result) {\n          dispatch({ type: 'requires_approval' })\n        }\n      })\n    }\n  }, [account, handlePreApprove, dispatch])\n\n  return {\n    isApproving: state.approvalState === 'loading',\n    isApproved: state.approvalState === 'success',\n    isConfirming: state.confirmState === 'loading',\n    isConfirmed: state.confirmState === 'success',\n    approvalReceipt: state.approvalReceipt,\n    approvalError: state.approvalError,\n    confirmReceipt: state.confirmReceipt,\n    confirmError: state.confirmError,\n    handleApprove: () => {\n      onApprove()\n        .on('sending', () => {\n          dispatch({ type: 'approve_sending' })\n        })\n        .on('receipt', (payload: Web3Payload) => {\n          dispatch({ type: 'approve_receipt', payload })\n        })\n        .on('error', (error: Web3Payload) => {\n          dispatch({ type: 'approve_error', payload: error })\n          console.error('An error occurred approving transaction:', error)\n          toastError('An error occurred approving transaction')\n        })\n    },\n    handleConfirm: () => {\n      onConfirm()\n        .on('sending', () => {\n          dispatch({ type: 'confirm_sending' })\n        })\n        .on('receipt', (payload: Web3Payload) => {\n          dispatch({ type: 'confirm_receipt', payload })\n          onSuccess(state)\n        })\n        .on('error', (error: Web3Payload) => {\n          dispatch({ type: 'confirm_error', payload: error })\n          console.error('An error occurred confirming transaction:', error)\n          toastError('An error occurred confirming transaction')\n        })\n    },\n  }\n}\n\nexport default useApproveConfirmTransaction\n","D:\\task159\\frontend\\src\\hooks\\useHasCakeBalance.ts",[],"D:\\task159\\frontend\\src\\components\\ExpandableSectionButton\\index.ts",[],"D:\\task159\\frontend\\src\\utils\\compoundApyHelpers.ts",[],"D:\\task159\\frontend\\src\\hooks\\useAllowance.ts",[],"D:\\task159\\frontend\\src\\utils\\getLiquidityUrlPathParts.ts",[],"D:\\task159\\frontend\\src\\hooks\\useApprove.ts",[],"D:\\task159\\frontend\\src\\components\\Tags.tsx",[],"D:\\task159\\frontend\\src\\hooks\\useStake.ts",[],"D:\\task159\\frontend\\src\\views\\Layer\\Farms\\components\\DepositModal.tsx",[],"D:\\task159\\frontend\\src\\views\\Layer\\Farms\\components\\WithdrawModal.tsx",[],"D:\\task159\\frontend\\src\\hooks\\useWeb3.ts",[],"D:\\task159\\frontend\\src\\components\\ExpandableSectionButton\\ExpandableSectionButton.tsx",[],"D:\\task159\\frontend\\src\\config\\constants\\pools.ts",[],"D:\\task159\\frontend\\src\\config\\constants\\farms3.ts",[],"D:\\task159\\frontend\\src\\hooks\\useUnstake.ts",[],"D:\\task159\\frontend\\src\\hooks\\useHarvest.ts",[],"D:\\task159\\frontend\\src\\utils\\getTimePeriods.ts",[],"D:\\task159\\frontend\\src\\utils\\callHelpers.ts",[],"D:\\task159\\frontend\\src\\hooks\\ifo\\v1\\useGetPublicIfoData.ts",[],"D:\\task159\\frontend\\src\\views\\Ifos\\components\\IfoFoldableCard\\IfoPoolCard\\index.tsx",[],"D:\\task159\\frontend\\src\\components\\TokenInput\\index.ts",[],"D:\\task159\\frontend\\src\\components\\ModalActions\\index.ts",[],"D:\\task159\\frontend\\src\\views\\Ifos\\components\\IfoFoldableCard\\IfoPoolCard\\IfoCardDetails.tsx",[],"D:\\task159\\frontend\\src\\views\\Ifos\\components\\IfoFoldableCard\\IfoPoolCard\\IfoCardActions.tsx",["1130"],"import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Button } from 'dfswap-ui'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Link } from 'react-router-dom'\nimport { Ifo, PoolIds } from 'config/constants/types'\nimport { WalletIfoData, PublicIfoData } from 'hooks/ifo/types'\nimport UnlockButton from 'components/UnlockButton'\nimport ContributeButton from './ContributeButton'\nimport ClaimButton from './ClaimButton'\nimport { SkeletonCardActions } from './Skeletons'\n\n\ninterface Props {\n  poolId: PoolIds\n  ifo: Ifo\n  publicIfoData: PublicIfoData\n  walletIfoData: WalletIfoData\n  hasProfile: boolean\n  isLoading: boolean\n}\n\nconst IfoCardActions: React.FC<Props> = ({ poolId, ifo, publicIfoData, walletIfoData, hasProfile, isLoading }) => {\n  // const { account } = useWeb3React()\n  const { account } = useWallet()\n  const userPoolCharacteristics = walletIfoData[poolId]\n\n  if (isLoading) {\n    return <SkeletonCardActions />\n  }\n\n  if (!account) {\n    return <UnlockButton width=\"100%\" />\n  }\n\n  if (!hasProfile) {\n    return (\n      <Button as={Link} to=\"/profile\" width=\"100%\">\n        Activate your profile\n      </Button>\n    )\n  }\n\n  return (\n    <>\n      {publicIfoData.status === 'live' && (\n        <ContributeButton poolId={poolId} ifo={ifo} publicIfoData={publicIfoData} walletIfoData={walletIfoData} />\n      )}\n      {publicIfoData.status === 'finished' &&\n        !userPoolCharacteristics.hasClaimed &&\n        (userPoolCharacteristics.offeringAmountInToken.isGreaterThan(0) ||\n          userPoolCharacteristics.refundingAmountInLP.isGreaterThan(0)) && (\n          <ClaimButton poolId={poolId} walletIfoData={walletIfoData} />\n        )}\n    </>\n  )\n}\n\nexport default IfoCardActions\n","D:\\task159\\frontend\\src\\views\\Ifos\\components\\IfoFoldableCard\\IfoPoolCard\\IfoCardTokens.tsx",["1131"],"import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Text, Flex, Box, Image, CheckmarkCircleIcon, FlexProps, HelpIcon, useTooltip } from 'dfswap-ui'\nimport { Ifo, PoolIds } from 'config/constants/types'\nimport { PublicIfoData, WalletIfoData } from 'hooks/ifo/types'\nimport useI18n from 'hooks/useI18n'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport PercentageOfTotal from './PercentageOfTotal'\nimport { SkeletonCardTokens } from './Skeletons'\n\ninterface TokenSectionProps extends FlexProps {\n  img: string\n}\n\nconst TokenSection: React.FC<TokenSectionProps> = ({ img, children, ...props }) => {\n  return (\n    <Flex {...props}>\n      <Image src={img} width={32} height={32} mr=\"16px\" />\n      <div>{children}</div>\n    </Flex>\n  )\n}\n\nconst Label = (props) => <Text bold fontSize=\"12px\" color=\"secondary\" textTransform=\"uppercase\" {...props} />\n\nconst Value = (props) => <Text bold fontSize=\"20px\" style={{ wordBreak: 'break-all' }} {...props} />\n\ninterface IfoCardTokensProps {\n  poolId: PoolIds\n  ifo: Ifo\n  publicIfoData: PublicIfoData\n  walletIfoData: WalletIfoData\n  hasProfile: boolean\n  isLoading: boolean\n}\n\nconst IfoCardTokens: React.FC<IfoCardTokensProps> = ({\n  poolId,\n  ifo,\n  publicIfoData,\n  walletIfoData,\n  hasProfile,\n  isLoading,\n}) => {\n  // const { account } = useWeb3React()\n  const { account } = useWallet()\n  const TranslateString = useI18n()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    'Sorry, you didn’t contribute enough LP tokens to meet the minimum threshold. You didn’t buy anything in this sale, but you can still reclaim your LP tokens.',\n    'bottom',\n  )\n\n  const publicPoolCharacteristics = publicIfoData[poolId]\n  const userPoolCharacteristics = walletIfoData[poolId]\n\n  const { currency, token } = ifo\n  const { hasClaimed } = userPoolCharacteristics\n  const distributionRatio = ifo[poolId].distributionRatio * 100\n  const tokenImage = `/images/tokens/${ifo.token.symbol.toLowerCase()}.png`\n\n  const renderTokenSection = () => {\n    if (isLoading) {\n      return <SkeletonCardTokens />\n    }\n    if (account && !hasProfile) {\n      return (\n        <Text textAlign=\"center\">\n          {TranslateString(999, 'You need an active DBALL Profile to take part in an IFO!')}\n        </Text>\n      )\n    }\n    if (publicIfoData.status === 'coming_soon') {\n      return (\n        <>\n          <TokenSection img=\"/images/bunny-placeholder.svg\">\n            <Label>{TranslateString(999, 'On sale')}</Label>\n            <Value>{ifo[poolId].saleAmount}</Value>\n          </TokenSection>\n          <Text fontSize=\"14px\" color=\"textSubtle\" pl=\"48px\">{`${distributionRatio}% of total sale`}</Text>\n        </>\n      )\n    }\n    if (publicIfoData.status === 'live') {\n      return (\n        <>\n          <TokenSection img=\"/images/farms/dball-bnb.png\" mb=\"24px\">\n            <Label>{`Your ${currency.symbol} committed`}</Label>\n            <Value>{getBalanceNumber(userPoolCharacteristics.amountTokenCommittedInLP, currency.decimals)}</Value>\n            <PercentageOfTotal\n              userAmount={userPoolCharacteristics.amountTokenCommittedInLP}\n              totalAmount={publicPoolCharacteristics.totalAmountPool}\n            />\n          </TokenSection>\n          <TokenSection img={tokenImage}>\n            <Label>{`${token.symbol} to receive`}</Label>\n            <Value>{getBalanceNumber(userPoolCharacteristics.offeringAmountInToken, token.decimals)}</Value>\n          </TokenSection>\n        </>\n      )\n    }\n    if (publicIfoData.status === 'finished') {\n      return userPoolCharacteristics.amountTokenCommittedInLP.isEqualTo(0) ? (\n        <Flex flexDirection=\"column\" alignItems=\"center\">\n          <Image src=\"/images/bunny-placeholder.svg\" width={80} height={80} mb=\"16px\" />\n          <Text>{TranslateString(999, 'You didn’t participate in this sale!')}</Text>\n        </Flex>\n      ) : (\n        <>\n          <TokenSection img=\"/images/farms/dball-bnb.png\" mb=\"24px\">\n            <Label>{hasClaimed ? `Your ${currency.symbol} RECLAIMED` : `Your ${currency.symbol} TO RECLAIM`}</Label>\n            <Flex alignItems=\"center\">\n              <Value>{getBalanceNumber(userPoolCharacteristics.refundingAmountInLP, currency.decimals)}</Value>\n              {hasClaimed && <CheckmarkCircleIcon color=\"success\" ml=\"8px\" />}\n            </Flex>\n            <PercentageOfTotal\n              userAmount={userPoolCharacteristics.amountTokenCommittedInLP}\n              totalAmount={publicPoolCharacteristics.totalAmountPool}\n            />\n          </TokenSection>\n          <TokenSection img={tokenImage}>\n            <Label>{hasClaimed ? `${token.symbol} received` : `${token.symbol} to received`}</Label>\n            <Flex alignItems=\"center\">\n              <Value>{getBalanceNumber(userPoolCharacteristics.offeringAmountInToken, token.decimals)}</Value>\n              {!hasClaimed && userPoolCharacteristics.offeringAmountInToken.isEqualTo(0) && (\n                <div ref={targetRef} style={{ display: 'flex', marginLeft: '8px' }}>\n                  <HelpIcon />\n                </div>\n              )}\n              {hasClaimed && <CheckmarkCircleIcon color=\"success\" ml=\"8px\" />}\n            </Flex>\n          </TokenSection>\n        </>\n      )\n    }\n    return null\n  }\n  return (\n    <Box pb=\"24px\">\n      {tooltipVisible && tooltip}\n      {renderTokenSection()}\n    </Box>\n  )\n}\n\nexport default IfoCardTokens\n","D:\\task159\\frontend\\src\\views\\Layer\\Home\\components\\Divider.tsx",[],"D:\\task159\\frontend\\src\\state\\toasts\\index.ts",[],"D:\\task159\\frontend\\src\\views\\Layer\\Home\\components\\TotalValueLockedCard.tsx",["1132","1133"],"import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, Skeleton, Text } from 'dfswap-ui'\nimport useI18n from 'hooks/useI18n'\nimport { useGetStats } from 'hooks/api'\nimport { useTotalValue3 } from '../../../../state/hooks'\nimport CardValue from './CardValue'\n\nconst StyledTotalValueLockedCard = styled(Card)`\n  align-items: center;\n  display: flex;\n  flex: 1;\n`\n\nconst TotalValueLockedCard = () => {\n  const TranslateString = useI18n()\n  // const data = useGetStats()\n  const totalValue = useTotalValue3();\n  // const tvl = totalValue.toFixed(2);\n\n  return (\n    <StyledTotalValueLockedCard>\n      <CardBody>\n        <Heading size=\"lg\" mb=\"24px\">\n          {TranslateString(999, 'Total Value Locked (TVL)')}\n        </Heading>\n        <>\n          {/* <Heading size=\"xl\">{`$${tvl}`}</Heading> */}\n          {/* <Heading size=\"xl\"> */}\n            <CardValue value={totalValue.toNumber()} prefix=\"$\" decimals={2}/>\n          {/* </Heading> */}\n          <Text color=\"textSubtle\">Across Layer 1</Text>\n        </>\n      </CardBody>\n    </StyledTotalValueLockedCard>\n  )\n}\n\nexport default TotalValueLockedCard\n","D:\\task159\\frontend\\src\\views\\Layer\\Home\\components\\CakeStats.tsx",[],"D:\\task159\\frontend\\src\\components\\TokenInput\\TokenInput.tsx",[],"D:\\task159\\frontend\\src\\views\\Layer\\Home\\components\\FarmStakingCard.tsx",["1134"],"import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from 'dfswap-ui'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { useAllHarvest3 } from 'hooks/useHarvest'\nimport { useFarms3WithBalance } from 'hooks/useFarmsWithBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\nimport { useAllEarnings3 } from '../../../../hooks/useAllEarnings'\nimport { usePrice3CakeBusd } from '../../../../state/hooks'\nimport { getCake3Address } from '../../../../utils/addressHelpers'\nimport useTokenBalance from '../../../../hooks/useTokenBalance'\nimport { getBalanceNumber } from '../../../../utils/formatBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background-image: url('/images/egg/2a.png');\n  background-repeat: no-repeat;\n  background-position: top right;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWallet()\n  const TranslateString = useI18n()\n  const farmsWithBalance = useFarms3WithBalance()\n  const cakeBalance = getBalanceNumber(useTokenBalance(getCake3Address()))\n  const eggPrice = usePrice3CakeBusd().toNumber()\n  const earningsSum = farmsWithBalance.reduce((accum, farm) => {\n    return accum + new BigNumber(farm.balance).div(new BigNumber(10).pow(18)).toNumber()\n  }, 0)\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const { onReward } = useAllHarvest3(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(542, 'Farms & Staking')}\n        </Heading>\n        <CardImage src=\"/images/egg/2.png\" alt=\"cake logo\" width={64} height={64} />\n        <Block>\n          <Label>{TranslateString(544, 'SENZU to Harvest')}</Label>\n          <CakeHarvestBalance earningsSum={earningsSum}/>\n          <Label>~${(eggPrice * earningsSum).toFixed(2)}</Label>\n        </Block>\n        <Block>\n          <Label>{TranslateString(546, 'SENZU in Wallet')}</Label>\n          <CakeWalletBalance cakeBalance={cakeBalance} />\n          <Label>~${(eggPrice * cakeBalance).toFixed(2)}</Label>\n        </Block>\n        <Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              width=\"100%\"\n            >\n              {pendingTx\n                ? TranslateString(548, 'Collecting EGG')\n                : TranslateString(999, `Harvest all (${balancesWithValue.length})`)}\n            </Button>\n          ) : (\n            <UnlockButton fullWidth />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","D:\\task159\\frontend\\src\\views\\Pools\\components\\Coming.tsx",[],"D:\\task159\\frontend\\src\\views\\Pools\\components\\PoolCard.tsx",["1135"],"import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, IconButton, useModal, AddIcon, Image } from 'dfswap-ui'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport Label from 'components/Label'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport { useSousApprove } from 'hooks/useApprove'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useSmartStake } from 'hooks/useStake'\r\nimport { useSmartUnstake } from 'hooks/useUnstake'\r\nimport useBlock from 'hooks/useBlock'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useSmartChefHarvest } from 'hooks/useHarvest'\r\nimport Balance from 'components/Balance'\r\nimport { QuoteToken, PoolCategory } from 'config/constants/types'\r\nimport { Pool } from 'state/types'\r\nimport DepositModal from './DepositModal'\r\nimport WithdrawModal from './WithdrawModal'\r\nimport CardTitle from './CardTitle'\r\nimport Card from './Card'\r\nimport OldSyrupTitle from './OldSyrupTitle'\r\nimport HarvestButton from './HarvestButton'\r\nimport CardFooter from './CardFooter'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\ninterface PoolWithApy extends Pool {\r\n  apy: BigNumber\r\n}\r\n\r\ninterface HarvestProps {\r\n  pool: PoolWithApy\r\n}\r\n\r\nconst PoolCard: React.FC<HarvestProps> = ({ pool }) => {\r\n  const {\r\n    sousId,\r\n    image,\r\n    tokenName,\r\n    stakingTokenName,\r\n    stakingTokenAddress,\r\n    projectLink,\r\n    harvest,\r\n    apy,\r\n    tokenDecimals,\r\n    poolCategory,\r\n    totalStaked,\r\n    startBlock,\r\n    endBlock,\r\n    isFinished,\r\n    userData,\r\n    stakingLimit,\r\n    burnFee,\r\n  } = pool\r\n  // Pools using native BNB behave differently than pools using a token\r\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\r\n  const TranslateString = useI18n()\r\n  const stakingTokenContract = useERC20(stakingTokenAddress[CHAIN_ID])\r\n  const { account } = useWallet()\r\n  const block = useBlock()\r\n  const { onApprove } = useSousApprove(stakingTokenContract, sousId)\r\n  const { onStake } = useSmartStake(sousId, isBnbPool)\r\n  const { onUnstake } = useSmartUnstake(sousId)\r\n  const { onReward } = useSmartChefHarvest(sousId, isBnbPool)\r\n\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n\r\n  const allowance = new BigNumber(userData?.allowance || 0)\r\n  const stakingTokenBalance = new BigNumber(userData?.stakingTokenBalance || 0)\r\n  const stakedBalance = new BigNumber(userData?.stakedBalance || 0)\r\n  const earnings = new BigNumber(userData?.pendingReward || 0)\r\n\r\n  const blocksUntilStart = Math.max(startBlock - block, 0)\r\n  const blocksRemaining = Math.max(endBlock - block, 0)\r\n  const isOldSyrup = stakingTokenName === QuoteToken.SYRUP\r\n  const accountHasStakedBalance = stakedBalance?.toNumber() > 0\r\n  const needsApproval = !accountHasStakedBalance && !allowance.toNumber() && !isBnbPool\r\n  const isCardActive = isFinished && accountHasStakedBalance\r\n\r\n  const convertedLimit = new BigNumber(stakingLimit).multipliedBy(new BigNumber(10).pow(tokenDecimals))\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal\r\n      max={stakingLimit && stakingTokenBalance.isGreaterThan(convertedLimit) ? convertedLimit : stakingTokenBalance}\r\n      onConfirm={onStake}\r\n      tokenName={stakingLimit ? `${stakingTokenName} (${stakingLimit} max)` : stakingTokenName}\r\n      depositFeeBP={burnFee * 10}\r\n    />,\r\n  )\r\n\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={stakingTokenName} />,\r\n  )\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      const txHash = await onApprove()\r\n      // user rejected tx or didn't go thru\r\n      if (!txHash) {\r\n        setRequestedApproval(false)\r\n      }\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove, setRequestedApproval])\r\n\r\n  return (\r\n    <Card isActive={isCardActive} isFinished={isFinished}>\r\n      {isFinished && <PoolFinishedSash />}\r\n      <div style={{ padding: '24px' }}>\r\n        <CardTitle isFinished={isFinished}>\r\n          {isOldSyrup && '[OLD]'} {tokenName} {TranslateString(348, 'Pool')}\r\n        </CardTitle>\r\n        <div style={{ marginBottom: '8px', display: 'flex', alignItems: 'center' }}>\r\n          <div style={{ flex: 1 }}>\r\n            <Image src=\"/images/bnbpool/BNB.svg\" width={64} height={64} alt={tokenName} />\r\n          </div>\r\n          {account && harvest && !isOldSyrup && (\r\n            <HarvestButton\r\n              disabled={!earnings.toNumber() || pendingTx}\r\n              text={pendingTx ? 'Collecting' : 'Harvest'}\r\n              onClick={async () => {\r\n                setPendingTx(true)\r\n                await onReward()\r\n                setPendingTx(false)\r\n              }}\r\n            />\r\n          )}\r\n        </div>\r\n        {!isOldSyrup ? (\r\n          <BalanceAndCompound>\r\n            <Balance\r\n              value={getBalanceNumber(earnings, tokenDecimals)}\r\n              decimals={tokenName === 'BTCB' ? 5 : 3}\r\n              isDisabled={isFinished}\r\n            />\r\n          </BalanceAndCompound>\r\n        ) : (\r\n          <OldSyrupTitle hasBalance={accountHasStakedBalance} />\r\n        )}\r\n        <Label isFinished={isFinished} text={TranslateString(330, `${tokenName} earned`)} />\r\n        <StyledCardActions>\r\n          {!account && <UnlockButton />}\r\n          {account &&\r\n            (needsApproval && !isOldSyrup ? (\r\n              <div style={{ flex: 1 }}>\r\n                <Button disabled={isFinished || requestedApproval} onClick={handleApprove} width=\"100%\">\r\n                  {`Approve ${stakingTokenName}`}\r\n                </Button>\r\n              </div>\r\n            ) : (\r\n              <>\r\n                <Button\r\n                  disabled={stakedBalance.eq(new BigNumber(0)) || pendingTx}\r\n                  onClick={\r\n                    isOldSyrup\r\n                      ? async () => {\r\n                          setPendingTx(true)\r\n                          await onUnstake('0')\r\n                          setPendingTx(false)\r\n                        }\r\n                      : onPresentWithdraw\r\n                  }\r\n                >\r\n                  {`Unstake ${stakingTokenName}`}\r\n                </Button>\r\n                <StyledActionSpacer />\r\n                {!isOldSyrup && (\r\n                  <IconButton disabled={isFinished} onClick={onPresentDeposit}>\r\n                    <AddIcon color=\"background\" />\r\n                  </IconButton>\r\n                )}\r\n              </>\r\n            ))}\r\n        </StyledCardActions>\r\n        <StyledDetails>\r\n          <div style={{ flex: 1 }}>{TranslateString(736, 'APR')}:</div>\r\n          {isFinished || isOldSyrup || !apy || apy?.isNaN() || !apy?.isFinite() ? (\r\n            '-'\r\n          ) : (\r\n            <Balance fontSize=\"14px\" isDisabled={isFinished} value={apy?.toNumber()} decimals={2} unit=\"%\" />\r\n          )}\r\n        </StyledDetails>\r\n        <StyledDetails>\r\n          <div style={{ flex: 1 }}>\r\n            <span role=\"img\" aria-label={stakingTokenName}>\r\n              🐲{' '}\r\n            </span>\r\n            {TranslateString(384, 'Your Stake')}:\r\n          </div>\r\n          <Balance fontSize=\"14px\" isDisabled={isFinished} value={getBalanceNumber(stakedBalance)} />\r\n        </StyledDetails>\r\n        {burnFee > 0 ? (\r\n          <StyledDetails>\r\n            <div style={{ flex: 1 }}>\r\n              <span role=\"img\" aria-label={stakingTokenName}>\r\n                🔥{' '}\r\n              </span>\r\n              {TranslateString(10005, 'Burn fee')}:\r\n            </div>\r\n            <Balance fontSize=\"14px\" isDisabled={isFinished} value={burnFee / 10} decimals={1} unit=\"%\" />\r\n          </StyledDetails>\r\n        ) : (\r\n          ''\r\n        )}\r\n      </div>\r\n      <CardFooter\r\n        projectLink={projectLink}\r\n        totalStaked={totalStaked}\r\n        blocksRemaining={blocksRemaining}\r\n        isFinished={isFinished}\r\n        blocksUntilStart={blocksUntilStart}\r\n        poolCategory={poolCategory}\r\n        unit=\"blocks\"\r\n      />\r\n    </Card>\r\n  )\r\n}\r\n\r\nconst PoolFinishedSash = styled.div`\r\n  background-image: url('/images/pool-finished-sash.svg');\r\n  background-position: top right;\r\n  background-repeat: not-repeat;\r\n  height: 135px;\r\n  position: absolute;\r\n  right: -24px;\r\n  top: -24px;\r\n  width: 135px;\r\n`\r\n\r\nconst StyledCardActions = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin: 16px 0;\r\n  width: 100%;\r\n  box-sizing: border-box;\r\n`\r\n\r\nconst BalanceAndCompound = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  flex-direction: row;\r\n`\r\n\r\nconst StyledActionSpacer = styled.div`\r\n  height: ${(props) => props.theme.spacing[4]}px;\r\n  width: ${(props) => props.theme.spacing[4]}px;\r\n`\r\n\r\nconst StyledDetails = styled.div`\r\n  display: flex;\r\n  font-size: 14px;\r\n  padding: 3px 0;\r\n`\r\n\r\nexport default PoolCard\r\n","D:\\task159\\frontend\\src\\components\\ModalActions\\ModalActions.tsx",[],"D:\\task159\\frontend\\src\\views\\Farms\\components\\Divider.tsx",[],"D:\\task159\\frontend\\src\\views\\Ifos\\components\\IfoFoldableCard\\IfoPoolCard\\Skeletons.tsx",[],"D:\\task159\\frontend\\src\\views\\Farms\\components\\FarmCard\\FarmCard.tsx",["1136"],"import React, { useMemo, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes } from 'styled-components'\nimport { Flex, Text, Skeleton } from 'dfswap-ui'\nimport { communityFarms } from 'config/constants'\nimport { Farm } from 'state/types'\nimport { provider } from 'web3-core'\nimport useI18n from 'hooks/useI18n'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { QuoteToken } from 'config/constants/types'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\nconst RainbowLight = keyframes`\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n`\n\nconst StyledCardAccent = styled.div`\n  background: linear-gradient(45deg,\n  rgba(255, 0, 0, 1) 0%,\n  rgba(255, 154, 0, 1) 10%,\n  rgba(208, 222, 33, 1) 20%,\n  rgba(79, 220, 74, 1) 30%,\n  rgba(63, 218, 216, 1) 40%,\n  rgba(47, 201, 226, 1) 50%,\n  rgba(28, 127, 238, 1) 60%,\n  rgba(95, 21, 242, 1) 70%,\n  rgba(186, 12, 248, 1) 80%,\n  rgba(251, 7, 217, 1) 90%,\n  rgba(255, 0, 0, 1) 100%);\n  background-size: 300% 300%;\n  animation: ${RainbowLight} 2s linear infinite;\n  border-radius: 16px;\n  filter: blur(6px);\n  position: absolute;\n  top: -2px;\n  right: -2px;\n  bottom: -2px;\n  left: -2px;\n  z-index: -1;\n`\n\nconst FCard = styled.div`\n  align-self: baseline;\n  background: ${(props) => props.theme.card.background};\n  border-radius: 32px;\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n  position: relative;\n  text-align: center;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  senzuPrice?: BigNumber\n  bnbPrice?: BigNumber\n  ethereum?: provider\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, senzuPrice, bnbPrice, ethereum, account }) => {\n  const TranslateString = useI18n()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  // const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\n  // const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\n  const farmImage = farm.isTokenOnly ? farm.tokenSymbol.toLowerCase() : `${farm.tokenSymbol.toLowerCase()}-${farm.quoteTokenSymbol.toLowerCase()}`\n\n  const cake2Price: BigNumber = useMemo(() => {\n    return new BigNumber(22)\n  },[])\n\n  const totalValue: BigNumber = useMemo(() => {\n    if (!farm.lpTotalInQuoteToken) {\n      return null\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n      return cakePrice.times(farm.lpTotalInQuoteToken)\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.SENZU) {\n      return senzuPrice.times(farm.lpTotalInQuoteToken)\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE2) {\n      return cake2Price.times(farm.lpTotalInQuoteToken)\n    }\n\n    return farm.lpTotalInQuoteToken\n  }, [farm.lpTotalInQuoteToken, farm.quoteTokenSymbol, bnbPrice, cakePrice, senzuPrice, cake2Price])\n\n  const totalValueFormated = totalValue\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n\n  const lpLabel = farm.lpSymbol\n  const earnLabel = 'DF'\n\n  \n    const farmAPY = farm.apy && farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    })\n  \n    \n  \n\n  \n\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, risk } = farm\n\n  return (\n    <FCard>\n      {farm.tokenSymbol === 'DF' && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        risk={risk}\n        depositFee={farm.depositFeeBP}\n        unstakingFee={farm.unstakingFeeBP}\n        farmImage={farmImage}\n        tokenSymbol={farm.tokenSymbol}\n      />\n      {!removed && (\n        <Flex justifyContent='space-between' alignItems='center'>\n          <Text>{TranslateString(352, 'APR')}:</Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {farm.apy ? (\n              <>\n                <ApyButton\n                  lpLabel={lpLabel}\n                  quoteTokenAdresses={quoteTokenAdresses}\n                  quoteTokenSymbol={quoteTokenSymbol}\n                  tokenAddresses={tokenAddresses}\n                  cakePrice={cakePrice}\n                  apy={farm.apy}\n                />\n                {farmAPY}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )}\n      <Flex justifyContent='space-between'>\n        <Text>{TranslateString(318, 'Earn')}:</Text>\n        <Text bold>{earnLabel}</Text>\n      </Flex>\n      <Flex justifyContent='space-between'>\n        <Text style={{ fontSize: '24px' }}>{TranslateString(10001, 'Deposit Fee')}:</Text>\n        <Text bold style={{ fontSize: '24px' }}>{(farm.depositFeeBP / 100)}%</Text>\n      </Flex>\n      <Flex justifyContent='space-between'>\n        <Text style={{ fontSize: '24px' }}>{TranslateString(10011, 'Unstaking Fee')}:</Text>\n        <Text bold style={{ fontSize: '24px' }}>{(farm.unstakingFeeBP / 100)}%</Text>\n      </Flex>\n      <CardActionsContainer farm={farm} ethereum={ethereum} account={account} />\n      <Divider />\n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          isTokenOnly={farm.isTokenOnly}\n          bscScanAddress={\n            farm.isTokenOnly ?\n              `https://bscscan.com/token/${farm.tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n              :\n              `https://bscscan.com/token/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`\n          }\n          totalValueFormated={totalValueFormated}\n          lpLabel={lpLabel}\n          quoteTokenAdresses={quoteTokenAdresses}\n          quoteTokenSymbol={quoteTokenSymbol}\n          tokenAddresses={tokenAddresses}\n        />\n      </ExpandingWrapper>\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","D:\\task159\\frontend\\src\\views\\Ifos\\components\\IfoFoldableCard\\IfoPoolCard\\ClaimButton.tsx",["1137"],"import React from 'react'\nimport { AutoRenewIcon, Button } from 'dfswap-ui'\nimport { useWeb3React } from '@web3-react/core'\nimport { PoolIds } from 'config/constants/types'\nimport { WalletIfoData } from 'hooks/ifo/types'\nimport { useToast } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\n\ninterface Props {\n  poolId: PoolIds\n  walletIfoData: WalletIfoData\n}\n\nconst ClaimButton: React.FC<Props> = ({ poolId, walletIfoData }) => {\n  const userPoolCharacteristics = walletIfoData[poolId]\n  const TranslateString = useI18n()\n  // const { account } = useWeb3React()\n  const { account } = useWallet()\n  const { toastError, toastSuccess } = useToast()\n\n  const setPendingTx = (isPending: boolean) => walletIfoData.setPendingTx(isPending, poolId)\n\n  const handleClaim = async () => {\n    try {\n      setPendingTx(true)\n      await walletIfoData.contract.methods.harvestPool(poolId === PoolIds.poolBasic ? 0 : 1).send({ from: account })\n      walletIfoData.setIsClaimed(poolId)\n      toastSuccess('Success!', 'You have successfully claimed your rewards.')\n    } catch (error) {\n      toastError('Error', error?.message)\n      console.error(error)\n    } finally {\n      setPendingTx(false)\n    }\n  }\n\n  return (\n    <Button\n      onClick={handleClaim}\n      disabled={userPoolCharacteristics.isPendingTx}\n      width=\"100%\"\n      isLoading={userPoolCharacteristics.isPendingTx}\n      endIcon={userPoolCharacteristics.isPendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n    >\n      {TranslateString(999, 'Claim')}\n    </Button>\n  )\n}\n\nexport default ClaimButton\n","D:\\task159\\frontend\\src\\views\\Ifos\\components\\IfoFoldableCard\\IfoPoolCard\\PercentageOfTotal.tsx",[],"D:\\task159\\frontend\\src\\views\\Ifos\\components\\IfoFoldableCard\\IfoPoolCard\\ContributeButton.tsx",[],"D:\\task159\\frontend\\src\\components\\layout\\Flex.tsx",[],"D:\\task159\\frontend\\src\\hooks\\useBlock.ts",[],"D:\\task159\\frontend\\src\\views\\Pools\\components\\PoolTabButtons\\index.tsx",[],"D:\\task159\\frontend\\src\\views\\Farms\\components\\FarmTabButtons\\index.tsx",[],"D:\\task159\\frontend\\src\\views\\Layer\\Home\\components\\CardValue.tsx",[],"D:\\task159\\frontend\\src\\views\\Pools\\components\\Card.tsx",[],"D:\\task159\\frontend\\src\\views\\Layer\\Home\\components\\CakeWalletBalance.tsx",["1138","1139","1140"],"import React from 'react'\nimport { Text } from 'dfswap-ui'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCake3Address } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport CardValue from './CardValue'\n\nconst CakeWalletBalance = ({cakeBalance}) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '36px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={cakeBalance} fontSize=\"24px\" />\n}\n\nexport default CakeWalletBalance\n","D:\\task159\\frontend\\src\\views\\Pools\\components\\CardFooter.tsx",[],"D:\\task159\\frontend\\src\\views\\Pools\\components\\HarvestButton.tsx",[],"D:\\task159\\frontend\\src\\views\\Pools\\components\\OldSyrupTitle.tsx",[],"D:\\task159\\frontend\\src\\views\\Pools\\components\\CardTitle.tsx",[],"D:\\task159\\frontend\\src\\views\\Pools\\components\\WithdrawModal.tsx",[],"D:\\task159\\frontend\\src\\views\\Pools\\components\\DepositModal.tsx",[],"D:\\task159\\frontend\\src\\views\\Farms\\components\\FarmCard\\ApyButton.tsx",[],"D:\\task159\\frontend\\src\\components\\CardNav\\index.tsx",[],"D:\\task159\\frontend\\src\\views\\Ifos\\components\\IfoFoldableCard\\IfoPoolCard\\GetLpModal.tsx",[],"D:\\task159\\frontend\\src\\views\\Ifos\\components\\IfoFoldableCard\\IfoPoolCard\\ContributeModal.tsx",["1141"],"import React, { useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { Modal, ModalBody, Text, Image, Button, BalanceInput, Flex } from 'dfswap-ui'\nimport { ethers } from 'ethers'\nimport { PoolIds, Ifo } from 'config/constants/types'\nimport { WalletIfoData, PublicIfoData } from 'hooks/ifo/types'\nimport useI18n from 'hooks/useI18n'\nimport { getBalanceNumber, formatNumber } from 'utils/formatBalance'\nimport { getAddress } from 'utils/addressHelpers'\nimport ApproveConfirmButtons from 'views/Profile/components/ApproveConfirmButtons'\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\nimport { useERC20 } from 'hooks/useContract'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\n\ninterface Props {\n  poolId: PoolIds\n  ifo: Ifo\n  publicIfoData: PublicIfoData\n  walletIfoData: WalletIfoData\n  userCurrencyBalance: BigNumber\n  onSuccess: (amount: BigNumber) => void\n  onDismiss?: () => void\n}\n\nconst multiplierValues = [0.1, 0.25, 0.5, 0.75, 1]\n\nconst ContributeModal: React.FC<Props> = ({\n  poolId,\n  ifo,\n  publicIfoData,\n  walletIfoData,\n  userCurrencyBalance,\n  onDismiss,\n  onSuccess,\n}) => {\n  const publicPoolCharacteristics = publicIfoData[poolId]\n  const userPoolCharacteristics = walletIfoData[poolId]\n\n  const { currency } = ifo\n  const { limitPerUserInLP } = publicPoolCharacteristics\n  const { amountTokenCommittedInLP } = userPoolCharacteristics\n  const { contract } = walletIfoData\n  const [value, setValue] = useState('')\n  // const { account } = useWeb3React()\n  const { account } = useWallet()\n  const raisingTokenContract = useERC20(getAddress(currency.address))\n  const TranslateString = useI18n()\n  const valueWithTokenDecimals = new BigNumber(value).times(new BigNumber(10).pow(18))\n\n  const {\n    isApproving,\n    isApproved,\n    isConfirmed,\n    isConfirming,\n    handleApprove,\n    handleConfirm,\n  } = useApproveConfirmTransaction({\n    onRequiresApproval: async () => {\n      try {\n        const response = await raisingTokenContract.methods.allowance(account, contract.options.address).call()\n        const currentAllowance = new BigNumber(response)\n        return currentAllowance.gt(0)\n      } catch (error) {\n        return false\n      }\n    },\n    onApprove: () => {\n      return raisingTokenContract.methods\n        .approve(contract.options.address, ethers.constants.MaxUint256)\n        .send({ from: account })\n    },\n    onConfirm: () => {\n      return contract.methods\n        .depositPool(valueWithTokenDecimals.toString(), poolId === PoolIds.poolBasic ? 0 : 1)\n        .send({ from: account })\n    },\n    onSuccess: async () => {\n      onDismiss()\n      onSuccess(valueWithTokenDecimals)\n    },\n  })\n\n  const maximumLpCommitable = (() => {\n    if (limitPerUserInLP.isGreaterThan(0)) {\n      return limitPerUserInLP.minus(amountTokenCommittedInLP).isLessThanOrEqualTo(userCurrencyBalance)\n        ? limitPerUserInLP\n        : userCurrencyBalance\n    }\n    return userCurrencyBalance\n  })()\n\n  return (\n    <Modal title={`Contribute ${currency.symbol}`} onDismiss={onDismiss}>\n      <ModalBody maxWidth=\"320px\">\n        {limitPerUserInLP.isGreaterThan(0) && (\n          <Flex justifyContent=\"space-between\" mb=\"16px\">\n            <Text>{TranslateString(999, 'Max. LP token entry')}</Text>\n            <Text>{getBalanceNumber(limitPerUserInLP, currency.decimals)}</Text>\n          </Flex>\n        )}\n        <Flex justifyContent=\"space-between\" mb=\"8px\">\n          <Text>{TranslateString(999, 'Commit:')}</Text>\n          <Flex flexGrow={1} justifyContent=\"flex-end\">\n            <Image\n              src={`/images/farms/${currency.symbol.split(' ')[0].toLocaleLowerCase()}.png`}\n              width={24}\n              height={24}\n            />\n            <Text>{currency.symbol}</Text>\n          </Flex>\n        </Flex>\n        <BalanceInput\n          value={value}\n          currencyValue={publicIfoData.currencyPriceInUSD.times(value || 0).toFixed(2)}\n          onChange={(e) => setValue(e.currentTarget.value)}\n          isWarning={valueWithTokenDecimals.isGreaterThan(maximumLpCommitable)}\n          mb=\"8px\"\n        />\n        <Text color=\"textSubtle\" textAlign=\"right\" fontSize=\"12px\" mb=\"16px\">\n          Balance: {formatNumber(getBalanceNumber(userCurrencyBalance, currency.decimals), 2, 5)}\n        </Text>\n        <Flex justifyContent=\"space-between\" mb=\"16px\">\n          {multiplierValues.map((multiplierValue, index) => (\n            <Button\n              key={multiplierValue}\n              scale=\"xs\"\n              variant=\"tertiary\"\n              onClick={() => setValue(getBalanceNumber(maximumLpCommitable.times(multiplierValue)).toString())}\n              mr={index < multiplierValues.length - 1 ? '8px' : 0}\n            >\n              {TranslateString(999, `${multiplierValue * 100}%`)}\n            </Button>\n          ))}\n        </Flex>\n        <Text color=\"textSubtle\" fontSize=\"12px\" mb=\"24px\">\n          {TranslateString(\n            999,\n            'If you don’t commit enough LP tokens, you may not receive any IFO tokens at all and will only receive a full refund of your LP tokens.',\n          )}\n        </Text>\n        <ApproveConfirmButtons\n          isApproveDisabled={isConfirmed || isConfirming || isApproved}\n          isApproving={isApproving}\n          isConfirmDisabled={\n            !isApproved || isConfirmed || valueWithTokenDecimals.isNaN() || valueWithTokenDecimals.eq(0)\n          }\n          isConfirming={isConfirming}\n          onApprove={handleApprove}\n          onConfirm={handleConfirm}\n        />\n      </ModalBody>\n    </Modal>\n  )\n}\n\nexport default ContributeModal\n","D:\\task159\\frontend\\src\\views\\Farms\\components\\FarmCard\\CardActionsContainer.tsx",["1142"],"import React, { useMemo, useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { provider } from 'web3-core'\nimport { getContract } from 'utils/erc20'\nimport { Button, Flex, Text } from 'dfswap-ui'\nimport { Farm } from 'state/types'\nimport { useFarmFromPid, useFarmFromSymbol, useFarmUser } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport UnlockButton from 'components/UnlockButton'\nimport { useApprove } from 'hooks/useApprove'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  ethereum?: provider\n  account?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account }) => {\n  const TranslateString = useI18n()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses, tokenAddresses, isTokenOnly, depositFeeBP , unstakingFeeBP } = useFarmFromPid(farm.pid)\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const tokenAddress = tokenAddresses[process.env.REACT_APP_CHAIN_ID];\n  const lpName = farm.lpSymbol.toUpperCase()\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpContract = useMemo(() => {\n    if(isTokenOnly){\n      return getContract(ethereum as provider, tokenAddress);\n    }\n    return getContract(ethereum as provider, lpAddress);\n  }, [ethereum, lpAddress, tokenAddress, isTokenOnly])\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={lpName}\n        pid={pid}\n        depositFeeBP={depositFeeBP}\n        unstakingFeeBP={unstakingFeeBP}\n      />\n    ) : (\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\n        {TranslateString(999, 'Approve Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n        DF\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {lpName}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Staked')}\n        </Text>\n      </Flex>\n      {!account ? <UnlockButton mt=\"8px\" fullWidth /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","D:\\task159\\frontend\\src\\views\\Farms\\components\\FarmCard\\CardHeading.tsx",["1143","1144","1145","1146","1147","1148","1149"],"import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from 'dfswap-ui'\nimport { CommunityTag, CoreTag, RiskTag, NoFeeTag } from 'components/Tags'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  risk?: number\n  depositFee?: number\n  unstakingFee?: number\n  farmImage?: string\n  tokenSymbol?: string\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 0.25rem;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  risk,\n  farmImage,\n  tokenSymbol,\n  depositFee,\n  unstakingFee,\n}) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol} width={64} height={64} />\n      \n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel}</Heading>\n        <Flex justifyContent=\"center\">\n          {/* {depositFee === 0 ? <NoFeeTag /> : null} */}\n          {/* {isCommunityFarm ? <CommunityTag /> : <CoreTag />} */}\n          {/* <RiskTag risk={risk} /> */}\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","D:\\task159\\frontend\\src\\views\\Farms\\components\\FarmCard\\DetailsSection.tsx",[],"D:\\task159\\frontend\\src\\components\\Input\\index.ts",[],"D:\\task159\\frontend\\src\\components\\Spacer\\index.ts",[],"D:\\task159\\frontend\\src\\components\\Balance.tsx",[],"D:\\task159\\frontend\\src\\views\\Farms\\components\\FarmCard\\ApyCalculatorModal.tsx",["1150"],"import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Modal, Text, LinkExternal, Flex } from 'dfswap-ui'\nimport useI18n from 'hooks/useI18n'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\nimport { Address, QuoteToken } from 'config/constants/types'\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 24px;\n`\n\nconst GridItem = styled.div`\n  margin-bottom: '10px';\n`\n\nconst Description = styled(Text)`\n  max-width: 320px;\n  margin-bottom: 28px;\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  cakePrice,\n  apy,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\n\n  \n  const farmApy = apy.times(new BigNumber(100)).toNumber()\n  \n  \n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\n\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy, cakePrice })\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy, cakePrice })\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy, cakePrice })\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 365, farmApy, cakePrice })\n\n  return (\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\n      <Grid>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'Timeframe')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'ROI')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            DF per $1000\n          </Text>\n        </GridItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>1d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand1D}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>7d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand7D}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>30d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand30D}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem>\n          <Text>365d(APY)</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand365D}</Text>\n        </GridItem>\n      </Grid>\n      <Description fontSize=\"12px\" color=\"textSubtle\">\n        {TranslateString(\n          999,\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\n        )}\n      </Description>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={`https://exchange.pancakeswap.finance/#/add/${liquidityUrlPathParts}`}>\n          {TranslateString(999, 'Get')} {lpLabel}\n        </LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","D:\\task159\\frontend\\src\\views\\Layer\\Home\\components\\CakeHarvestBalance.tsx",["1151","1152"],"import React from 'react'\nimport { Text } from 'dfswap-ui'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport CardValue from './CardValue'\n\nconst CakeHarvestBalance = ({earningsSum}) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '60px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={earningsSum} />\n}\n\nexport default CakeHarvestBalance\n","D:\\task159\\frontend\\src\\views\\Farms\\components\\FarmCard\\HarvestAction.tsx",[],"D:\\task159\\frontend\\src\\views\\Farms\\components\\FarmCard\\StakeAction.tsx",[],"D:\\task159\\frontend\\src\\components\\Input\\Input.tsx",[],"D:\\task159\\frontend\\src\\components\\Spacer\\Spacer.tsx",[],"D:\\task159\\frontend\\src\\components\\Label\\index.ts",[],"D:\\task159\\frontend\\src\\components\\TranslatedText\\index.ts",[],"D:\\task159\\frontend\\src\\hooks\\useFarmsWithBalance.ts",[],"D:\\task159\\frontend\\src\\views\\Home\\components\\TwitterCard.tsx",["1153","1154","1155","1156","1157","1158","1159","1160","1161"],"import React from 'react'\nimport { Card, CardBody, Heading, Text } from 'dfswap-ui'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { Timeline } from 'react-twitter-widgets'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms } from '../../../state/hooks'\n\nconst StyledTwitterCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst TwitterCard = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <StyledTwitterCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(10003, 'Announcements')}\n        </Heading>\n        <Timeline\n          dataSource={{\n            sourceType: 'profile',\n            screenName: 'dragonballdefi'\n          }}\n          options={{\n            height: '300',\n            chrome: \"noheader, nofooter\",\n            width: \"400\"\n          }}\n        />\n      </CardBody>\n    </StyledTwitterCard>\n  )\n}\n\nexport default TwitterCard\n","D:\\task159\\frontend\\src\\views\\Home\\components\\TotalValueLockedCard.tsx",["1162","1163"],"import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, Skeleton, Text } from 'dfswap-ui'\nimport useI18n from 'hooks/useI18n'\nimport { useGetStats } from 'hooks/api'\nimport { useTotalValue } from '../../../state/hooks'\nimport CardValue from './CardValue'\n\nconst StyledTotalValueLockedCard = styled(Card)`\n  align-items: center;\n  display: flex;\n  flex: 1;\n`\n\nconst TotalValueLockedCard = () => {\n  const TranslateString = useI18n()\n  // const data = useGetStats()\n  const totalValue = useTotalValue();\n  // const tvl = totalValue.toFixed(2);\n\n  return (\n    <StyledTotalValueLockedCard>\n      <CardBody>\n        <Heading size=\"lg\" mb=\"24px\">\n          {TranslateString(999, 'Total Value Locked (TVL)')}\n        </Heading>\n        <>\n          {/* <Heading size=\"xl\">{`$${tvl}`}</Heading> */}\n          {/* <Heading size=\"xl\"> */}\n            <CardValue value={totalValue.toNumber()} prefix=\"$\" decimals={2}/>\n          {/* </Heading> */}\n          <Text color=\"textSubtle\">{TranslateString(999, 'Across all Farms and Pools')}</Text>\n        </>\n      </CardBody>\n    </StyledTotalValueLockedCard>\n  )\n}\n\nexport default TotalValueLockedCard\n","D:\\task159\\frontend\\src\\views\\Home\\components\\FarmStakingCard.tsx",["1164"],"import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from 'dfswap-ui'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\nimport useAllEarnings from '../../../hooks/useAllEarnings'\nimport { usePriceCakeBusd } from '../../../state/hooks'\nimport { getCakeAddress } from '../../../utils/addressHelpers'\nimport useTokenBalance from '../../../hooks/useTokenBalance'\nimport { getBalanceNumber } from '../../../utils/formatBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background-image: url('/images/egg/2a.png');\n  background-repeat: no-repeat;\n  background-position: top right;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWallet()\n  const TranslateString = useI18n()\n  const farmsWithBalance = useFarmsWithBalance()\n  const cakeBalance = getBalanceNumber(useTokenBalance(getCakeAddress()))\n  const eggPrice = usePriceCakeBusd().toNumber()\n  const earningsSum = farmsWithBalance.reduce((accum, farm) => {\n    return accum + new BigNumber(farm.balance).div(new BigNumber(10).pow(18)).toNumber()\n  }, 0)\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(542, 'Farms & Staking')}\n        </Heading>\n        <CardImage src=\"/images/egg/2.png\" alt=\"cake logo\" width={64} height={64} />\n        <Block>\n          <Label>DF to Harvest</Label>\n          <CakeHarvestBalance earningsSum={earningsSum}/>\n          <Label>~${(eggPrice * earningsSum).toFixed(2)}</Label>\n        </Block>\n        <Block>\n          <Label>DF in Wallet</Label>\n          <CakeWalletBalance cakeBalance={cakeBalance} />\n          <Label>~${(eggPrice * cakeBalance).toFixed(2)}</Label>\n        </Block>\n        <Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              width=\"100%\"\n            >\n              {pendingTx\n                ? TranslateString(548, 'Collecting DF')\n                : TranslateString(999, `Harvest all (${balancesWithValue.length})`)}\n            </Button>\n          ) : (\n            <UnlockButton fullWidth />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","D:\\task159\\frontend\\src\\views\\Home\\components\\CakeStats.tsx",[],"D:\\task159\\frontend\\src\\views\\Farms\\components\\WithdrawModal.tsx",[],"D:\\task159\\frontend\\src\\views\\Farms\\components\\DepositModal.tsx",[],"D:\\task159\\frontend\\src\\components\\Label\\Label.tsx",[],"D:\\task159\\frontend\\src\\state\\pools\\index.ts",[],"D:\\task159\\frontend\\src\\state\\farms3\\index.ts",[],"D:\\task159\\frontend\\src\\components\\TranslatedText\\TranslatedText.tsx",[],"D:\\task159\\frontend\\src\\views\\Home\\components\\CardValue.tsx",[],"D:\\task159\\frontend\\src\\views\\Home\\components\\CakeHarvestBalance.tsx",["1165","1166"],"D:\\task159\\frontend\\src\\views\\Home\\components\\CakeWalletBalance.tsx",["1167","1168","1169"],"import React from 'react'\nimport { Text } from 'dfswap-ui'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport CardValue from './CardValue'\n\nconst CakeWalletBalance = ({cakeBalance}) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '36px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={cakeBalance} fontSize=\"24px\" />\n}\n\nexport default CakeWalletBalance\n","D:\\task159\\frontend\\src\\state\\pools\\fetchPoolsUser.ts",[],"D:\\task159\\frontend\\src\\state\\farms3\\fetchFarmUser3.ts",[],"D:\\task159\\frontend\\src\\state\\farms3\\fetchFarms3.ts",["1170"],"import BigNumber from 'bignumber.js'\nimport erc20 from 'config/abi/erc20.json'\nimport masterchef3ABI from 'config/abi/masterchef3.json'\nimport multicall from 'utils/multicall'\nimport { getMasterChef3Address } from 'utils/addressHelpers'\nimport farms3Config from 'config/constants/farms3'\nimport { QuoteToken } from '../../config/constants/types'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nconst fetchFarms3 = async () => {\n  const data = await Promise.all(\n    farms3Config.map(async (farm3Config) => {\n      const lpAdress = farm3Config.lpAddresses[CHAIN_ID]\n      const calls = [\n        // Balance of token in the LP contract\n        {\n          address: farm3Config.tokenAddresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of quote token on LP contract\n        {\n          address: farm3Config.quoteTokenAdresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of LP tokens in the master chef contract\n        {\n          address: farm3Config.isTokenOnly ? farm3Config.tokenAddresses[CHAIN_ID] : lpAdress,\n          name: 'balanceOf',\n          params: [getMasterChef3Address()],\n        },\n        // Total supply of LP tokens\n        {\n          address: lpAdress,\n          name: 'totalSupply',\n        },\n        // Token decimals\n        {\n          address: farm3Config.tokenAddresses[CHAIN_ID],\n          name: 'decimals',\n        },\n        // Quote token decimals\n        {\n          address: farm3Config.quoteTokenAdresses[CHAIN_ID],\n          name: 'decimals',\n        },\n      ]\n\n      const [\n        tokenBalanceLP,\n        quoteTokenBlanceLP,\n        lpTokenBalanceMC,\n        lpTotalSupply,\n        tokenDecimals,\n        quoteTokenDecimals\n      ] = await multicall(erc20, calls)\n\n      let tokenAmount;\n      let lpTotalInQuoteToken;\n      let tokenPriceVsQuote;\n      if(farm3Config.isTokenOnly){\n        tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(tokenDecimals));\n        if(farm3Config.tokenSymbol === QuoteToken.BUSD && farm3Config.quoteTokenSymbol === QuoteToken.BUSD){\n          tokenPriceVsQuote = new BigNumber(1);\n        }else{\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\n        }\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote);\n      }else{\n        // Ratio in % a LP tokens that are in staking, vs the total number in circulation\n        const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\n\n        // Total value in staking in quote token value\n        lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(18))\n          .times(new BigNumber(2))\n          .times(lpTokenRatio)\n\n        // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\n        tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\n        const quoteTokenAmount = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\n          .times(lpTokenRatio)\n\n        if(tokenAmount.comparedTo(0) > 0){\n          tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount);\n        }else{\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\n        }\n      }\n\n      const [info, totalAllocPoint, senzuPerBlock] = await multicall(masterchef3ABI, [\n        {\n          address: getMasterChef3Address(),\n          name: 'poolInfo',\n          params: [farm3Config.pid],\n        },\n        {\n          address: getMasterChef3Address(),\n          name: 'totalAllocPoint',\n        },\n        {\n          address: getMasterChef3Address(),\n          name: 'senzuPerBlock',\n        },\n      ])\n\n      const allocPoint = new BigNumber(info.allocPoint._hex)\n      const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint))\n\n      return {\n        ...farm3Config,\n        tokenAmount: tokenAmount.toJSON(),\n        // quoteTokenAmount: quoteTokenAmount,\n        lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\n        tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\n        poolWeight: poolWeight.toNumber(),\n        multiplier: `${allocPoint.div(100).toString()}X`,\n        depositFeeBP: info.depositFeeBP,\n        senzuPerBlock: new BigNumber(senzuPerBlock).toNumber(),\n      }\n      console.log(\n        farm3Config,\n        tokenAmount,\n        lpTotalInQuoteToken,\n        tokenPriceVsQuote,\n        poolWeight,\n        senzuPerBlock,\n      )\n    }),\n  )\n  return data\n}\n\nexport default fetchFarms3\n","D:\\task159\\frontend\\src\\state\\pools\\fetchPools.ts",[],{"ruleId":"1171","replacedBy":"1172"},{"ruleId":"1173","replacedBy":"1174"},{"ruleId":"1175","replacedBy":"1176"},{"ruleId":"1177","replacedBy":"1178"},{"ruleId":"1179","replacedBy":"1180"},{"ruleId":"1181","severity":1,"message":"1182","line":14,"column":4,"nodeType":"1183","messageId":"1184","endLine":14,"endColumn":15},{"ruleId":"1185","severity":1,"message":"1186","line":2,"column":8,"nodeType":"1187","messageId":"1188","endLine":2,"endColumn":14},{"ruleId":"1185","severity":1,"message":"1189","line":4,"column":10,"nodeType":"1187","messageId":"1188","endLine":4,"endColumn":22},{"ruleId":"1185","severity":1,"message":"1190","line":27,"column":7,"nodeType":"1187","messageId":"1188","endLine":27,"endColumn":15},{"ruleId":"1185","severity":1,"message":"1191","line":6,"column":47,"nodeType":"1187","messageId":"1188","endLine":6,"endColumn":57},{"ruleId":"1185","severity":1,"message":"1189","line":3,"column":10,"nodeType":"1187","messageId":"1188","endLine":3,"endColumn":22},{"ruleId":"1185","severity":1,"message":"1192","line":33,"column":7,"nodeType":"1187","messageId":"1188","endLine":33,"endColumn":43},{"ruleId":"1185","severity":1,"message":"1193","line":56,"column":9,"nodeType":"1187","messageId":"1188","endLine":56,"endColumn":24},{"ruleId":"1185","severity":1,"message":"1194","line":1,"column":51,"nodeType":"1187","messageId":"1188","endLine":1,"endColumn":58},{"ruleId":"1185","severity":1,"message":"1195","line":7,"column":10,"nodeType":"1187","messageId":"1188","endLine":7,"endColumn":15},{"ruleId":"1185","severity":1,"message":"1196","line":8,"column":27,"nodeType":"1187","messageId":"1188","endLine":8,"endColumn":41},{"ruleId":"1185","severity":1,"message":"1197","line":8,"column":43,"nodeType":"1187","messageId":"1188","endLine":8,"endColumn":56},{"ruleId":"1185","severity":1,"message":"1198","line":17,"column":8,"nodeType":"1187","messageId":"1188","endLine":17,"endColumn":22},{"ruleId":"1185","severity":1,"message":"1193","line":26,"column":9,"nodeType":"1187","messageId":"1188","endLine":26,"endColumn":24},{"ruleId":"1185","severity":1,"message":"1199","line":42,"column":22,"nodeType":"1187","messageId":"1188","endLine":42,"endColumn":35},{"ruleId":"1185","severity":1,"message":"1200","line":3,"column":19,"nodeType":"1187","messageId":"1188","endLine":3,"endColumn":23},{"ruleId":"1185","severity":1,"message":"1201","line":6,"column":8,"nodeType":"1187","messageId":"1188","endLine":6,"endColumn":23},{"ruleId":"1185","severity":1,"message":"1202","line":7,"column":8,"nodeType":"1187","messageId":"1188","endLine":7,"endColumn":17},{"ruleId":"1185","severity":1,"message":"1203","line":8,"column":8,"nodeType":"1187","messageId":"1188","endLine":8,"endColumn":28},{"ruleId":"1185","severity":1,"message":"1204","line":9,"column":8,"nodeType":"1187","messageId":"1188","endLine":9,"endColumn":19},{"ruleId":"1185","severity":1,"message":"1205","line":32,"column":7,"nodeType":"1187","messageId":"1188","endLine":32,"endColumn":12},{"ruleId":"1185","severity":1,"message":"1193","line":56,"column":9,"nodeType":"1187","messageId":"1188","endLine":56,"endColumn":24},{"ruleId":"1185","severity":1,"message":"1200","line":3,"column":19,"nodeType":"1187","messageId":"1188","endLine":3,"endColumn":23},{"ruleId":"1185","severity":1,"message":"1201","line":6,"column":8,"nodeType":"1187","messageId":"1188","endLine":6,"endColumn":23},{"ruleId":"1185","severity":1,"message":"1202","line":7,"column":8,"nodeType":"1187","messageId":"1188","endLine":7,"endColumn":17},{"ruleId":"1185","severity":1,"message":"1203","line":8,"column":8,"nodeType":"1187","messageId":"1188","endLine":8,"endColumn":28},{"ruleId":"1185","severity":1,"message":"1204","line":9,"column":8,"nodeType":"1187","messageId":"1188","endLine":9,"endColumn":19},{"ruleId":"1185","severity":1,"message":"1205","line":32,"column":7,"nodeType":"1187","messageId":"1188","endLine":32,"endColumn":12},{"ruleId":"1185","severity":1,"message":"1193","line":56,"column":9,"nodeType":"1187","messageId":"1188","endLine":56,"endColumn":24},{"ruleId":"1185","severity":1,"message":"1206","line":3,"column":10,"nodeType":"1187","messageId":"1188","endLine":3,"endColumn":17},{"ruleId":"1185","severity":1,"message":"1200","line":3,"column":19,"nodeType":"1187","messageId":"1188","endLine":3,"endColumn":23},{"ruleId":"1185","severity":1,"message":"1201","line":6,"column":8,"nodeType":"1187","messageId":"1188","endLine":6,"endColumn":23},{"ruleId":"1185","severity":1,"message":"1202","line":7,"column":8,"nodeType":"1187","messageId":"1188","endLine":7,"endColumn":17},{"ruleId":"1185","severity":1,"message":"1203","line":8,"column":8,"nodeType":"1187","messageId":"1188","endLine":8,"endColumn":28},{"ruleId":"1185","severity":1,"message":"1204","line":9,"column":8,"nodeType":"1187","messageId":"1188","endLine":9,"endColumn":19},{"ruleId":"1185","severity":1,"message":"1205","line":32,"column":7,"nodeType":"1187","messageId":"1188","endLine":32,"endColumn":12},{"ruleId":"1185","severity":1,"message":"1193","line":56,"column":9,"nodeType":"1187","messageId":"1188","endLine":56,"endColumn":24},{"ruleId":"1185","severity":1,"message":"1200","line":3,"column":19,"nodeType":"1187","messageId":"1188","endLine":3,"endColumn":23},{"ruleId":"1185","severity":1,"message":"1201","line":6,"column":8,"nodeType":"1187","messageId":"1188","endLine":6,"endColumn":23},{"ruleId":"1185","severity":1,"message":"1202","line":7,"column":8,"nodeType":"1187","messageId":"1188","endLine":7,"endColumn":17},{"ruleId":"1185","severity":1,"message":"1203","line":8,"column":8,"nodeType":"1187","messageId":"1188","endLine":8,"endColumn":28},{"ruleId":"1185","severity":1,"message":"1204","line":9,"column":8,"nodeType":"1187","messageId":"1188","endLine":9,"endColumn":19},{"ruleId":"1185","severity":1,"message":"1205","line":32,"column":7,"nodeType":"1187","messageId":"1188","endLine":32,"endColumn":12},{"ruleId":"1185","severity":1,"message":"1193","line":56,"column":9,"nodeType":"1187","messageId":"1188","endLine":56,"endColumn":24},{"ruleId":"1185","severity":1,"message":"1206","line":3,"column":10,"nodeType":"1187","messageId":"1188","endLine":3,"endColumn":17},{"ruleId":"1185","severity":1,"message":"1200","line":3,"column":19,"nodeType":"1187","messageId":"1188","endLine":3,"endColumn":23},{"ruleId":"1185","severity":1,"message":"1201","line":6,"column":8,"nodeType":"1187","messageId":"1188","endLine":6,"endColumn":23},{"ruleId":"1185","severity":1,"message":"1202","line":7,"column":8,"nodeType":"1187","messageId":"1188","endLine":7,"endColumn":17},{"ruleId":"1185","severity":1,"message":"1203","line":8,"column":8,"nodeType":"1187","messageId":"1188","endLine":8,"endColumn":28},{"ruleId":"1185","severity":1,"message":"1204","line":9,"column":8,"nodeType":"1187","messageId":"1188","endLine":9,"endColumn":19},{"ruleId":"1185","severity":1,"message":"1205","line":32,"column":7,"nodeType":"1187","messageId":"1188","endLine":32,"endColumn":12},{"ruleId":"1185","severity":1,"message":"1193","line":56,"column":9,"nodeType":"1187","messageId":"1188","endLine":56,"endColumn":24},{"ruleId":"1185","severity":1,"message":"1200","line":9,"column":26,"nodeType":"1187","messageId":"1188","endLine":9,"endColumn":30},{"ruleId":"1185","severity":1,"message":"1189","line":3,"column":10,"nodeType":"1187","messageId":"1188","endLine":3,"endColumn":22},{"ruleId":"1185","severity":1,"message":"1207","line":5,"column":10,"nodeType":"1187","messageId":"1188","endLine":5,"endColumn":24},{"ruleId":"1185","severity":1,"message":"1189","line":3,"column":10,"nodeType":"1187","messageId":"1188","endLine":3,"endColumn":22},{"ruleId":"1185","severity":1,"message":"1189","line":4,"column":10,"nodeType":"1187","messageId":"1188","endLine":4,"endColumn":22},{"ruleId":"1185","severity":1,"message":"1208","line":8,"column":7,"nodeType":"1187","messageId":"1188","endLine":8,"endColumn":19},{"ruleId":"1185","severity":1,"message":"1189","line":2,"column":10,"nodeType":"1187","messageId":"1188","endLine":2,"endColumn":22},{"ruleId":"1181","severity":1,"message":"1182","line":34,"column":3,"nodeType":"1183","messageId":"1184","endLine":34,"endColumn":14},{"ruleId":"1185","severity":1,"message":"1189","line":3,"column":10,"nodeType":"1187","messageId":"1188","endLine":3,"endColumn":22},{"ruleId":"1185","severity":1,"message":"1209","line":1,"column":16,"nodeType":"1187","messageId":"1188","endLine":1,"endColumn":28},{"ruleId":"1185","severity":1,"message":"1210","line":53,"column":9,"nodeType":"1187","messageId":"1188","endLine":53,"endColumn":16},{"ruleId":"1185","severity":1,"message":"1211","line":54,"column":9,"nodeType":"1187","messageId":"1188","endLine":54,"endColumn":22},{"ruleId":"1185","severity":1,"message":"1189","line":2,"column":10,"nodeType":"1187","messageId":"1188","endLine":2,"endColumn":22},{"ruleId":"1185","severity":1,"message":"1212","line":1,"column":30,"nodeType":"1187","messageId":"1188","endLine":1,"endColumn":39},{"ruleId":"1185","severity":1,"message":"1213","line":19,"column":10,"nodeType":"1187","messageId":"1188","endLine":19,"endColumn":18},{"ruleId":"1185","severity":1,"message":"1214","line":19,"column":20,"nodeType":"1187","messageId":"1188","endLine":19,"endColumn":34},{"ruleId":"1185","severity":1,"message":"1189","line":20,"column":10,"nodeType":"1187","messageId":"1188","endLine":20,"endColumn":22},{"ruleId":"1185","severity":1,"message":"1215","line":25,"column":8,"nodeType":"1187","messageId":"1188","endLine":25,"endColumn":16},{"ruleId":"1185","severity":1,"message":"1216","line":71,"column":19,"nodeType":"1187","messageId":"1188","endLine":71,"endColumn":29},{"ruleId":"1181","severity":1,"message":"1182","line":117,"column":7,"nodeType":"1183","messageId":"1184","endLine":117,"endColumn":18},{"ruleId":"1185","severity":1,"message":"1189","line":5,"column":10,"nodeType":"1187","messageId":"1188","endLine":5,"endColumn":22},{"ruleId":"1185","severity":1,"message":"1189","line":4,"column":10,"nodeType":"1187","messageId":"1188","endLine":4,"endColumn":22},{"ruleId":"1185","severity":1,"message":"1189","line":2,"column":10,"nodeType":"1187","messageId":"1188","endLine":2,"endColumn":22},{"ruleId":"1185","severity":1,"message":"1189","line":3,"column":10,"nodeType":"1187","messageId":"1188","endLine":3,"endColumn":22},{"ruleId":"1185","severity":1,"message":"1189","line":10,"column":10,"nodeType":"1187","messageId":"1188","endLine":10,"endColumn":22},{"ruleId":"1185","severity":1,"message":"1189","line":4,"column":10,"nodeType":"1187","messageId":"1188","endLine":4,"endColumn":22},{"ruleId":"1185","severity":1,"message":"1189","line":2,"column":10,"nodeType":"1187","messageId":"1188","endLine":2,"endColumn":22},{"ruleId":"1185","severity":1,"message":"1189","line":2,"column":10,"nodeType":"1187","messageId":"1188","endLine":2,"endColumn":22},{"ruleId":"1185","severity":1,"message":"1217","line":4,"column":10,"nodeType":"1187","messageId":"1188","endLine":4,"endColumn":22},{"ruleId":"1185","severity":1,"message":"1218","line":4,"column":24,"nodeType":"1187","messageId":"1188","endLine":4,"endColumn":31},{"ruleId":"1185","severity":1,"message":"1219","line":4,"column":33,"nodeType":"1187","messageId":"1188","endLine":4,"endColumn":40},{"ruleId":"1185","severity":1,"message":"1220","line":28,"column":3,"nodeType":"1187","messageId":"1188","endLine":28,"endColumn":7},{"ruleId":"1185","severity":1,"message":"1221","line":8,"column":27,"nodeType":"1187","messageId":"1188","endLine":8,"endColumn":45},{"ruleId":"1185","severity":1,"message":"1222","line":61,"column":11,"nodeType":"1187","messageId":"1188","endLine":61,"endColumn":23},{"ruleId":"1223","severity":1,"message":"1224","line":81,"column":44,"nodeType":"1225","messageId":"1226","endLine":81,"endColumn":53},{"ruleId":"1181","severity":1,"message":"1182","line":85,"column":9,"nodeType":"1183","messageId":"1184","endLine":85,"endColumn":20},{"ruleId":"1171","replacedBy":"1227"},{"ruleId":"1173","replacedBy":"1228"},{"ruleId":"1175","replacedBy":"1229"},{"ruleId":"1177","replacedBy":"1230"},{"ruleId":"1179","replacedBy":"1231"},{"ruleId":"1185","severity":1,"message":"1189","line":3,"column":10,"nodeType":"1187","messageId":"1188","endLine":3,"endColumn":22},{"ruleId":"1185","severity":1,"message":"1232","line":5,"column":10,"nodeType":"1187","messageId":"1188","endLine":5,"endColumn":24},{"ruleId":"1185","severity":1,"message":"1189","line":2,"column":10,"nodeType":"1187","messageId":"1188","endLine":2,"endColumn":22},{"ruleId":"1185","severity":1,"message":"1189","line":2,"column":10,"nodeType":"1187","messageId":"1188","endLine":2,"endColumn":22},{"ruleId":"1185","severity":1,"message":"1233","line":3,"column":35,"nodeType":"1187","messageId":"1188","endLine":3,"endColumn":43},{"ruleId":"1185","severity":1,"message":"1234","line":5,"column":10,"nodeType":"1187","messageId":"1188","endLine":5,"endColumn":21},{"ruleId":"1185","severity":1,"message":"1235","line":12,"column":10,"nodeType":"1187","messageId":"1188","endLine":12,"endColumn":25},{"ruleId":"1185","severity":1,"message":"1236","line":40,"column":5,"nodeType":"1187","messageId":"1188","endLine":40,"endColumn":10},{"ruleId":"1185","severity":1,"message":"1207","line":5,"column":10,"nodeType":"1187","messageId":"1188","endLine":5,"endColumn":24},{"ruleId":"1185","severity":1,"message":"1189","line":3,"column":10,"nodeType":"1187","messageId":"1188","endLine":3,"endColumn":22},{"ruleId":"1185","severity":1,"message":"1237","line":4,"column":8,"nodeType":"1187","messageId":"1188","endLine":4,"endColumn":23},{"ruleId":"1185","severity":1,"message":"1238","line":6,"column":10,"nodeType":"1187","messageId":"1188","endLine":6,"endColumn":25},{"ruleId":"1185","severity":1,"message":"1239","line":7,"column":10,"nodeType":"1187","messageId":"1188","endLine":7,"endColumn":26},{"ruleId":"1185","severity":1,"message":"1189","line":2,"column":10,"nodeType":"1187","messageId":"1188","endLine":2,"endColumn":22},{"ruleId":"1185","severity":1,"message":"1240","line":8,"column":26,"nodeType":"1187","messageId":"1188","endLine":8,"endColumn":43},{"ruleId":"1185","severity":1,"message":"1217","line":4,"column":10,"nodeType":"1187","messageId":"1188","endLine":4,"endColumn":22},{"ruleId":"1185","severity":1,"message":"1218","line":4,"column":24,"nodeType":"1187","messageId":"1188","endLine":4,"endColumn":31},{"ruleId":"1185","severity":1,"message":"1219","line":4,"column":33,"nodeType":"1187","messageId":"1188","endLine":4,"endColumn":40},{"ruleId":"1185","severity":1,"message":"1241","line":4,"column":42,"nodeType":"1187","messageId":"1188","endLine":4,"endColumn":50},{"ruleId":"1185","severity":1,"message":"1220","line":29,"column":3,"nodeType":"1187","messageId":"1188","endLine":29,"endColumn":7},{"ruleId":"1185","severity":1,"message":"1242","line":32,"column":3,"nodeType":"1187","messageId":"1188","endLine":32,"endColumn":13},{"ruleId":"1185","severity":1,"message":"1243","line":33,"column":3,"nodeType":"1187","messageId":"1188","endLine":33,"endColumn":15},{"ruleId":"1185","severity":1,"message":"1244","line":8,"column":19,"nodeType":"1187","messageId":"1188","endLine":8,"endColumn":29},{"ruleId":"1185","severity":1,"message":"1245","line":4,"column":8,"nodeType":"1187","messageId":"1188","endLine":4,"endColumn":17},{"ruleId":"1185","severity":1,"message":"1246","line":6,"column":8,"nodeType":"1187","messageId":"1188","endLine":6,"endColumn":22},{"ruleId":"1185","severity":1,"message":"1200","line":2,"column":35,"nodeType":"1187","messageId":"1188","endLine":2,"endColumn":39},{"ruleId":"1185","severity":1,"message":"1245","line":3,"column":8,"nodeType":"1187","messageId":"1188","endLine":3,"endColumn":17},{"ruleId":"1185","severity":1,"message":"1239","line":6,"column":10,"nodeType":"1187","messageId":"1188","endLine":6,"endColumn":26},{"ruleId":"1185","severity":1,"message":"1247","line":7,"column":10,"nodeType":"1187","messageId":"1188","endLine":7,"endColumn":24},{"ruleId":"1185","severity":1,"message":"1248","line":7,"column":26,"nodeType":"1187","messageId":"1188","endLine":7,"endColumn":42},{"ruleId":"1185","severity":1,"message":"1249","line":9,"column":10,"nodeType":"1187","messageId":"1188","endLine":9,"endColumn":24},{"ruleId":"1185","severity":1,"message":"1250","line":10,"column":8,"nodeType":"1187","messageId":"1188","endLine":10,"endColumn":17},{"ruleId":"1185","severity":1,"message":"1251","line":11,"column":10,"nodeType":"1187","messageId":"1188","endLine":11,"endColumn":18},{"ruleId":"1185","severity":1,"message":"1252","line":18,"column":7,"nodeType":"1187","messageId":"1188","endLine":18,"endColumn":10},{"ruleId":"1185","severity":1,"message":"1233","line":3,"column":35,"nodeType":"1187","messageId":"1188","endLine":3,"endColumn":43},{"ruleId":"1185","severity":1,"message":"1234","line":5,"column":10,"nodeType":"1187","messageId":"1188","endLine":5,"endColumn":21},{"ruleId":"1185","severity":1,"message":"1246","line":12,"column":8,"nodeType":"1187","messageId":"1188","endLine":12,"endColumn":22},{"ruleId":"1185","severity":1,"message":"1245","line":4,"column":8,"nodeType":"1187","messageId":"1188","endLine":4,"endColumn":17},{"ruleId":"1185","severity":1,"message":"1246","line":6,"column":8,"nodeType":"1187","messageId":"1188","endLine":6,"endColumn":22},{"ruleId":"1185","severity":1,"message":"1237","line":4,"column":8,"nodeType":"1187","messageId":"1188","endLine":4,"endColumn":23},{"ruleId":"1185","severity":1,"message":"1249","line":6,"column":10,"nodeType":"1187","messageId":"1188","endLine":6,"endColumn":24},{"ruleId":"1185","severity":1,"message":"1239","line":7,"column":10,"nodeType":"1187","messageId":"1188","endLine":7,"endColumn":26},{"ruleId":"1181","severity":1,"message":"1182","line":124,"column":7,"nodeType":"1183","messageId":"1184","endLine":124,"endColumn":18},"lines-around-directive",["1253"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-console","Unexpected console statement.","MemberExpression","unexpected","@typescript-eslint/no-unused-vars","'styled' is defined but never used.","Identifier","unusedVar","'useWeb3React' is defined but never used.","'CHAIN_ID' is assigned a value but never used.","'useProfile' is defined but never used.","'fetchTranslationsForSelectedLanguage' is assigned a value but never used.","'TranslateString' is assigned a value but never used.","'useMemo' is defined but never used.","'Image' is defined but never used.","'CAKE_PER_BLOCK' is defined but never used.","'CAKE_POOL_PID' is defined but never used.","'FarmTabButtons' is defined but never used.","'setStakedOnly' is assigned a value but never used.","'Text' is defined but never used.","'FarmStakingCard' is defined but never used.","'CakeStats' is defined but never used.","'TotalValueLockedCard' is defined but never used.","'TwitterCard' is defined but never used.","'Cards' is assigned a value but never used.","'Heading' is defined but never used.","'communityFarms' is defined but never used.","'ImageWrapper' is assigned a value but never used.","'IPFS_GATEWAY' is defined but never used.","'uriData' is assigned a value but never used.","'identifierKey' is assigned a value but never used.","'useEffect' is defined but never used.","'parseISO' is defined but never used.","'formatDistance' is defined but never used.","'debounce' is defined but never used.","'setMessage' is assigned a value but never used.","'CommunityTag' is defined but never used.","'CoreTag' is defined but never used.","'RiskTag' is defined but never used.","'risk' is defined but never used.","'useFarm3FromSymbol' is defined but never used.","'currentBlock' is assigned a value but never used.","func-names","Unexpected unnamed function.","FunctionExpression","unnamed",["1253"],[],[],[],[],"'useWalletModal' is defined but never used.","'Skeleton' is defined but never used.","'useGetStats' is defined but never used.","'useAllEarnings3' is defined but never used.","'image' is assigned a value but never used.","'useTokenBalance' is defined but never used.","'getCake3Address' is defined but never used.","'getBalanceNumber' is defined but never used.","'useFarmFromSymbol' is defined but never used.","'NoFeeTag' is defined but never used.","'depositFee' is defined but never used.","'unstakingFee' is defined but never used.","'QuoteToken' is defined but never used.","'BigNumber' is defined but never used.","'useAllEarnings' is defined but never used.","'useTotalSupply' is defined but never used.","'useBurnedBalance' is defined but never used.","'getCakeAddress' is defined but never used.","'CardValue' is defined but never used.","'useFarms' is defined but never used.","'Row' is assigned a value but never used.","padding-line-between-statements"]